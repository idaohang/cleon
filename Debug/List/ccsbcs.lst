###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.51.2.50607/W32 for MSP430       07/Dec/2012  20:25:50 #
# Copyright 1996-2012 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  64                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  large                                                   #
#    Source file   =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall     #
#                     2012\4_CLEON\3_software\1_developing\cleon\fs\FatFs\ccs #
#                     bcs.c                                                   #
#    Command line  =  "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall    #
#                     2012\4_CLEON\3_software\1_developing\cleon\fs\FatFs\ccs #
#                     bcs.c" -lC "C:\Users\woosuk\Dropbox\lws\ESL\3.          #
#                     Research\7. Fall 2012\4_CLEON\3_software\1_developing\c #
#                     leon\Debug\List\" -la "C:\Users\woosuk\Dropbox\lws\ESL\ #
#                     3. Research\7. Fall 2012\4_CLEON\3_software\1_developin #
#                     g\cleon\Debug\List\" -o "C:\Users\woosuk\Dropbox\lws\ES #
#                     L\3. Research\7. Fall 2012\4_CLEON\3_software\1_develop #
#                     ing\cleon\Debug\Obj\" --no_cse --no_unroll --no_inline  #
#                     --no_code_motion --no_tbaa --debug -D__MSP430F5338__    #
#                     -e --double=64 --dlib_config "C:\Program Files\IAR      #
#                     Systems\Embedded Workbench                              #
#                     6.4\430\LIB\DLIB\dl430xldn.h" -I                        #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall    #
#                     2012\4_CLEON\3_software\1_developing\cleon\intro\" -I   #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall    #
#                     2012\4_CLEON\3_software\1_developing\cleon\sys\" -I     #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall    #
#                     2012\4_CLEON\3_software\1_developing\cleon\hal\" -I     #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall    #
#                     2012\4_CLEON\3_software\1_developing\cleon\hal\rtclib\" #
#                      -I "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7.     #
#                     Fall 2012\4_CLEON\3_software\1_developing\cleon\platfor #
#                     m\" -I "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7.  #
#                     Fall 2012\4_CLEON\3_software\1_developing\cleon\fs\"    #
#                     -I "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7.      #
#                     Fall 2012\4_CLEON\3_software\1_developing\cleon\fs\FatF #
#                     s\" -I "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7.  #
#                     Fall 2012\4_CLEON\3_software\1_developing\cleon\app\"   #
#                     -I "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7.      #
#                     Fall 2012\4_CLEON\3_software\1_developing\cleon\"       #
#                     --core=430X --data_model=large -On --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#                     --hw_workaround=CPU42                                   #
#    List file     =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall     #
#                     2012\4_CLEON\3_software\1_developing\cleon\Debug\List\c #
#                     csbcs.lst                                               #
#    Object file   =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall     #
#                     2012\4_CLEON\3_software\1_developing\cleon\Debug\Obj\cc #
#                     sbcs.r43                                                #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\woosuk\Dropbox\lws\ESL\3. Research\7. Fall 2012\4_CLEON\3_software\1_developing\cleon\fs\FatFs\ccsbcs.c
      1          /*------------------------------------------------------------------------*/
      2          /* Unicode - Local code bidirectional converter  (C)ChaN, 2009            */
      3          /* (SBCS code pages)                                                      */
      4          /*------------------------------------------------------------------------*/
      5          /*  437   U.S. (OEM)
      6          /   720   Arabic (OEM)
      7          /   1256  Arabic (Windows)
      8          /   737   Greek (OEM)
      9          /   1253  Greek (Windows)
     10          /   1250  Central Europe (Windows)
     11          /   775   Baltic (OEM)
     12          /   1257  Baltic (Windows)
     13          /   850   Multilingual Latin 1 (OEM)
     14          /   852   Latin 2 (OEM)
     15          /   1252  Latin 1 (Windows)
     16          /   855   Cyrillic (OEM)
     17          /   1251  Cyrillic (Windows)
     18          /   866   Russian (OEM)
     19          /   857   Turkish (OEM)
     20          /   1254  Turkish (Windows)
     21          /   858   Multilingual Latin 1 + Euro (OEM)
     22          /   862   Hebrew (OEM)
     23          /   1255  Hebrew (Windows)
     24          /   874   Thai (OEM, Windows)
     25          /   1258  Vietnam (OEM, Windows)
     26          */
     27          
     28          #include "ff.h"
     29          
     30          #if _CODE_PAGE == 437
     31          #define _TBLDEF 1
     32          static

   \                                 In  segment DATA20_C, align 2, align-sorted
     33          const WCHAR Tbl[] = {	/*  CP437(0x80-0xFF) to Unicode conversion table */
   \                     Tbl:
   \   000000   C700FC00E900 DC16 199, 252, 233, 226, 228, 224, 229, 231, 234, 235, 232, 239, 238
   \            E200E400E000
   \            E500E700EA00
   \            EB00E800EF00
   \            EE00        
   \   00001A   EC00C400C500 DC16 236, 196, 197, 201, 230, 198, 244, 246, 242, 251, 249, 255, 214
   \            C900E600C600
   \            F400F600F200
   \            FB00F900FF00
   \            D600        
   \   000034   DC00A200A300 DC16 220, 162, 163, 165, 8359, 402, 225, 237, 243, 250, 241, 209, 170
   \            A500A7209201
   \            E100ED00F300
   \            FA00F100D100
   \            AA00        
   \   00004E   BA00BF001023 DC16 186, 191, 8976, 172, 189, 188, 161, 171, 187, 9617, 9618, 9619
   \            AC00BD00BC00
   \            A100AB00BB00
   \            912592259325
   \   000066   022524256125 DC16 9474, 9508, 9569, 9570, 9558, 9557, 9571, 9553, 9559, 9565, 9564
   \            622556255525
   \            632551255725
   \            5D255C25    
   \   00007C   5B2510251425 DC16 9563, 9488, 9492, 9524, 9516, 9500, 9472, 9532, 9566, 9567, 9562
   \            34252C251C25
   \            00253C255E25
   \            5F255A25    
   \   000092   542569256625 DC16 9556, 9577, 9574, 9568, 9552, 9580, 9575, 9576, 9572, 9573, 9561
   \            602550256C25
   \            672568256425
   \            65255925    
   \   0000A8   582552255325 DC16 9560, 9554, 9555, 9579, 9578, 9496, 9484, 9608, 9604, 9612, 9616
   \            6B256A251825
   \            0C2588258425
   \            8C259025    
   \   0000BE   8025B103DF00 DC16 9600, 945, 223, 915, 960, 931, 963, 181, 964, 934, 920, 937, 948
   \            9303C003A303
   \            C303B500C403
   \            A6039803A903
   \            B403        
   \   0000D8   1E22C603B503 DC16 8734, 966, 949, 8745, 8801, 177, 8805, 8804, 8992, 8993, 247, 8776
   \            29226122B100
   \            652264222023
   \            2123F7004822
   \   0000F0   B0001922B700 DC16 176, 8729, 183, 8730, 8319, 178, 9632, 160
   \            1A227F20B200
   \            A025A000    
     34          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
     35          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
     36          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
     37          	0x00FF, 0x00D6, 0x00DC, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
     38          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
     39          	0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
     40          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
     41          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
     42          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
     43          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
     44          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
     45          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
     46          	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
     47          	0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
     48          	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
     49          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
     50          };
     51          
     52          #elif _CODE_PAGE == 720
     53          #define _TBLDEF 1
     54          static
     55          const WCHAR Tbl[] = {	/*  CP720(0x80-0xFF) to Unicode conversion table */
     56          	0x0000, 0x0000, 0x00E9, 0x00E2, 0x0000, 0x00E0, 0x0000, 0x00E7,
     57          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x0000, 0x0000, 0x0000,
     58          	0x0000, 0x0651, 0x0652, 0x00F4, 0x00A4, 0x0640, 0x00FB, 0x00F9,
     59          	0x0621, 0x0622, 0x0623, 0x0624, 0x00A3, 0x0625, 0x0626, 0x0627,
     60          	0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
     61          	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x00AB, 0x00BB,
     62          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
     63          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
     64          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
     65          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
     66          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
     67          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
     68          	0x0636, 0x0637, 0x0638, 0x0639, 0x063A, 0x0641, 0x00B5, 0x0642,
     69          	0x0643, 0x0644, 0x0645, 0x0646, 0x0647, 0x0648, 0x0649, 0x064A,
     70          	0x2261, 0x064B, 0x064C, 0x064D, 0x064E, 0x064F, 0xO650, 0x2248,
     71          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
     72          };
     73          
     74          #elif _CODE_PAGE == 737
     75          #define _TBLDEF 1
     76          static
     77          const WCHAR Tbl[] = {	/*  CP737(0x80-0xFF) to Unicode conversion table */
     78          	0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397, 0x0398,
     79          	0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F, 0x03A0,
     80          	0x03A1, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7, 0x03A8, 0x03A9,
     81          	0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7, 0x03B8,
     82          	0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF, 0x03C0,
     83          	0x03C1, 0x03C3, 0x03C2, 0x03C4, 0x03C5, 0x03C6, 0x03C7, 0x03C8,
     84          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
     85          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
     86          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
     87          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
     88          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
     89          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
     90          	0x03C9, 0x03AC, 0x03AD, 0x03AE, 0x03CA, 0x03AF, 0x03CC, 0x03CD,
     91          	0x03CB, 0x03CE, 0x0386, 0x0388, 0x0389, 0x038A, 0x038C, 0x038E,
     92          	0x038F, 0x00B1, 0x2265, 0x2264, 0x03AA, 0x03AB, 0x00F7, 0x2248,
     93          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
     94          };
     95          
     96          #elif _CODE_PAGE == 775
     97          #define _TBLDEF 1
     98          static
     99          const WCHAR Tbl[] = {	/*  CP775(0x80-0xFF) to Unicode conversion table */
    100          	0x0106, 0x00FC, 0x00E9, 0x0101, 0x00E4, 0x0123, 0x00E5, 0x0107,
    101          	0x0142, 0x0113, 0x0156, 0x0157, 0x012B, 0x0179, 0x00C4, 0x00C5,
    102          	0x00C9, 0x00E6, 0x00C6, 0x014D, 0x00F6, 0x0122, 0x00A2, 0x015A,
    103          	0x015B, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x00A4,
    104          	0x0100, 0x012A, 0x00F3, 0x017B, 0x017C, 0x017A, 0x201D, 0x00A6,
    105          	0x00A9, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x0141, 0x00AB, 0x00BB,
    106          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0104, 0x010C, 0x0118,
    107          	0x0116, 0x2563, 0x2551, 0x2557, 0x255D, 0x012E, 0x0160, 0x2510,
    108          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0172, 0x016A,
    109          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x017D,
    110          	0x0105, 0x010D, 0x0119, 0x0117, 0x012F, 0x0161, 0x0173, 0x016B,
    111          	0x017E, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    112          	0x00D3, 0x00DF, 0x014C, 0x0143, 0x00F5, 0x00D5, 0x00B5, 0x0144,
    113          	0x0136, 0x0137, 0x013B, 0x013C, 0x0146, 0x0112, 0x0145, 0x2019,
    114          	0x00AD, 0x00B1, 0x201C, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x201E,
    115          	0x00B0, 0x2219, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    116          };
    117          
    118          #elif _CODE_PAGE == 850
    119          #define _TBLDEF 1
    120          static
    121          const WCHAR Tbl[] = {	/*  CP850(0x80-0xFF) to Unicode conversion table */
    122          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
    123          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
    124          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
    125          	0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
    126          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
    127          	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    128          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
    129          	0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
    130          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
    131          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    132          	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE,
    133          	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
    134          	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
    135          	0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
    136          	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
    137          	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    138          };
    139          
    140          #elif _CODE_PAGE == 852
    141          #define _TBLDEF 1
    142          static
    143          const WCHAR Tbl[] = {	/*  CP852(0x80-0xFF) to Unicode conversion table */
    144          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x016F, 0x0107, 0x00E7,
    145          	0x0142, 0x00EB, 0x0150, 0x0151, 0x00EE, 0x0179, 0x00C4, 0x0106,
    146          	0x00C9, 0x0139, 0x013A, 0x00F4, 0x00F6, 0x013D, 0x013E, 0x015A,
    147          	0x015B, 0x00D6, 0x00DC, 0x0164, 0x0165, 0x0141, 0x00D7, 0x010D,
    148          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x0104, 0x0105, 0x017D, 0x017E,
    149          	0x0118, 0x0119, 0x00AC, 0x017A, 0x010C, 0x015F, 0x00AB, 0x00BB,
    150          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x011A,
    151          	0x015E, 0x2563, 0x2551, 0x2557, 0x255D, 0x017B, 0x017C, 0x2510,
    152          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0102, 0x0103,
    153          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    154          	0x0111, 0x0110, 0x010E, 0x00CB, 0x010F, 0x0147, 0x00CD, 0x00CE,
    155          	0x011B, 0x2518, 0x250C, 0x2588, 0x2584, 0x0162, 0x016E, 0x2580,
    156          	0x00D3, 0x00DF, 0x00D4, 0x0143, 0x0144, 0x0148, 0x0160, 0x0161,
    157          	0x0154, 0x00DA, 0x0155, 0x0170, 0x00FD, 0x00DD, 0x0163, 0x00B4,
    158          	0x00AD, 0x02DD, 0x02DB, 0x02C7, 0x02D8, 0x00A7, 0x00F7, 0x00B8,
    159          	0x00B0, 0x00A8, 0x02D9, 0x0171, 0x0158, 0x0159, 0x25A0, 0x00A0
    160          };
    161          
    162          #elif _CODE_PAGE == 855
    163          #define _TBLDEF 1
    164          static
    165          const WCHAR Tbl[] = {	/*  CP855(0x80-0xFF) to Unicode conversion table */
    166          	0x0452, 0x0402, 0x0453, 0x0403, 0x0451, 0x0401, 0x0454, 0x0404,
    167          	0x0455, 0x0405, 0x0456, 0x0406, 0x0457, 0x0407, 0x0458, 0x0408,
    168          	0x0459, 0x0409, 0x045A, 0x040A, 0x045B, 0x040B, 0x045C, 0x040C,
    169          	0x045E, 0x040E, 0x045F, 0x040F, 0x044E, 0x042E, 0x044A, 0x042A,
    170          	0x0430, 0x0410, 0x0431, 0x0411, 0x0446, 0x0426, 0x0434, 0x0414,
    171          	0x0435, 0x0415, 0x0444, 0x0424, 0x0433, 0x0413, 0x00AB, 0x00BB,
    172          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0445, 0x0425, 0x0438,
    173          	0x0418, 0x2563, 0x2551, 0x2557, 0x255D, 0x0439, 0x0419, 0x2510,
    174          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x043A, 0x041A,
    175          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    176          	0x043B, 0x041B, 0x043C, 0x041C, 0x043D, 0x041D, 0x043E, 0x041E,
    177          	0x043F, 0x2518, 0x250C, 0x2588, 0x2584, 0x041F, 0x044F, 0x2580,
    178          	0x042F, 0x0440, 0x0420, 0x0441, 0x0421, 0x0442, 0x0422, 0x0443,
    179          	0x0423, 0x0436, 0x0416, 0x0432, 0x0412, 0x044C, 0x042C, 0x2116,
    180          	0x00AD, 0x044B, 0x042B, 0x0437, 0x0417, 0x0448, 0x0428, 0x044D,
    181          	0x042D, 0x0449, 0x0429, 0x0447, 0x0427, 0x00A7, 0x25A0, 0x00A0
    182          };
    183          
    184          #elif _CODE_PAGE == 857
    185          #define _TBLDEF 1
    186          static
    187          const WCHAR Tbl[] = {	/*  CP857(0x80-0xFF) to Unicode conversion table */
    188          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
    189          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x0131, 0x00C4, 0x00C5,
    190          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
    191          	0x0130, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x015E, 0x015F,
    192          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x011E, 0x011F,
    193          	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    194          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
    195          	0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
    196          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
    197          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    198          	0x00BA, 0x00AA, 0x00CA, 0x00CB, 0x00C8, 0x0000, 0x00CD, 0x00CE,
    199          	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
    200          	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x0000,
    201          	0x00D7, 0x00DA, 0x00DB, 0x00D9, 0x00EC, 0x00FF, 0x00AF, 0x00B4,
    202          	0x00AD, 0x00B1, 0x0000, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
    203          	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    204          };
    205          
    206          #elif _CODE_PAGE == 858
    207          #define _TBLDEF 1
    208          static
    209          const WCHAR Tbl[] = {	/*  CP858(0x80-0xFF) to Unicode conversion table */
    210          	0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7,
    211          	0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
    212          	0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9,
    213          	0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
    214          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
    215          	0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    216          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0,
    217          	0x00A9, 0x2563, 0x2551, 0x2557, 0x2550, 0x00A2, 0x00A5, 0x2510,
    218          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3,
    219          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
    220          	0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x20AC, 0x00CD, 0x00CE,
    221          	0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00C6, 0x00CC, 0x2580,
    222          	0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE,
    223          	0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
    224          	0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8,
    225          	0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
    226          };
    227          
    228          #elif _CODE_PAGE == 862
    229          #define _TBLDEF 1
    230          static
    231          const WCHAR Tbl[] = {	/*  CP862(0x80-0xFF) to Unicode conversion table */
    232          	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
    233          	0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
    234          	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
    235          	0x05E8, 0x05E9, 0x05EA, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
    236          	0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA,
    237          	0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
    238          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
    239          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
    240          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
    241          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
    242          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
    243          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    244          	0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4,
    245          	0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
    246          	0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248,
    247          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
    248          };
    249          
    250          #elif _CODE_PAGE == 866
    251          #define _TBLDEF 1
    252          static
    253          const WCHAR Tbl[] = {	/*  CP866(0x80-0xFF) to Unicode conversion table */
    254          	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    255          	0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    256          	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    257          	0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    258          	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    259          	0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    260          	0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,
    261          	0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
    262          	0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,
    263          	0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
    264          	0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,
    265          	0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
    266          	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    267          	0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F,
    268          	0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E,
    269          	0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0
    270          };
    271          
    272          #elif _CODE_PAGE == 874
    273          #define _TBLDEF 1
    274          static
    275          const WCHAR Tbl[] = {	/*  CP874(0x80-0xFF) to Unicode conversion table */
    276          	0x20AC, 0x0000, 0x0000, 0x0000, 0x0000, 0x2026, 0x0000, 0x0000,
    277          	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    278          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    279          	0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    280          	0x00A0, 0x0E01, 0x0E02, 0x0E03, 0x0E04, 0x0E05, 0x0E06, 0x0E07,
    281          	0x0E08, 0x0E09, 0x0E0A, 0x0E0B, 0x0E0C, 0x0E0D, 0x0E0E, 0x0E0F,
    282          	0x0E10, 0x0E11, 0x0E12, 0x0E13, 0x0E14, 0x0E15, 0x0E16, 0x0E17,
    283          	0x0E18, 0x0E19, 0x0E1A, 0x0E1B, 0x0E1C, 0x0E1D, 0x0E1E, 0x0E1F,
    284          	0x0E20, 0x0E21, 0x0E22, 0x0E23, 0x0E24, 0x0E25, 0x0E26, 0x0E27,
    285          	0x0E28, 0x0E29, 0x0E2A, 0x0E2B, 0x0E2C, 0x0E2D, 0x0E2E, 0x0E2F,
    286          	0x0E30, 0x0E31, 0x0E32, 0x0E33, 0x0E34, 0x0E35, 0x0E36, 0x0E37,
    287          	0x0E38, 0x0E39, 0x0E3A, 0x0000, 0x0000, 0x0000, 0x0000, 0x0E3F,
    288          	0x0E40, 0x0E41, 0x0E42, 0x0E43, 0x0E44, 0x0E45, 0x0E46, 0x0E47,
    289          	0x0E48, 0x0E49, 0x0E4A, 0x0E4B, 0x0E4C, 0x0E4D, 0x0E4E, 0x0E4F,
    290          	0x0E50, 0x0E51, 0x0E52, 0x0E53, 0x0E54, 0x0E55, 0x0E56, 0x0E57,
    291          	0x0E58, 0x0E59, 0x0E5A, 0x0E5B, 0x0000, 0x0000, 0x0000, 0x0000
    292          };
    293          
    294          #elif _CODE_PAGE == 1250
    295          #define _TBLDEF 1
    296          static
    297          const WCHAR Tbl[] = {	/*  CP1250(0x80-0xFF) to Unicode conversion table */
    298          	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021,
    299          	0x0000, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
    300          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    301          	0x0000, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
    302          	0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7,
    303          	0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
    304          	0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    305          	0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
    306          	0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7,
    307          	0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
    308          	0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7,
    309          	0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
    310          	0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7,
    311          	0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
    312          	0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7,
    313          	0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
    314          };
    315          
    316          #elif _CODE_PAGE == 1251
    317          #define _TBLDEF 1
    318          static
    319          const WCHAR Tbl[] = {	/*  CP1251(0x80-0xFF) to Unicode conversion table */
    320          	0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
    321          	0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
    322          	0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    323          	0x0000, 0x2111, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
    324          	0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
    325          	0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
    326          	0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
    327          	0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
    328          	0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    329          	0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    330          	0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    331          	0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    332          	0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    333          	0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    334          	0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    335          	0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
    336          };
    337          
    338          #elif _CODE_PAGE == 1252
    339          #define _TBLDEF 1
    340          static
    341          const WCHAR Tbl[] = {	/*  CP1252(0x80-0xFF) to Unicode conversion table */
    342          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    343          	0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0000, 0x017D, 0x0000,
    344          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    345          	0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0000, 0x017E, 0x0178,
    346          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    347          	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    348          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    349          	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    350          	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
    351          	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
    352          	0x00D0, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
    353          	0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF,
    354          	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    355          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
    356          	0x00F0, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
    357          	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x00FF
    358          };
    359          
    360          #elif _CODE_PAGE == 1253
    361          #define _TBLDEF 1
    362          static
    363          const WCHAR Tbl[] = {	/*  CP1253(0x80-0xFF) to Unicode conversion table */
    364          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    365          	0x0000, 0x2030, 0x0000, 0x2039, 0x000C, 0x0000, 0x0000, 0x0000,
    366          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    367          	0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
    368          	0x00A0, 0x0385, 0x0386, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    369          	0x00A8, 0x00A9, 0x0000, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x2015,
    370          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x0384, 0x00B5, 0x00B6, 0x00B7,
    371          	0x0388, 0x0389, 0x038A, 0x00BB, 0x038C, 0x00BD, 0x038E, 0x038F,
    372          	0x0390, 0x0391, 0x0392, 0x0393, 0x0394, 0x0395, 0x0396, 0x0397,
    373          	0x0398, 0x0399, 0x039A, 0x039B, 0x039C, 0x039D, 0x039E, 0x039F,
    374          	0x03A0, 0x03A1, 0x0000, 0x03A3, 0x03A4, 0x03A5, 0x03A6, 0x03A7,
    375          	0x03A8, 0x03A9, 0x03AA, 0x03AD, 0x03AC, 0x03AD, 0x03AE, 0x03AF,
    376          	0x03B0, 0x03B1, 0x03B2, 0x03B3, 0x03B4, 0x03B5, 0x03B6, 0x03B7,
    377          	0x03B8, 0x03B9, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BE, 0x03BF,
    378          	0x03C0, 0x03C1, 0x03C2, 0x03C3, 0x03C4, 0x03C5, 0x03C6, 0x03C7,
    379          	0x03C8, 0x03C9, 0x03CA, 0x03CB, 0x03CC, 0x03CD, 0x03CE, 0x0000
    380          };
    381          
    382          #elif _CODE_PAGE == 1254
    383          #define _TBLDEF 1
    384          static
    385          const WCHAR Tbl[] = {	/*  CP1254(0x80-0xFF) to Unicode conversion table */
    386          	0x20AC, 0x0000, 0x210A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    387          	0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0x0000, 0x0000, 0x0000,
    388          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    389          	0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0x0000, 0x0000, 0x0178,
    390          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    391          	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    392          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    393          	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    394          	0x00C0, 0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
    395          	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0x00CF,
    396          	0x011E, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x00D7,
    397          	0x00D8, 0x00D9, 0x00DA, 0x00BD, 0x00DC, 0x0130, 0x015E, 0x00DF,
    398          	0x00E0, 0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    399          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF,
    400          	0x011F, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x00F7,
    401          	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x0131, 0x015F, 0x00FF
    402          };
    403          
    404          #elif _CODE_PAGE == 1255
    405          #define _TBLDEF 1
    406          static
    407          const WCHAR Tbl[] = {	/*  CP1255(0x80-0xFF) to Unicode conversion table */
    408          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    409          	0x02C6, 0x2030, 0x0000, 0x2039, 0x0000, 0x0000, 0x0000, 0x0000,
    410          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    411          	0x02DC, 0x2122, 0x0000, 0x203A, 0x0000, 0x0000, 0x0000, 0x0000,
    412          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    413          	0x00A8, 0x00A9, 0x00D7, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    414          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    415          	0x00B8, 0x00B9, 0x00F7, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    416          	0x05B0, 0x05B1, 0x05B2, 0x05B3, 0x05B4, 0x05B5, 0x05B6, 0x05B7,
    417          	0x05B8, 0x05B9, 0x0000, 0x05BB, 0x05BC, 0x05BD, 0x05BE, 0x05BF,
    418          	0x05C0, 0x05C1, 0x05C2, 0x05C3, 0x05F0, 0x05F1, 0x05F2, 0x05F3,
    419          	0x05F4, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    420          	0x05D0, 0x05D1, 0x05D2, 0x05D3, 0x05D4, 0x05D5, 0x05D6, 0x05D7,
    421          	0x05D8, 0x05D9, 0x05DA, 0x05DB, 0x05DC, 0x05DD, 0x05DE, 0x05DF,
    422          	0x05E0, 0x05E1, 0x05E2, 0x05E3, 0x05E4, 0x05E5, 0x05E6, 0x05E7,
    423          	0x05E8, 0x05E9, 0x05EA, 0x0000, 0x0000, 0x200E, 0x200F, 0x0000
    424          };
    425          
    426          #elif _CODE_PAGE == 1256
    427          #define _TBLDEF 1
    428          static
    429          const WCHAR Tbl[] = {	/*  CP1256(0x80-0xFF) to Unicode conversion table */
    430          	0x20AC, 0x067E, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    431          	0x02C6, 0x2030, 0x0679, 0x2039, 0x0152, 0x0686, 0x0698, 0x0688,
    432          	0x06AF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    433          	0x06A9, 0x2122, 0x0691, 0x203A, 0x0153, 0x200C, 0x200D, 0x06BA,
    434          	0x00A0, 0x060C, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    435          	0x00A8, 0x00A9, 0x06BE, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    436          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    437          	0x00B8, 0x00B9, 0x061B, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x061F,
    438          	0x06C1, 0x0621, 0x0622, 0x0623, 0x0624, 0x0625, 0x0626, 0x0627,
    439          	0x0628, 0x0629, 0x062A, 0x062B, 0x062C, 0x062D, 0x062E, 0x062F,
    440          	0x0630, 0x0631, 0x0632, 0x0633, 0x0634, 0x0635, 0x0636, 0x00D7,
    441          	0x0637, 0x0638, 0x0639, 0x063A, 0x0640, 0x0640, 0x0642, 0x0643,
    442          	0x00E0, 0x0644, 0x00E2, 0x0645, 0x0646, 0x0647, 0x0648, 0x00E7,
    443          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0649, 0x064A, 0x00EE, 0x00EF,
    444          	0x064B, 0x064C, 0x064D, 0x064E, 0x00F4, 0x064F, 0x0650, 0x00F7,
    445          	0x0651, 0x00F9, 0x0652, 0x00FB, 0x00FC, 0x200E, 0x200F, 0x06D2
    446          }
    447          
    448          #elif _CODE_PAGE == 1257
    449          #define _TBLDEF 1
    450          static
    451          const WCHAR Tbl[] = {	/*  CP1257(0x80-0xFF) to Unicode conversion table */
    452          	0x20AC, 0x0000, 0x201A, 0x0000, 0x201E, 0x2026, 0x2020, 0x2021,
    453          	0x0000, 0x2030, 0x0000, 0x2039, 0x0000, 0x00A8, 0x02C7, 0x00B8,
    454          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    455          	0x0000, 0x2122, 0x0000, 0x203A, 0x0000, 0x00AF, 0x02DB, 0x0000,
    456          	0x00A0, 0x0000, 0x00A2, 0x00A3, 0x00A4, 0x0000, 0x00A6, 0x00A7,
    457          	0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    458          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    459          	0x00B8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
    460          	0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112,
    461          	0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
    462          	0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7,
    463          	0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
    464          	0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113,
    465          	0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
    466          	0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7,
    467          	0x0173, 0x014E, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
    468          };
    469          
    470          #elif _CODE_PAGE == 1258
    471          #define _TBLDEF 1
    472          static
    473          const WCHAR Tbl[] = {	/*  CP1258(0x80-0xFF) to Unicode conversion table */
    474          	0x20AC, 0x0000, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021,
    475          	0x02C6, 0x2030, 0x0000, 0x2039, 0x0152, 0x0000, 0x0000, 0x0000,
    476          	0x0000, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    477          	0x02DC, 0x2122, 0x0000, 0x203A, 0x0153, 0x0000, 0x0000, 0x0178,
    478          	0x00A0, 0x00A1, 0x00A2, 0x00A3, 0x00A4, 0x00A5, 0x00A6, 0x00A7,
    479          	0x00A8, 0x00A9, 0x00AA, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00AF,
    480          	0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7,
    481          	0x00B8, 0x00B9, 0x00BA, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00BF,
    482          	0x00C0, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x00C5, 0x00C6, 0x00C7,
    483          	0x00C8, 0x00C9, 0x00CA, 0x00CB, 0x0300, 0x00CD, 0x00CE, 0x00CF,
    484          	0x0110, 0x00D1, 0x0309, 0x00D3, 0x00D4, 0x01A0, 0x00D6, 0x00D7,
    485          	0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x01AF, 0x0303, 0x00DF,
    486          	0x00E0, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x00E5, 0x00E6, 0x00E7,
    487          	0x00E8, 0x00E9, 0x00EA, 0x00EB, 0x0301, 0x00ED, 0x00EE, 0x00EF,
    488          	0x0111, 0x00F1, 0x0323, 0x00F3, 0x00F4, 0x01A1, 0x00F6, 0x00F7,
    489          	0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x01B0, 0x20AB, 0x00FF
    490          };
    491          
    492          #endif
    493          
    494          
    495          #if !_TBLDEF || !_USE_LFN
    496          #error This file is not needed in current configuration. Remove from the project.
    497          #endif
    498          
    499          

   \                                 In  segment CODE, align 2
    500          WCHAR ff_convert (	/* Converted character, Returns zero on error */
   \                     ff_convert:
    501          	WCHAR	src,	/* Character code to be converted */
    502          	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
    503          )
    504          {
   \   000000   0A14         PUSHM.A #0x1, R10
   \   000002   0E4C         MOV.W   R12, R14
    505          	WCHAR c;
    506          
    507          
    508          	if (src < 0x80) {	/* ASCII */
   \   000004   3E908000     CMP.W   #0x80, R14
   \   000008   022C         JC      ??ff_convert_3
    509          		c = src;
   \   00000A   0C4E         MOV.W   R14, R12
   \   00000C   1F3C         JMP     ??ff_convert_4
    510          
    511          	} else {
    512          		if (dir) {		/* OEMCP to Unicode */
   \                     ??ff_convert_3:
   \   00000E   0D93         CMP.W   #0x0, R13
   \   000010   0D24         JEQ     ??ff_convert_5
    513          			c = (src >= 0x100) ? 0 : Tbl[src - 0x80];
   \   000012   3E900001     CMP.W   #0x100, R14
   \   000016   0228         JNC     ??ff_convert_6
   \   000018   0C43         MOV.W   #0x0, R12
   \   00001A   183C         JMP     ??ff_convert_4
   \                     ??ff_convert_6:
   \   00001C   0F4E         MOV.W   R14, R15
   \   00001E   3F5080FF     ADD.W   #0xff80, R15
   \   000022   EF0F         ADDA    R15, R15
   \   000024   ....1C4F.... MOVX.W  Tbl(R15), R12
   \   00002A   103C         JMP     ??ff_convert_4
    514          
    515          		} else {		/* Unicode to OEMCP */
    516          			for (c = 0; c < 0x80; c++) {
   \                     ??ff_convert_5:
   \   00002C   0C43         MOV.W   #0x0, R12
   \                     ??ff_convert_0:
   \   00002E   3C908000     CMP.W   #0x80, R12
   \   000032   082C         JC      ??ff_convert_2
    517          				if (src == Tbl[c]) break;
   \   000034   0F4C         MOV.W   R12, R15
   \   000036   EF0F         ADDA    R15, R15
   \   000038   ....1E9F.... CMPX.W  Tbl(R15), R14
   \   00003E   0224         JEQ     ??ff_convert_2
    518          			}
   \   000040   1C53         ADD.W   #0x1, R12
   \   000042   F53F         JMP     ??ff_convert_0
    519          			c = (c + 0x80) & 0xFF;
   \                     ??ff_convert_2:
   \   000044   3C508000     ADD.W   #0x80, R12
   \   000048   3CF0FF00     AND.W   #0xff, R12
    520          		}
    521          	}
    522          
    523          	return c;
   \                     ??ff_convert_4:
   \   00004C   0A16         POPM.A  #0x1, R10
   \   00004E   1001         RETA
    524          }
    525          
    526          

   \                                 In  segment CODE, align 2
    527          WCHAR ff_wtoupper (	/* Upper converted character */
   \                     ff_wtoupper:
    528          	WCHAR chr		/* Input character */
    529          )
    530          {
    531          	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
    532          	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
    533          	int i;
    534          
    535          
    536          	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
   \   000000   0F43         MOV.W   #0x0, R15
   \                     ??ff_wtoupper_0:
   \   000002   0E4F         MOV.W   R15, R14
   \   000004   EE0E         ADDA    R14, R14
   \   000006   ....8E93.... CMPX.W  #0x0, ??tbl_lower(R14)
   \   00000C   0824         JEQ     ??ff_wtoupper_2
   \   00000E   0E4F         MOV.W   R15, R14
   \   000010   EE0E         ADDA    R14, R14
   \   000012   ....1C9E.... CMPX.W  ??tbl_lower(R14), R12
   \   000018   0224         JEQ     ??ff_wtoupper_2
   \   00001A   1F53         ADD.W   #0x1, R15
   \   00001C   F23F         JMP     ??ff_wtoupper_0
    537          
    538          	return tbl_lower[i] ? tbl_upper[i] : chr;
   \                     ??ff_wtoupper_2:
   \   00001E   0E4F         MOV.W   R15, R14
   \   000020   EE0E         ADDA    R14, R14
   \   000022   ....8E93.... CMPX.W  #0x0, ??tbl_lower(R14)
   \   000028   0424         JEQ     ??ff_wtoupper_1
   \   00002A   EF0F         ADDA    R15, R15
   \   00002C   ....1C4F.... MOVX.W  ??tbl_upper(R15), R12
   \                     ??ff_wtoupper_1:
   \   000032   1001         RETA
    539          }

   \                                 In  segment DATA20_C, align 2, align-sorted
   \                     ??tbl_lower:
   \   000000   610062006300 DC16 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110
   \            640065006600
   \            670068006900
   \            6A006B006C00
   \            6D006E00    
   \   00001C   6F0070007100 DC16 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 161
   \            720073007400
   \            750076007700
   \            780079007A00
   \            A100        
   \   000036   A200A300A500 DC16 162, 163, 165, 172, 175, 224, 225, 226, 227, 228, 229, 230, 231
   \            AC00AF00E000
   \            E100E200E300
   \            E400E500E600
   \            E700        
   \   000050   E800E900EA00 DC16 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244
   \            EB00EC00ED00
   \            EE00EF00F000
   \            F100F200F300
   \            F400        
   \   00006A   F500F600F800 DC16 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 259, 261
   \            F900FA00FB00
   \            FC00FD00FE00
   \            FF0001010301
   \            0501        
   \   000084   070109010B01 DC16 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287
   \            0D010F011101
   \            130115011701
   \            19011B011D01
   \            1F01        
   \   00009E   210123012501 DC16 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 314
   \            270129012B01
   \            2D012F013101
   \            330135013701
   \            3A01        
   \   0000B8   3C013E014001 DC16 316, 318, 320, 322, 324, 326, 328, 331, 333, 335, 337, 339, 341
   \            420144014601
   \            48014B014D01
   \            4F0151015301
   \            5501        
   \   0000D2   570159015B01 DC16 343, 345, 347, 349, 351, 353, 355, 357, 359, 361, 363, 365, 367
   \            5D015F016101
   \            630165016701
   \            69016B016D01
   \            6F01        
   \   0000EC   710173017501 DC16 369, 371, 373, 375, 378, 380, 382, 402, 945, 946, 947, 948, 949
   \            77017A017C01
   \            7E019201B103
   \            B203B303B403
   \            B503        
   \   000106   B603B703B803 DC16 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963
   \            B903BA03BB03
   \            BC03BD03BE03
   \            BF03C003C103
   \            C303        
   \   000120   C403C503C603 DC16 964, 965, 966, 967, 968, 969, 970, 1072, 1073, 1074, 1075, 1076
   \            C703C803C903
   \            CA0330043104
   \            320433043404
   \   000138   350436043704 DC16 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087
   \            380439043A04
   \            3B043C043D04
   \            3E043F04    
   \   00014E   400441044204 DC16 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098
   \            430444044504
   \            460447044804
   \            49044A04    
   \   000164   4B044C044D04 DC16 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110
   \            4E044F045104
   \            520453045404
   \            55045604    
   \   00017A   570458045904 DC16 1111, 1112, 1113, 1114, 1115, 1116, 1118, 1119, 8560, 8561, 8562
   \            5A045B045C04
   \            5E045F047021
   \            71217221    
   \   000190   732174217521 DC16 8563, 8564, 8565, 8566, 8567, 8568, 8569, 8570, 8571, 8572, 8573
   \            762177217821
   \            79217A217B21
   \            7C217D21    
   \   0001A6   7E217F2141FF DC16 8574, 8575, 65345, 65346, 65347, 65348, 65349, 65350, 65351, 65352
   \            42FF43FF44FF
   \            45FF46FF47FF
   \            48FF        
   \   0001BA   49FF4AFF4BFF DC16 65353, 65354, 65355, 65356, 65357, 65358, 65359, 65360, 65361
   \            4CFF4DFF4EFF
   \            4FFF50FF51FF
   \   0001CC   52FF53FF54FF DC16 65362, 65363, 65364, 65365, 65366, 65367, 65368, 65369, 65370, 0
   \            55FF56FF57FF
   \            58FF59FF5AFF
   \            0000        

   \                                 In  segment DATA20_C, align 2, align-sorted
   \                     ??tbl_upper:
   \   000000   410042004300 DC16 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81
   \            440045004600
   \            470048004900
   \            4A004B004C00
   \            4D004E004F00
   \            50005100    
   \   000022   520053005400 DC16 82, 83, 84, 85, 86, 87, 88, 89, 90, 33, 65504, 65505, 65509, 65506
   \            550056005700
   \            580059005A00
   \            2100E0FFE1FF
   \            E5FFE2FF    
   \   00003E   E3FFC000C100 DC16 65507, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203
   \            C200C300C400
   \            C500C600C700
   \            C800C900CA00
   \            CB00        
   \   000058   CC00CD00CE00 DC16 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217
   \            CF00D000D100
   \            D200D300D400
   \            D500D600D800
   \            D900        
   \   000072   DA00DB00DC00 DC16 218, 219, 220, 221, 222, 376, 256, 258, 260, 262, 264, 266, 268
   \            DD00DE007801
   \            000102010401
   \            060108010A01
   \            0C01        
   \   00008C   0E0110011201 DC16 270, 272, 274, 276, 278, 280, 282, 284, 286, 288, 290, 292, 294
   \            140116011801
   \            1A011C011E01
   \            200122012401
   \            2601        
   \   0000A6   28012A012C01 DC16 296, 298, 300, 302, 304, 306, 308, 310, 313, 315, 317, 319, 321
   \            2E0130013201
   \            340136013901
   \            3B013D013F01
   \            4101        
   \   0000C0   430145014701 DC16 323, 325, 327, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348
   \            4A014C014E01
   \            500152015401
   \            560158015A01
   \            5C01        
   \   0000DA   5E0160016201 DC16 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374
   \            640166016801
   \            6A016C016E01
   \            700172017401
   \            7601        
   \   0000F4   79017B017D01 DC16 377, 379, 381, 401, 913, 914, 915, 916, 917, 918, 919, 920, 921
   \            910191039203
   \            930394039503
   \            960397039803
   \            9903        
   \   00010E   9A039B039C03 DC16 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935
   \            9D039E039F03
   \            A003A103A303
   \            A403A503A603
   \            A703        
   \   000128   A803A903AA03 DC16 936, 937, 938, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047
   \            100411041204
   \            130414041504
   \            16041704    
   \   00013E   180419041A04 DC16 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058
   \            1B041C041D04
   \            1E041F042004
   \            21042204    
   \   000154   230424042504 DC16 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069
   \            260427042804
   \            29042A042B04
   \            2C042D04    
   \   00016A   2E042F040104 DC16 1070, 1071, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033
   \            020403040404
   \            050406040704
   \            08040904    
   \   000180   0A040B040C04 DC16 1034, 1035, 1036, 1038, 1039, 8544, 8545, 8546, 8547, 8548, 8549
   \            0E040F046021
   \            612162216321
   \            64216521    
   \   000196   662167216821 DC16 8550, 8551, 8552, 8553, 8554, 8555, 8556, 8557, 8558, 8559, 65313
   \            69216A216B21
   \            6C216D216E21
   \            6F2121FF    
   \   0001AC   22FF23FF24FF DC16 65314, 65315, 65316, 65317, 65318, 65319, 65320, 65321, 65322
   \            25FF26FF27FF
   \            28FF29FF2AFF
   \   0001BE   2BFF2CFF2DFF DC16 65323, 65324, 65325, 65326, 65327, 65328, 65329, 65330, 65331
   \            2EFF2FFF30FF
   \            31FF32FF33FF
   \   0001D0   34FF35FF36FF DC16 65332, 65333, 65334, 65335, 65336, 65337, 65338, 0
   \            37FF38FF39FF
   \            3AFF0000    

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
       8  ff_convert
       4  ff_wtoupper


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
     256  Tbl
      80  ff_convert
      52  ff_wtoupper
     480  tbl_lower
     480  tbl_upper

 
   132 bytes in segment CODE
 1 216 bytes in segment DATA20_C
 
   132 bytes of CODE  memory
 1 216 bytes of CONST memory

Errors: none
Warnings: none
