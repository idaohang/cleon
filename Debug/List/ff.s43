///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V5.52.1.50724/W32 for MSP430      26/May/2013  01:02:22 /
// Copyright 1996-2013 IAR Systems AB.                                        /
//                                                                            /
//    __rt_version  =  3                                                      /
//    __double_size =  64                                                     /
//    __reg_r4      =  free                                                   /
//    __reg_r5      =  free                                                   /
//    __pic         =  no                                                     /
//    __core        =  430X                                                   /
//    __data_model  =  large                                                  /
//    Source file   =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  /
//                     2013\2_cleon\4. Development\1.                         /
//                     Software\cleon\fs\FatFs\ff.c                           /
//    Command line  =  "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\fs\FatFs\ff.c" -lC                      /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\Debug\List\" -la                        /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\Debug\List\" -o                         /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\Debug\Obj\" --no_cse --no_unroll        /
//                     --no_inline --no_code_motion --no_tbaa --debug         /
//                     -D__MSP430F5338__ -e --double=64 --dlib_config         /
//                     "C:\Program Files (x86)\IAR Systems\Embedded           /
//                     Workbench 6.5\430\LIB\DLIB\dl430xldn.h" -I             /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\intro\" -I "C:\Users\woosuk\Dropbox\lws /
//                     \ESL\3. Research\9. Summer 2013\2_cleon\4.             /
//                     Development\1. Software\cleon\sys\" -I                 /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\hal\" -I "C:\Users\woosuk\Dropbox\lws\E /
//                     SL\3. Research\9. Summer 2013\2_cleon\4.               /
//                     Development\1. Software\cleon\hal\rtclib\" -I          /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\platform\" -I                           /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\fs\" -I "C:\Users\woosuk\Dropbox\lws\ES /
//                     L\3. Research\9. Summer 2013\2_cleon\4.                /
//                     Development\1. Software\cleon\fs\FatFs\" -I            /
//                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.        /
//                     Summer 2013\2_cleon\4. Development\1.                  /
//                     Software\cleon\app\" -I "C:\Users\woosuk\Dropbox\lws\E /
//                     SL\3. Research\9. Summer 2013\2_cleon\4.               /
//                     Development\1. Software\cleon\" --core=430X            /
//                     --data_model=large -On --multiplier=32                 /
//                     --multiplier_location=4C0 --hw_workaround=CPU40        /
//    List file     =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  /
//                     2013\2_cleon\4. Development\1.                         /
//                     Software\cleon\Debug\List\ff.s43                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ff

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__core", "430X"
        RTMODEL "__data_model", "large"
        RTMODEL "__dlib_file_descriptor", "0"
        RTMODEL "__dlib_full_locale_support", "0"
        RTMODEL "__double_size", "64"
        RTMODEL "__iar_require _Printf", ""
        RTMODEL "__pic", "no"
        RTMODEL "__reg_r4", "free"
        RTMODEL "__reg_r5", "free"
        RTMODEL "__rt_version", "3"

        RSEG CSTACK:DATA:SORT:NOROOT(0)

        EXTERN ?ShiftRight32u_9
        EXTERN ?ShiftLeft32_9
        EXTERN ?DivMod32u
        EXTERN ?Mul32
        EXTERN ?DivMod16u
        EXTERN ?ShiftRight32u_7
        EXTERN ?cstart_init_zero20
        EXTERN ?longjmp_r4
        EXTERN ?longjmp_r5
        EXTERN ?setjmp_r4
        EXTERN ?setjmp_r5

        PUBWEAK ?setjmp_save_r4
        PUBWEAK ?setjmp_save_r5
        FUNCTION check_fs,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 22, STACK
        FUNCTION chk_chr,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        FUNCTION chk_mounted,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 76, STACK
        FUNCTION clmt_clust,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        PUBLIC clust2sect
        FUNCTION clust2sect,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        FUNCTION cmp_lfn,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        FUNCTION create_chain,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 44, STACK
        FUNCTION create_name,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 46, STACK
        FUNCTION dir_find,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        FUNCTION dir_next,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        FUNCTION dir_read,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        FUNCTION dir_register,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 50, STACK
        FUNCTION dir_remove,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        FUNCTION dir_sdi,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC f_chdir
        FUNCTION f_chdir,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 260, STACK
        PUBLIC f_chdrive
        FUNCTION f_chdrive,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        PUBLIC f_chmod
        FUNCTION f_chmod,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 272, STACK
        PUBLIC f_close
        FUNCTION f_close,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        PUBLIC f_getcwd
        FUNCTION f_getcwd,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 316, STACK
        PUBLIC f_getfree
        FUNCTION f_getfree,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 62, STACK
        PUBLIC f_lseek
        FUNCTION f_lseek,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 64, STACK
        PUBLIC f_mkdir
        FUNCTION f_mkdir,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 294, STACK
        PUBLIC f_mount
        FUNCTION f_mount,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        PUBLIC f_open
        FUNCTION f_open,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 288, STACK
        PUBLIC f_opendir
        FUNCTION f_opendir,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 238, STACK
        PUBLIC f_read
        FUNCTION f_read,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 64, STACK
        PUBLIC f_readdir
        FUNCTION f_readdir,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 234, STACK
        PUBLIC f_rename
        FUNCTION f_rename,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 336, STACK
        PUBLIC f_stat
        FUNCTION f_stat,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 264, STACK
        PUBLIC f_sync
        FUNCTION f_sync,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        PUBLIC f_truncate
        FUNCTION f_truncate,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        PUBLIC f_unlink
        FUNCTION f_unlink,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 306, STACK
        PUBLIC f_utime
        FUNCTION f_utime,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 272, STACK
        PUBLIC f_write
        FUNCTION f_write,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 56, STACK
        FUNCTION fit_lfn,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        FUNCTION follow_path,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 24, STACK
        PUBLIC gen_numname
        FUNCTION gen_numname,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 44, STACK
        PUBLIC get_fat
        FUNCTION get_fat,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        FUNCTION get_fileinfo,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 42, STACK
        FUNCTION ld_clust,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        FUNCTION mem_cmp,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 20, STACK
        FUNCTION mem_cpy,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        FUNCTION mem_set,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 8, STACK
        FUNCTION move_window,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 30, STACK
        FUNCTION pick_lfn,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 28, STACK
        PUBLIC put_fat
        FUNCTION put_fat,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 36, STACK
        FUNCTION remove_chain,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 32, STACK
        PUBLIC scan_files
        FUNCTION scan_files,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 90, STACK
        FUNCTION st_clust,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        FUNCTION sum_sfn,0203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 4, STACK
        FUNCTION sync,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 14, STACK
        FUNCTION validate,021203H
        ARGFRAME CSTACK, 0, STACK
        LOCFRAME CSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA SP DATA
          CFI Resource PC:20, SP:20, SR:16, R4L:16, R4H:4, R4:20, R5L:16, R5H:4
          CFI Resource R5:20, R6L:16, R6H:4, R6:20, R7L:16, R7H:4, R7:20, R8L:16
          CFI Resource R8H:4, R8:20, R9L:16, R9H:4, R9:20, R10L:16, R10H:4
          CFI Resource R10:20, R11L:16, R11H:4, R11:20, R12L:16, R12H:4, R12:20
          CFI Resource R13L:16, R13H:4, R13:20, R14L:16, R14H:4, R14:20, R15L:16
          CFI Resource R15H:4, R15:20
          CFI ResourceParts R4 R4H, R4L
          CFI ResourceParts R5 R5H, R5L
          CFI ResourceParts R6 R6H, R6L
          CFI ResourceParts R7 R7H, R7L
          CFI ResourceParts R8 R8H, R8L
          CFI ResourceParts R9 R9H, R9L
          CFI ResourceParts R10 R10H, R10L
          CFI ResourceParts R11 R11H, R11L
          CFI ResourceParts R12 R12H, R12L
          CFI ResourceParts R13 R13H, R13L
          CFI ResourceParts R14 R14H, R14L
          CFI ResourceParts R15 R15H, R15L
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 2
          CFI ReturnAddress PC CODE
          CFI CFA SP+4
          CFI PC Frame(CFA, -4)
          CFI SR Undefined
          CFI R4L SameValue
          CFI R4H SameValue
          CFI R4 Concat
          CFI R5L SameValue
          CFI R5H SameValue
          CFI R5 Concat
          CFI R6L SameValue
          CFI R6H SameValue
          CFI R6 Concat
          CFI R7L SameValue
          CFI R7H SameValue
          CFI R7 Concat
          CFI R8L SameValue
          CFI R8H SameValue
          CFI R8 Concat
          CFI R9L SameValue
          CFI R9H SameValue
          CFI R9 Concat
          CFI R10L SameValue
          CFI R10H SameValue
          CFI R10 Concat
          CFI R11L SameValue
          CFI R11H SameValue
          CFI R11 Concat
          CFI R12L Undefined
          CFI R12H Undefined
          CFI R12 Undefined
          CFI R13L Undefined
          CFI R13H Undefined
          CFI R13 Undefined
          CFI R14L Undefined
          CFI R14H Undefined
          CFI R14 Undefined
          CFI R15L Undefined
          CFI R15H Undefined
          CFI R15 Undefined
          CFI EndCommon cfiCommon0
        
        EXTERN get_fattime
        FUNCTION get_fattime,0202H
        EXTERN disk_write
        FUNCTION disk_write,0202H
        EXTERN disk_read
        FUNCTION disk_read,0202H
        EXTERN strlen
        FUNCTION strlen,010202H
        EXTERN sprintf
        FUNCTION sprintf,010202H
        EXTERN printf
        FUNCTION printf,010202H
        EXTERN disk_status
        FUNCTION disk_status,0202H
        EXTERN disk_initialize
        FUNCTION disk_initialize,0202H
        EXTERN ff_convert
        FUNCTION ff_convert,0202H
        EXTERN ff_wtoupper
        FUNCTION ff_wtoupper,0202H
        EXTERN disk_ioctl
        FUNCTION disk_ioctl,0202H


        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
FatFs:
        DS8 4

        RSEG DATA20_Z:DATA:SORT:NOROOT(1)
        REQUIRE ?cstart_init_zero20
Fsid:
        DS8 2

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
CurrVol:
        DS8 1

        RSEG CODE:CODE:REORDER:NOROOT(1)
mem_cpy:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function mem_cpy
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
        MOVA    R13, R11
??mem_cpy_0:
        MOV.W   R14, R15
        MOV.W   R15, R14
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JEQ     ??mem_cpy_1
        MOV.B   @R11, 0(R10)
        ADDA    #0x1, R11
        ADDA    #0x1, R10
        JMP     ??mem_cpy_0
??mem_cpy_1:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock0

        RSEG CODE:CODE:REORDER:NOROOT(1)
mem_set:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function mem_set
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOVA    R12, R10
??mem_set_0:
        MOV.W   R14, R15
        MOV.W   R15, R14
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JEQ     ??mem_set_1
        MOV.B   R13, 0(R10)
        ADDA    #0x1, R10
        JMP     ??mem_set_0
??mem_set_1:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock1

        RSEG CODE:CODE:REORDER:NOROOT(1)
mem_cmp:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function mem_cmp
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R10
        MOVA    R10, R11
        MOVA    R13, R8
        MOV.W   #0x0, R12
??mem_cmp_0:
        MOV.W   R14, R15
        MOV.W   R15, R14
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R15
        JEQ     ??mem_cmp_1
        MOV.B   @R11, R12
        MOV.B   R12, R12
        MOV.B   @R8, R15
        MOV.B   R15, R15
        SUB.W   R15, R12
        ADDA    #0x1, R8
        ADDA    #0x1, R11
        CMP.W   #0x0, R12
        JEQ     ??mem_cmp_0
??mem_cmp_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock2

        RSEG CODE:CODE:REORDER:NOROOT(1)
chk_chr:
??chk_chr_0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function chk_chr
        CMP.B   #0x0, 0(R12)
        JEQ     ??chk_chr_1
        MOV.B   @R12, R15
        MOV.B   R15, R15
        CMP.W   R13, R15
        JEQ     ??chk_chr_1
        ADDA    #0x1, R12
        JMP     ??chk_chr_0
??chk_chr_1:
        MOV.B   @R12, R12
        MOV.B   R12, R12
        RETA
          CFI EndBlock cfiBlock3

        RSEG CODE:CODE:REORDER:NOROOT(1)
move_window:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function move_window
        FUNCALL move_window, disk_write
        LOCFRAME CSTACK, 30, STACK
        FUNCALL move_window, disk_write
        LOCFRAME CSTACK, 30, STACK
        FUNCALL move_window, disk_read
        LOCFRAME CSTACK, 30, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R6
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   0x2e(R6), R10
        MOV.W   0x30(R6), R11
        CMP.W   R8, R10
        JNE     ??move_window_1
        CMP.W   R9, R11
        JEQ     ??move_window_2
??move_window_1:
        CMP.B   #0x0, 0x4(R6)
        JEQ     ??move_window_3
        PUSH.B  #0x1
          CFI CFA SP+30
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R6, R13
        ADDA    #0x32, R13
        MOV.B   0x1(R6), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.B   #0x0, R12
        JEQ     ??move_window_4
        MOV.B   #0x1, R12
        JMP     ??move_window_5
??move_window_4:
        MOV.B   #0x0, 0x4(R6)
        MOV.W   0x22(R6), R14
        MOV.W   0x24(R6), R15
        ADD.W   0x1e(R6), R14
        ADDC.W  0x20(R6), R15
        CMP.W   R15, R11
        JNC     ??move_window_6
        JNE     ??move_window_3
        CMP.W   R14, R10
        JC      ??move_window_3
??move_window_6:
        MOV.B   0x3(R6), R7
??move_window_0:
        CMP.B   #0x2, R7
        JNC     ??move_window_3
        ADD.W   0x1e(R6), R10
        ADDC.W  0x20(R6), R11
        PUSH.B  #0x1
          CFI CFA SP+30
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R6, R13
        ADDA    #0x32, R13
        MOV.B   0x1(R6), R12
        CALLA   #disk_write
        ADD.B   #0xff, R7
        ADD.W   #0x2, SP
          CFI CFA SP+28
        JMP     ??move_window_0
??move_window_3:
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JEQ     ??move_window_2
        PUSH.B  #0x1
          CFI CFA SP+30
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    R6, R13
        ADDA    #0x32, R13
        MOV.B   0x1(R6), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.B   #0x0, R12
        JEQ     ??move_window_7
        MOV.B   #0x1, R12
        JMP     ??move_window_5
??move_window_7:
        MOV.W   R8, 0x2e(R6)
        MOV.W   R9, 0x30(R6)
??move_window_2:
        MOV.B   #0x0, R12
??move_window_5:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock4

        RSEG CODE:CODE:REORDER:NOROOT(1)
sync:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function sync
        FUNCALL sync, move_window
        LOCFRAME CSTACK, 12, STACK
        FUNCALL sync, mem_set
        LOCFRAME CSTACK, 12, STACK
        FUNCALL sync, disk_write
        LOCFRAME CSTACK, 14, STACK
        FUNCALL sync, disk_ioctl
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    R10, R12
        CALLA   #move_window
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??sync_0
        CMP.B   #0x3, 0(R10)
        JNE     ??sync_1
        CMP.B   #0x0, 0x5(R10)
        JEQ     ??sync_1
        MOV.W   #0x0, 0x2e(R10)
        MOV.W   #0x0, 0x30(R10)
        MOV.W   #0x200, R14
        MOV.W   #0x0, R13
        MOVA    R10, R12
        ADDA    #0x32, R12
        CALLA   #mem_set
        MOV.B   #0x55, 0x230(R10)
        MOV.B   #0xaa, 0x231(R10)
        MOV.B   #0x52, 0x32(R10)
        MOV.B   #0x52, 0x33(R10)
        MOV.B   #0x61, 0x34(R10)
        MOV.B   #0x41, 0x35(R10)
        MOV.B   #0x72, 0x216(R10)
        MOV.B   #0x72, 0x217(R10)
        MOV.B   #0x41, 0x218(R10)
        MOV.B   #0x61, 0x219(R10)
        MOV.B   0xe(R10), 0x21a(R10)
        MOV.B   0xf(R10), 0x21b(R10)
        MOV.W   0x10(R10), R14
        MOV.B   R14, 0x21c(R10)
        MOV.W   0xe(R10), R14
        MOV.W   0x10(R10), R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x21d(R10)
        MOV.B   0xa(R10), 0x21e(R10)
        MOV.B   0xb(R10), 0x21f(R10)
        MOV.W   0xc(R10), R14
        MOV.B   R14, 0x220(R10)
        MOV.W   0xa(R10), R14
        MOV.W   0xc(R10), R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x221(R10)
        PUSH.B  #0x1
          CFI CFA SP+14
        MOV.W   0x12(R10), R14
        MOV.W   0x14(R10), R15
        MOVA    R10, R13
        ADDA    #0x32, R13
        MOV.B   0x1(R10), R12
        CALLA   #disk_write
        MOV.B   #0x0, 0x5(R10)
        ADD.W   #0x2, SP
          CFI CFA SP+12
??sync_1:
        MOVA    #0x0, R14
        MOV.B   #0x0, R13
        MOV.B   0x1(R10), R12
        CALLA   #disk_ioctl
        CMP.B   #0x0, R12
        JEQ     ??sync_0
        MOV.B   #0x1, R11
??sync_0:
        MOV.B   R11, R12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock5

        RSEG CODE:CODE:REORDER:NOROOT(1)
clust2sect:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function clust2sect
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOVA    R12, R10
        ADD.W   #0xfffe, R14
        ADDC.W  #0xffff, R15
        MOV.W   0x1a(R10), R12
        MOV.W   0x1c(R10), R13
        ADD.W   #0xfffe, R12
        ADDC.W  #0xffff, R13
        CMP.W   R13, R15
        JNC     ??clust2sect_0
        JNE     ??clust2sect_1
        CMP.W   R12, R14
        JNC     ??clust2sect_0
??clust2sect_1:
        MOV.W   #0x0, R12
        MOV.W   #0x0, R13
        JMP     ??clust2sect_2
??clust2sect_0:
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x2(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        ADD.W   0x2a(R10), R12
        ADDC.W  0x2c(R10), R13
??clust2sect_2:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock6

        RSEG CODE:CODE:REORDER:NOROOT(1)
get_fat:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function get_fat
        FUNCALL get_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL get_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL get_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL get_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R10
        MOV.W   R14, R8
        MOV.W   R15, R9
        CMP.W   #0x0, R9
        JNC     ??get_fat_0
        JNE     ??get_fat_6
        CMP.W   #0x2, R8
        JNC     ??get_fat_0
??get_fat_6:
        CMP.W   0x1c(R10), R9
        JNC     ??get_fat_7
        JNE     ??get_fat_0
        CMP.W   0x1a(R10), R8
        JNC     ??get_fat_7
??get_fat_0:
        MOV.W   #0x1, R12
        MOV.W   #0x0, R13
        JMP     ??get_fat_8
??get_fat_7:
        MOV.B   @R10, R14
        SUB.B   #0x1, R14
        JEQ     ??get_fat_9
        SUB.B   #0x1, R14
        JEQ     ??get_fat_10
        SUB.B   #0x1, R14
        JEQ     ??get_fat_11
        JMP     ??get_fat_2
??get_fat_9:
        MOV.W   R8, R11
        MOV.W   R11, R15
        RRUM.W  #0x1, R15
        ADD.W   R15, R11
        MOV.W   R11, R14
        SWPB    R14
        AND.W   #0xff, R14
        RRA.W   R14
        MOV.W   #0x0, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        CMP.B   #0x0, R12
        JNE     ??get_fat_2
        MOV.W   R11, R12
        MOV.W   #0x200, R14
        CALLA   #?DivMod16u
        MOVA    R10, R15
        ADDA    R14, R15
        MOV.B   0x32(R15), R15
        MOV.B   R15, R15
        MOV.W   R15, R7
        ADD.W   #0x1, R11
        MOV.W   R11, R14
        SWPB    R14
        AND.W   #0xff, R14
        RRA.W   R14
        MOV.W   #0x0, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        CMP.B   #0x0, R12
        JNE     ??get_fat_2
        MOV.W   R11, R12
        MOV.W   #0x200, R14
        CALLA   #?DivMod16u
        MOVA    R10, R15
        ADDA    R14, R15
        MOV.B   0x32(R15), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R15, R7
        BIT.W   #0x1, R8
        JNC     ??get_fat_12
        RRUM.W  #0x4, R7
        JMP     ??get_fat_13
??get_fat_12:
        AND.W   #0xfff, R7
??get_fat_13:
        MOV.W   R7, R12
        MOV.W   #0x0, R13
        JMP     ??get_fat_8
??get_fat_10:
        MOV.W   R8, R14
        MOV.W   R9, R15
        SWPB    R14
        SWPB    R15
        XOR.B   R15, R14
        XOR.W   R15, R14
        AND.W   #0xff, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        CMP.B   #0x0, R12
        JNE     ??get_fat_2
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   #0x2, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        PUSHM.W #0x2, R15
          CFI CFA SP+40
        POPM.A  #0x1, R15
          CFI CFA SP+36
        MOVA    R10, R14
        ADDA    R15, R14
        ADDA    #0x32, R14
        MOVA    R14, R6
        MOV.B   @R6, R15
        MOV.B   R15, R15
        MOV.B   0x1(R6), R12
        MOV.B   R12, R12
        AND.W   #0xff, R12
        SWPB    R12
        BIS.W   R15, R12
        MOV.W   #0x0, R13
        JMP     ??get_fat_8
??get_fat_11:
        MOV.W   R8, R12
        MOV.W   R9, R13
        CALLA   #?ShiftRight32u_7
        MOV.W   R12, R14
        MOV.W   R13, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        CMP.B   #0x0, R12
        JNE     ??get_fat_2
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   #0x4, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        PUSHM.W #0x2, R15
          CFI CFA SP+40
        POPM.A  #0x1, R15
          CFI CFA SP+36
        MOVA    R10, R14
        ADDA    R15, R14
        ADDA    #0x32, R14
        MOVA    R14, R6
        MOV.B   @R6, R5
        MOV.B   R5, R5
        MOV.B   0x1(R6), R4
        MOV.B   R4, R4
        AND.W   #0xff, R4
        SWPB    R4
        MOV.B   0x2(R6), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.B   0x3(R6), R12
        MOV.B   R12, R12
        MOV.W   #0x0, R13
        AND.W   #0xff, R12
        SWPB    R12
        MOV.W   R12, R13
        MOV.W   #0x0, R12
        BIS.W   R14, R12
        BIS.W   R15, R13
        BIS.W   R4, R12
        BIS.W   R5, R12
        AND.W   #0xffff, R12
        AND.W   #0xfff, R13
        JMP     ??get_fat_8
??get_fat_2:
        MOV.W   #0xffff, R12
        MOV.W   #0xffff, R13
??get_fat_8:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock7

        RSEG CODE:CODE:REORDER:NOROOT(1)
put_fat:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function put_fat
        FUNCALL put_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL put_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL put_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL put_fat, move_window
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R10
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   0x24(SP), R4
        MOV.W   0x26(SP), R5
        CMP.W   #0x0, R9
        JNC     ??put_fat_0
        JNE     ??put_fat_6
        CMP.W   #0x2, R8
        JNC     ??put_fat_0
??put_fat_6:
        CMP.W   0x1c(R10), R9
        JNC     ??put_fat_7
        JNE     ??put_fat_0
        CMP.W   0x1a(R10), R8
        JNC     ??put_fat_7
??put_fat_0:
        MOV.B   #0x2, R7
        JMP     ??put_fat_8
??put_fat_7:
        MOV.B   @R10, R14
        SUB.B   #0x1, R14
        JEQ     ??put_fat_9
        SUB.B   #0x1, R14
        JEQ     ??put_fat_10
        SUB.B   #0x1, R14
        JEQ     ??put_fat_11
        JMP     ??put_fat_12
??put_fat_9:
        MOV.W   R8, R6
        MOV.W   R6, R15
        RRUM.W  #0x1, R15
        ADD.W   R15, R6
        MOV.W   R6, R14
        SWPB    R14
        AND.W   #0xff, R14
        RRA.W   R14
        MOV.W   #0x0, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        MOV.B   R12, R7
        CMP.B   #0x0, R7
        JNE     ??put_fat_2
        MOV.W   R6, R12
        MOV.W   #0x200, R14
        CALLA   #?DivMod16u
        MOVA    R10, R15
        ADDA    R14, R15
        ADDA    #0x32, R15
        MOVA    R15, R11
        BIT.W   #0x1, R8
        JNC     ??put_fat_13
        PUSH.W  R14
          CFI CFA SP+38
        MOV.B   R4, 0(SP)
        POP.W   R14
          CFI CFA SP+36
        RPT     #0x4
        RLAX.B  R14
        MOV.B   #0xf, R15
        AND.B   @R11, R15
        BIS.B   R14, R15
        JMP     ??put_fat_14
??put_fat_13:
        PUSH.W  R15
          CFI CFA SP+38
        MOV.B   R4, 0(SP)
        POP.W   R15
          CFI CFA SP+36
??put_fat_14:
        MOV.B   R15, 0(R11)
        ADD.W   #0x1, R6
        MOV.B   #0x1, 0x4(R10)
        MOV.W   R6, R14
        SWPB    R14
        AND.W   #0xff, R14
        RRA.W   R14
        MOV.W   #0x0, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        MOV.B   R12, R7
        CMP.B   #0x0, R7
        JNE     ??put_fat_2
        MOV.W   R6, R12
        MOV.W   #0x200, R14
        CALLA   #?DivMod16u
        MOVA    R10, R15
        ADDA    R14, R15
        ADDA    #0x32, R15
        MOVA    R15, R11
        BIT.W   #0x1, R8
        JNC     ??put_fat_15
        MOV.W   R4, R15
        RRUM.W  #0x4, R15
        PUSH.W  R14
          CFI CFA SP+38
        MOV.B   R15, 0(SP)
        POP.W   R14
          CFI CFA SP+36
        JMP     ??put_fat_16
??put_fat_15:
        MOV.W   R4, R15
        SWPB    R15
        AND.W   #0xff, R15
        AND.B   #0xf, R15
        MOV.B   #0xf0, R14
        AND.B   @R11, R14
        BIS.B   R15, R14
??put_fat_16:
        MOV.B   R14, 0(R11)
        JMP     ??put_fat_2
??put_fat_10:
        MOV.W   R8, R14
        MOV.W   R9, R15
        SWPB    R14
        SWPB    R15
        XOR.B   R15, R14
        XOR.W   R15, R14
        AND.W   #0xff, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        MOV.B   R12, R7
        CMP.B   #0x0, R7
        JNE     ??put_fat_2
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   #0x2, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        PUSHM.W #0x2, R15
          CFI CFA SP+40
        POPM.A  #0x1, R15
          CFI CFA SP+36
        MOVA    R10, R14
        ADDA    R15, R14
        ADDA    #0x32, R14
        MOVA    R14, R11
        MOV.B   R4, 0(R11)
        MOV.W   R4, R15
        SWPB    R15
        AND.W   #0xff, R15
        MOV.B   R15, 0x1(R11)
        JMP     ??put_fat_2
??put_fat_11:
        MOV.W   R8, R12
        MOV.W   R9, R13
        CALLA   #?ShiftRight32u_7
        MOV.W   R12, R14
        MOV.W   R13, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOVA    R10, R12
        CALLA   #move_window
        MOV.B   R12, R7
        CMP.B   #0x0, R7
        JNE     ??put_fat_2
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.W   #0x4, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        PUSHM.W #0x2, R15
          CFI CFA SP+40
        POPM.A  #0x1, R15
          CFI CFA SP+36
        MOVA    R10, R14
        ADDA    R15, R14
        ADDA    #0x32, R14
        MOVA    R14, R11
        MOV.B   0x3(R11), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        AND.W   #0x0, R14
        AND.W   #0xf000, R15
        BIS.W   R14, R4
        BIS.W   R15, R5
        MOV.B   R4, 0(R11)
        MOV.W   R4, R15
        SWPB    R15
        AND.W   #0xff, R15
        MOV.B   R15, 0x1(R11)
        MOV.B   R5, 0x2(R11)
        MOV.W   R4, R14
        MOV.W   R5, R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x3(R11)
        JMP     ??put_fat_2
??put_fat_12:
        MOV.B   #0x2, R7
??put_fat_2:
        MOV.B   #0x1, 0x4(R10)
??put_fat_8:
        MOV.B   R7, R12
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock8

        RSEG CODE:CODE:REORDER:NOROOT(1)
remove_chain:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function remove_chain
        FUNCALL remove_chain, get_fat
        LOCFRAME CSTACK, 28, STACK
        FUNCALL remove_chain, put_fat
        LOCFRAME CSTACK, 32, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R8
        MOV.W   R14, R10
        MOV.W   R15, R11
        CMP.W   #0x0, R11
        JNC     ??remove_chain_1
        JNE     ??remove_chain_5
        CMP.W   #0x2, R10
        JNC     ??remove_chain_1
??remove_chain_5:
        CMP.W   0x1c(R8), R11
        JNC     ??remove_chain_6
        JNE     ??remove_chain_1
        CMP.W   0x1a(R8), R10
        JNC     ??remove_chain_6
??remove_chain_1:
        MOV.B   #0x2, R9
        JMP     ??remove_chain_3
??remove_chain_6:
        MOV.B   #0x0, R9
??remove_chain_0:
        CMP.W   0x1c(R8), R11
        JNC     ??remove_chain_7
        JNE     ??remove_chain_3
        CMP.W   0x1a(R8), R10
        JC      ??remove_chain_3
??remove_chain_7:
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R8, R12
        CALLA   #get_fat
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JEQ     ??remove_chain_3
        CMP.W   #0x1, R6
        JNE     ??remove_chain_8
        CMP.W   #0x0, R7
        JNE     ??remove_chain_8
        MOV.B   #0x2, R9
        JMP     ??remove_chain_3
??remove_chain_8:
        CMP.W   #0xffff, R6
        JNE     ??remove_chain_9
        CMP.W   #0xffff, R7
        JNE     ??remove_chain_9
        MOV.B   #0x1, R9
        JMP     ??remove_chain_3
??remove_chain_9:
        PUSH.W  #0x0
          CFI CFA SP+30
        PUSH.W  #0x0
          CFI CFA SP+32
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R8, R12
        CALLA   #put_fat
        MOV.B   R12, R9
        ADD.W   #0x4, SP
          CFI CFA SP+28
        CMP.B   #0x0, R9
        JNE     ??remove_chain_3
        CMP.W   #0xffff, 0xe(R8)
        JNE     ??remove_chain_10
        CMP.W   #0xffff, 0x10(R8)
        JEQ     ??remove_chain_11
??remove_chain_10:
        ADD.W   #0x1, 0xe(R8)
        ADDC.W  #0x0, 0x10(R8)
        MOV.B   #0x1, 0x5(R8)
??remove_chain_11:
        MOV.W   R6, R10
        MOV.W   R7, R11
        JMP     ??remove_chain_0
??remove_chain_3:
        MOV.B   R9, R12
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock9

        RSEG CODE:CODE:REORDER:NOROOT(1)
create_chain:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function create_chain
        FUNCALL create_chain, get_fat
        LOCFRAME CSTACK, 40, STACK
        FUNCALL create_chain, get_fat
        LOCFRAME CSTACK, 40, STACK
        FUNCALL create_chain, put_fat
        LOCFRAME CSTACK, 44, STACK
        FUNCALL create_chain, put_fat
        LOCFRAME CSTACK, 44, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSH.W  R15
          CFI CFA SP+38
        PUSH.W  R14
          CFI CFA SP+40
        MOVA    R12, R8
        MOV.W   @SP, R15
        BIS.W   0x2(SP), R15
        CMP.W   #0x0, R15
        JNE     ??create_chain_3
        MOV.W   0xa(R8), R4
        MOV.W   0xc(R8), R5
        MOV.W   R4, R15
        BIS.W   R5, R15
        CMP.W   #0x0, R15
        JEQ     ??create_chain_1
        CMP.W   0x1c(R8), R5
        JNC     ??create_chain_4
        JNE     ??create_chain_1
        CMP.W   0x1a(R8), R4
        JNC     ??create_chain_4
??create_chain_1:
        MOV.W   #0x1, R4
        MOV.W   #0x0, R5
        JMP     ??create_chain_4
??create_chain_3:
        MOV.W   @SP, R14
        MOV.W   0x2(SP), R15
        MOVA    R8, R12
        CALLA   #get_fat
        MOV.W   R12, R6
        MOV.W   R13, R7
        CMP.W   #0x0, R7
        JNC     ??create_chain_5
        JNE     ??create_chain_6
        CMP.W   #0x2, R6
        JC      ??create_chain_6
??create_chain_5:
        MOV.W   #0x1, R12
        MOV.W   #0x0, R13
        JMP     ??create_chain_7
??create_chain_6:
        CMP.W   0x1c(R8), R7
        JNC     ??create_chain_8
        JNE     ??create_chain_9
        CMP.W   0x1a(R8), R6
        JC      ??create_chain_9
??create_chain_8:
        MOV.W   R6, R12
        MOV.W   R7, R13
        JMP     ??create_chain_7
??create_chain_9:
        MOV.W   @SP, R4
        MOV.W   0x2(SP), R5
??create_chain_4:
        MOV.W   R4, R10
        MOV.W   R5, R11
??create_chain_0:
        ADD.W   #0x1, R10
        ADDC.W  #0x0, R11
        CMP.W   0x1c(R8), R11
        JNC     ??create_chain_10
        JNE     ??create_chain_11
        CMP.W   0x1a(R8), R10
        JNC     ??create_chain_10
??create_chain_11:
        MOV.W   #0x2, R10
        MOV.W   #0x0, R11
        CMP.W   R11, R5
        JNC     ??create_chain_12
        JNE     ??create_chain_10
        CMP.W   R10, R4
        JC      ??create_chain_10
??create_chain_12:
        MOV.W   #0x0, R12
        MOV.W   #0x0, R13
        JMP     ??create_chain_7
??create_chain_10:
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R8, R12
        CALLA   #get_fat
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??create_chain_13
        PUSH.W  #0xfff
          CFI CFA SP+42
        PUSH.W  #0xffff
          CFI CFA SP+44
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R8, R12
        CALLA   #put_fat
        MOV.B   R12, R9
        ADD.W   #0x4, SP
          CFI CFA SP+40
        CMP.B   #0x0, R9
        JNE     ??create_chain_14
        JMP     ??create_chain_15
??create_chain_13:
        CMP.W   #0xffff, R6
        JNE     ??create_chain_16
        CMP.W   #0xffff, R7
        JEQ     ??create_chain_2
??create_chain_16:
        CMP.W   #0x1, R6
        JNE     ??create_chain_17
        CMP.W   #0x0, R7
        JNE     ??create_chain_17
??create_chain_2:
        MOV.W   R6, R12
        MOV.W   R7, R13
        JMP     ??create_chain_7
??create_chain_17:
        CMP.W   R4, R10
        JNE     ??create_chain_0
        CMP.W   R5, R11
        JNE     ??create_chain_0
        MOV.W   #0x0, R12
        MOV.W   #0x0, R13
        JMP     ??create_chain_7
??create_chain_15:
        MOV.W   @SP, R15
        BIS.W   0x2(SP), R15
        CMP.W   #0x0, R15
        JEQ     ??create_chain_14
        PUSH.W  R11
          CFI CFA SP+42
        PUSH.W  R10
          CFI CFA SP+44
        MOV.W   0x4(SP), R14
        MOV.W   0x6(SP), R15
        MOVA    R8, R12
        CALLA   #put_fat
        MOV.B   R12, R9
        ADD.W   #0x4, SP
          CFI CFA SP+40
??create_chain_14:
        CMP.B   #0x0, R9
        JNE     ??create_chain_18
        MOV.W   R10, 0xa(R8)
        MOV.W   R11, 0xc(R8)
        CMP.W   #0xffff, 0xe(R8)
        JNE     ??create_chain_19
        CMP.W   #0xffff, 0x10(R8)
        JEQ     ??create_chain_20
??create_chain_19:
        ADD.W   #0xffff, 0xe(R8)
        ADDC.W  #0xffff, 0x10(R8)
        MOV.B   #0x1, 0x5(R8)
        JMP     ??create_chain_20
??create_chain_18:
        CMP.B   #0x1, R9
        JNE     ??create_chain_21
        MOV.W   #0xffff, R10
        MOV.W   #0xffff, R11
        JMP     ??create_chain_20
??create_chain_21:
        MOV.W   #0x1, R10
        MOV.W   #0x0, R11
??create_chain_20:
        MOV.W   R10, R12
        MOV.W   R11, R13
??create_chain_7:
        ADD.W   #0x4, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock10

        RSEG CODE:CODE:REORDER:NOROOT(1)
clmt_clust:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function clmt_clust
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R4
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOVA    0x24(R4), R15
        ADDA    #0x4, R15
        MOVA    R15, R5
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #?ShiftRight32u_9
        MOVA    @R4, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R12, R8
        MOV.W   R13, R9
??clmt_clust_0:
        MOV.W   @R5, R6
        MOV.W   0x2(R5), R7
        ADDA    #0x4, R5
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??clmt_clust_1
        MOV.W   #0x0, R12
        MOV.W   #0x0, R13
        JMP     ??clmt_clust_2
??clmt_clust_1:
        CMP.W   R7, R9
        JNC     ??clmt_clust_3
        JNE     ??clmt_clust_4
        CMP.W   R6, R8
        JC      ??clmt_clust_4
??clmt_clust_3:
        ADD.W   @R5+, R8
        ADDC.W  @R5+, R9
        MOV.W   R8, R12
        MOV.W   R9, R13
        JMP     ??clmt_clust_2
??clmt_clust_4:
        SUB.W   R6, R8
        SUBC.W  R7, R9
        ADDA    #0x4, R5
        JMP     ??clmt_clust_0
??clmt_clust_2:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock11

        RSEG CODE:CODE:REORDER:NOROOT(1)
dir_sdi:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function dir_sdi
        FUNCALL dir_sdi, get_fat
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_sdi, clust2sect
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R8
        MOV.W   R13, R9
        MOV.W   R9, 0x6(R8)
        MOV.W   0x8(R8), R10
        MOV.W   0xa(R8), R11
        CMP.W   #0x1, R10
        JNE     ??dir_sdi_3
        CMP.W   #0x0, R11
        JEQ     ??dir_sdi_1
??dir_sdi_3:
        MOVA    @R8, R15
        CMP.W   0x1c(R15), R11
        JNC     ??dir_sdi_4
        JNE     ??dir_sdi_1
        CMP.W   0x1a(R15), R10
        JNC     ??dir_sdi_4
??dir_sdi_1:
        MOV.B   #0x2, R12
        JMP     ??dir_sdi_5
??dir_sdi_4:
        MOV.W   R10, R15
        BIS.W   R11, R15
        CMP.W   #0x0, R15
        JNE     ??dir_sdi_6
        MOVA    @R8, R15
        CMP.B   #0x3, 0(R15)
        JNE     ??dir_sdi_6
        MOVA    @R8, R15
        MOV.W   0x26(R15), R10
        MOV.W   0x28(R15), R11
??dir_sdi_6:
        MOV.W   R10, R15
        BIS.W   R11, R15
        CMP.W   #0x0, R15
        JNE     ??dir_sdi_7
        MOV.W   R10, 0xc(R8)
        MOV.W   R11, 0xe(R8)
        MOVA    @R8, R15
        CMP.W   0x8(R15), R9
        JNC     ??dir_sdi_8
        MOV.B   #0x2, R12
        JMP     ??dir_sdi_5
??dir_sdi_8:
        MOVA    @R8, R13
        MOV.W   R9, R14
        RRUM.W  #0x4, R14
        MOV.W   #0x0, R15
        ADD.W   0x26(R13), R14
        ADDC.W  0x28(R13), R15
        MOV.W   R14, 0x10(R8)
        MOV.W   R15, 0x12(R8)
        JMP     ??dir_sdi_9
??dir_sdi_7:
        MOVA    @R8, R15
        MOV.B   0x2(R15), R15
        MOV.B   R15, R15
        RLAM.W  #0x4, R15
        MOV.W   R15, R6
??dir_sdi_0:
        CMP.W   R6, R9
        JNC     ??dir_sdi_10
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    @R8, R12
        CALLA   #get_fat
        MOV.W   R12, R10
        MOV.W   R13, R11
        CMP.W   #0xffff, R10
        JNE     ??dir_sdi_11
        CMP.W   #0xffff, R11
        JNE     ??dir_sdi_11
        MOV.B   #0x1, R12
        JMP     ??dir_sdi_5
??dir_sdi_11:
        CMP.W   #0x0, R11
        JNC     ??dir_sdi_2
        JNE     ??dir_sdi_12
        CMP.W   #0x2, R10
        JNC     ??dir_sdi_2
??dir_sdi_12:
        MOVA    @R8, R15
        CMP.W   0x1c(R15), R11
        JNC     ??dir_sdi_13
        JNE     ??dir_sdi_2
        CMP.W   0x1a(R15), R10
        JNC     ??dir_sdi_13
??dir_sdi_2:
        MOV.B   #0x2, R12
        JMP     ??dir_sdi_5
??dir_sdi_13:
        SUB.W   R6, R9
        JMP     ??dir_sdi_0
??dir_sdi_10:
        MOV.W   R10, 0xc(R8)
        MOV.W   R11, 0xe(R8)
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    @R8, R12
        CALLA   #clust2sect
        MOV.W   R9, R14
        RRUM.W  #0x4, R14
        MOV.W   #0x0, R15
        ADD.W   R14, R12
        ADDC.W  R15, R13
        MOV.W   R12, 0x10(R8)
        MOV.W   R13, 0x12(R8)
??dir_sdi_9:
        MOVA    @R8, R7
        MOV.W   R9, R12
        MOV.W   #0x10, R14
        CALLA   #?DivMod16u
        RPT     #0x5
        RLAX.W  R14
        ADDA    R14, R7
        ADDA    #0x32, R7
        MOVA    R7, 0x14(R8)
        MOV.B   #0x0, R12
??dir_sdi_5:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock12

        RSEG CODE:CODE:REORDER:NOROOT(1)
dir_next:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function dir_next
        FUNCALL dir_next, get_fat
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_next, create_chain
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_next, move_window
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_next, mem_set
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_next, clust2sect
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_next, move_window
        LOCFRAME CSTACK, 28, STACK
        FUNCALL dir_next, clust2sect
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R10
        MOV.W   R13, R7
        MOV.W   0x6(R10), R15
        ADD.W   #0x1, R15
        MOV.W   R15, R11
        CMP.W   #0x0, R11
        JEQ     ??dir_next_1
        MOV.W   0x10(R10), R15
        BIS.W   0x12(R10), R15
        CMP.W   #0x0, R15
        JNE     ??dir_next_2
??dir_next_1:
        MOV.B   #0x4, R12
        JMP     ??dir_next_3
??dir_next_2:
        MOV.W   R11, R12
        MOV.W   #0x10, R14
        CALLA   #?DivMod16u
        CMP.W   #0x0, R14
        JNE     ??dir_next_4
        ADD.W   #0x1, 0x10(R10)
        ADDC.W  #0x0, 0x12(R10)
        MOV.W   0xc(R10), R15
        BIS.W   0xe(R10), R15
        CMP.W   #0x0, R15
        JNE     ??dir_next_5
        MOVA    @R10, R15
        CMP.W   0x8(R15), R11
        JNC     ??dir_next_4
        MOV.B   #0x4, R12
        JMP     ??dir_next_3
??dir_next_5:
        MOV.W   R11, R14
        RRUM.W  #0x4, R14
        MOVA    @R10, R15
        MOV.B   0x2(R15), R15
        MOV.B   R15, R15
        ADD.W   #0xffff, R15
        BIT.W   R15, R14
        JNE     ??dir_next_4
        MOV.W   0xc(R10), R14
        MOV.W   0xe(R10), R15
        MOVA    @R10, R12
        CALLA   #get_fat
        MOV.W   R12, R8
        MOV.W   R13, R9
        CMP.W   #0x0, R9
        JNC     ??dir_next_6
        JNE     ??dir_next_7
        CMP.W   #0x2, R8
        JC      ??dir_next_7
??dir_next_6:
        MOV.B   #0x2, R12
        JMP     ??dir_next_3
??dir_next_7:
        CMP.W   #0xffff, R8
        JNE     ??dir_next_8
        CMP.W   #0xffff, R9
        JNE     ??dir_next_8
        MOV.B   #0x1, R12
        JMP     ??dir_next_3
??dir_next_8:
        MOVA    @R10, R15
        CMP.W   0x1c(R15), R9
        JNC     ??dir_next_9
        JNE     ??dir_next_10
        CMP.W   0x1a(R15), R8
        JNC     ??dir_next_9
??dir_next_10:
        CMP.W   #0x0, R7
        JNE     ??dir_next_11
        MOV.B   #0x4, R12
        JMP     ??dir_next_3
??dir_next_11:
        MOV.W   0xc(R10), R14
        MOV.W   0xe(R10), R15
        MOVA    @R10, R12
        CALLA   #create_chain
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JNE     ??dir_next_12
        MOV.B   #0x7, R12
        JMP     ??dir_next_3
??dir_next_12:
        CMP.W   #0x1, R8
        JNE     ??dir_next_13
        CMP.W   #0x0, R9
        JNE     ??dir_next_13
        MOV.B   #0x2, R12
        JMP     ??dir_next_3
??dir_next_13:
        CMP.W   #0xffff, R8
        JNE     ??dir_next_14
        CMP.W   #0xffff, R9
        JNE     ??dir_next_14
        MOV.B   #0x1, R12
        JMP     ??dir_next_3
??dir_next_14:
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    @R10, R12
        CALLA   #move_window
        CMP.B   #0x0, R12
        JEQ     ??dir_next_15
        MOV.B   #0x1, R12
        JMP     ??dir_next_3
??dir_next_15:
        MOV.W   #0x200, R14
        MOV.W   #0x0, R13
        MOVA    @R10, R12
        ADDA    #0x32, R12
        CALLA   #mem_set
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    @R10, R12
        CALLA   #clust2sect
        MOVA    @R10, R15
        MOV.W   R12, 0x2e(R15)
        MOV.W   R13, 0x30(R15)
        MOV.B   #0x0, R6
??dir_next_0:
        MOVA    @R10, R15
        CMP.B   0x2(R15), R6
        JC      ??dir_next_16
        MOVA    @R10, R15
        MOV.B   #0x1, 0x4(R15)
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    @R10, R12
        CALLA   #move_window
        CMP.B   #0x0, R12
        JEQ     ??dir_next_17
        MOV.B   #0x1, R12
        JMP     ??dir_next_3
??dir_next_17:
        MOVA    @R10, R15
        ADD.W   #0x1, 0x2e(R15)
        ADDC.W  #0x0, 0x30(R15)
        ADD.B   #0x1, R6
        JMP     ??dir_next_0
??dir_next_16:
        MOVA    @R10, R13
        MOV.B   R6, R6
        MOV.W   R6, R14
        MOV.W   #0x0, R15
        SUB.W   R14, 0x2e(R13)
        SUBC.W  R15, 0x30(R13)
??dir_next_9:
        MOV.W   R8, 0xc(R10)
        MOV.W   R9, 0xe(R10)
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    @R10, R12
        CALLA   #clust2sect
        MOV.W   R12, 0x10(R10)
        MOV.W   R13, 0x12(R10)
??dir_next_4:
        MOV.W   R11, 0x6(R10)
        MOVA    @R10, R6
        MOV.W   R11, R12
        MOV.W   #0x10, R14
        CALLA   #?DivMod16u
        RPT     #0x5
        RLAX.W  R14
        ADDA    R14, R6
        ADDA    #0x32, R6
        MOVA    R6, 0x14(R10)
        MOV.B   #0x0, R12
??dir_next_3:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock13

        RSEG CODE:CODE:REORDER:NOROOT(1)
ld_clust:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function ld_clust
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R15
        MOVA    R13, R14
        MOV.B   0x1a(R14), R11
        MOV.B   R11, R11
        MOV.B   0x1b(R14), R10
        MOV.B   R10, R10
        AND.W   #0xff, R10
        SWPB    R10
        BIS.W   R11, R10
        MOV.W   #0x0, R11
        MOV.W   R10, R12
        MOV.W   R11, R13
        CMP.B   #0x3, 0(R15)
        JNE     ??ld_clust_0
        MOV.B   0x14(R14), R11
        MOV.B   R11, R11
        MOV.B   0x15(R14), R10
        MOV.B   R10, R10
        AND.W   #0xff, R10
        SWPB    R10
        BIS.W   R11, R10
        MOV.W   #0x0, R11
        MOV.W   R10, R11
        MOV.W   #0x0, R10
        BIS.W   R10, R12
        BIS.W   R11, R13
??ld_clust_0:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock14

        RSEG CODE:CODE:REORDER:NOROOT(1)
st_clust:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function st_clust
        MOV.B   R14, 0x1a(R12)
        MOV.W   R14, R13
        SWPB    R13
        AND.W   #0xff, R13
        MOV.B   R13, 0x1b(R12)
        MOV.B   R15, 0x14(R12)
        MOV.W   R15, R13
        SWPB    R13
        AND.W   #0xff, R13
        MOV.B   R13, 0x15(R12)
        RETA
          CFI EndBlock cfiBlock15

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "\\"*:<>?|\\177">`:
        DC8 "\"*:<>?|\177"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "+,;=[]">`:
        DC8 "+,;=[]"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "/%s">`:
        DC8 "/%s"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
`?<Constant "%s/%s\\n">`:
        DC8 "%s/%s\012"

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
LfnOfs:
        DC8 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30

        RSEG CODE:CODE:REORDER:NOROOT(1)
cmp_lfn:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI Function cmp_lfn
        FUNCALL cmp_lfn, ff_wtoupper
        LOCFRAME CSTACK, 28, STACK
        FUNCALL cmp_lfn, ff_wtoupper
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R11
        MOVA    R13, R8
        MOV.B   @R8, R15
        MOV.B   R15, R15
        AND.W   #0xffbf, R15
        ADD.W   #0xffff, R15
        MOV.W   R15, R14
        RLAM.W  #0x2, R15
        ADD.W   R15, R14
        RLA.W   R15
        ADD.W   R14, R15
        MOV.W   R15, R10
        MOV.W   #0x0, R9
        MOV.W   #0x1, R6
??cmp_lfn_0:
        MOVX.B  LfnOfs(R9), R15
        MOV.B   R15, R15
        ADDA    R8, R15
        MOV.B   @R15, R14
        MOV.B   R14, R14
        MOVX.B  LfnOfs(R9), R15
        MOV.B   R15, R15
        MOVA    R8, R13
        ADDA    R15, R13
        MOV.B   0x1(R13), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        MOV.W   R15, R7
        CMP.W   #0x0, R6
        JEQ     ??cmp_lfn_1
        MOV.W   R7, R12
        CALLA   #ff_wtoupper
        MOV.W   R12, R6
        CMP.W   #0x64, R10
        JC      ??cmp_lfn_2
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R11, R15
        MOV.W   @R15, R12
        CALLA   #ff_wtoupper
        ADD.W   #0x1, R10
        CMP.W   R12, R6
        JEQ     ??cmp_lfn_3
??cmp_lfn_2:
        MOV.W   #0x0, R12
        JMP     ??cmp_lfn_4
??cmp_lfn_1:
        CMP.W   #0xffff, R7
        JEQ     ??cmp_lfn_3
        MOV.W   #0x0, R12
        JMP     ??cmp_lfn_4
??cmp_lfn_3:
        ADD.W   #0x1, R9
        CMP.W   #0xd, R9
        JNC     ??cmp_lfn_0
        BIT.B   #0x40, 0(R8)
        JNC     ??cmp_lfn_5
        CMP.W   #0x0, R6
        JEQ     ??cmp_lfn_5
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R11, R15
        CMP.W   #0x0, 0(R15)
        JEQ     ??cmp_lfn_5
        MOV.W   #0x0, R12
        JMP     ??cmp_lfn_4
??cmp_lfn_5:
        MOV.W   #0x1, R12
??cmp_lfn_4:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock16

        RSEG CODE:CODE:REORDER:NOROOT(1)
pick_lfn:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function pick_lfn
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R11
        MOV.B   @R13, R15
        MOV.B   R15, R15
        AND.W   #0x3f, R15
        ADD.W   #0xffff, R15
        MOV.W   R15, R12
        RLAM.W  #0x2, R15
        ADD.W   R15, R12
        RLA.W   R15
        ADD.W   R12, R15
        MOV.W   R15, R10
        MOV.W   #0x0, R14
        MOV.W   #0x1, R8
??pick_lfn_0:
        MOVX.B  LfnOfs(R14), R15
        MOV.B   R15, R15
        ADDA    R13, R15
        MOV.B   @R15, R12
        MOV.B   R12, R12
        MOVX.B  LfnOfs(R14), R15
        MOV.B   R15, R15
        MOVA    R13, R6
        ADDA    R15, R6
        MOV.B   0x1(R6), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R12, R15
        MOV.W   R15, R9
        CMP.W   #0x0, R8
        JEQ     ??pick_lfn_1
        CMP.W   #0x64, R10
        JNC     ??pick_lfn_2
        MOV.W   #0x0, R12
        JMP     ??pick_lfn_3
??pick_lfn_2:
        MOV.W   R9, R8
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R11, R15
        MOV.W   R9, 0(R15)
        ADD.W   #0x1, R10
        JMP     ??pick_lfn_4
??pick_lfn_1:
        CMP.W   #0xffff, R9
        JEQ     ??pick_lfn_4
        MOV.W   #0x0, R12
        JMP     ??pick_lfn_3
??pick_lfn_4:
        ADD.W   #0x1, R14
        CMP.W   #0xd, R14
        JNC     ??pick_lfn_0
        BIT.B   #0x40, 0(R13)
        JNC     ??pick_lfn_5
        CMP.W   #0x64, R10
        JNC     ??pick_lfn_6
        MOV.W   #0x0, R12
        JMP     ??pick_lfn_3
??pick_lfn_6:
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R11, R15
        MOV.W   #0x0, 0(R15)
??pick_lfn_5:
        MOV.W   #0x1, R12
??pick_lfn_3:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock17

        RSEG CODE:CODE:REORDER:NOROOT(1)
fit_lfn:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function fit_lfn
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R10
        MOVA    R13, R12
        MOV.B   R14, R13
        MOV.B   R15, R8
        MOV.B   R8, 0xd(R12)
        MOV.B   #0xf, 0xb(R12)
        MOV.B   #0x0, 0xc(R12)
        MOV.B   #0x0, 0x1a(R12)
        MOV.B   #0x0, 0x1b(R12)
        MOV.B   R13, R15
        ADD.W   #0xffff, R15
        MOV.W   R15, R6
        RLAM.W  #0x2, R15
        ADD.W   R15, R6
        RLA.W   R15
        ADD.W   R6, R15
        MOV.W   R15, R11
        MOV.W   #0x0, R15
        MOV.W   R15, R9
        MOV.W   R15, R14
??fit_lfn_0:
        CMP.W   #0xffff, R9
        JEQ     ??fit_lfn_1
        MOV.W   R11, R15
        ADDA    R15, R15
        ADDA    R10, R15
        MOV.W   @R15, R9
        ADD.W   #0x1, R11
??fit_lfn_1:
        MOVX.B  LfnOfs(R14), R15
        MOV.B   R15, R15
        ADDA    R12, R15
        MOV.B   R9, 0(R15)
        MOV.W   R9, R15
        SWPB    R15
        AND.W   #0xff, R15
        PUSH.W  R6
          CFI CFA SP+30
        MOV.B   R15, 0(SP)
        POP.W   R6
          CFI CFA SP+28
        MOVX.B  LfnOfs(R14), R15
        MOV.B   R15, R15
        MOVA    R12, R7
        ADDA    R15, R7
        MOV.B   R6, 0x1(R7)
        CMP.W   #0x0, R9
        JNE     ??fit_lfn_2
        MOV.W   #0xffff, R9
??fit_lfn_2:
        ADD.W   #0x1, R14
        CMP.W   #0xd, R14
        JNC     ??fit_lfn_0
        CMP.W   #0xffff, R9
        JEQ     ??fit_lfn_3
        MOV.W   R11, R15
        ADDA    R15, R15
        ADDA    R10, R15
        CMP.W   #0x0, 0(R15)
        JNE     ??fit_lfn_4
??fit_lfn_3:
        BIS.B   #0x40, R13
??fit_lfn_4:
        MOV.B   R13, 0(R12)
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock18

        RSEG CODE:CODE:REORDER:NOROOT(1)
gen_numname:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function gen_numname
        FUNCALL gen_numname, mem_cpy
        LOCFRAME CSTACK, 44, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x8, SP
          CFI CFA SP+44
        MOVA    R12, R7
        MOVA    R13, R4
        MOVA    R14, R10
        MOV.W   R15, R11
        MOV.W   #0xb, R14
        MOVA    R4, R13
        MOVA    R7, R12
        CALLA   #mem_cpy
        CMP.W   #0x6, R11
        JNC     ??gen_numname_4
??gen_numname_0:
        MOV.W   R11, R15
        RRUM.W  #0x1, R15
        RRA.W   R11
        MOV.W   #0x0, R11
        RRC.W   R11
        ADD.W   R11, R15
        MOV.W   R15, R11
        ADD.W   @R10, R11
        ADDA    #0x2, R10
        CMP.W   #0x0, 0(R10)
        JNE     ??gen_numname_0
??gen_numname_4:
        MOV.W   #0x7, R8
??gen_numname_1:
        MOV.W   R11, R12
        MOV.W   #0x10, R14
        CALLA   #?DivMod16u
        ADD.B   #0x30, R14
        MOV.B   R14, R6
        CMP.B   #0x3a, R6
        JNC     ??gen_numname_5
        ADD.B   #0x7, R6
??gen_numname_5:
        MOV.W   R8, R15
        ADD.W   SP, R15
        MOV.B   R6, 0(R15)
        ADD.W   #0xffff, R8
        RRUM.W  #0x4, R11
        CMP.W   #0x0, R11
        JNE     ??gen_numname_1
        MOV.W   R8, R15
        ADD.W   SP, R15
        MOV.B   #0x7e, 0(R15)
        MOV.W   #0x0, R9
??gen_numname_2:
        CMP.W   R8, R9
        JC      ??gen_numname_3
        MOVA    R7, R15
        ADDA    R9, R15
        CMP.B   #0x20, 0(R15)
        JEQ     ??gen_numname_3
        ADD.W   #0x1, R9
        JMP     ??gen_numname_2
??gen_numname_3:
        MOV.W   R9, R15
        MOV.W   R15, R9
        ADD.W   #0x1, R9
        CMP.W   #0x8, R8
        JC      ??gen_numname_6
        MOV.W   R8, R14
        ADD.W   SP, R14
        MOV.B   @R14, R13
        ADD.W   #0x1, R8
        JMP     ??gen_numname_7
??gen_numname_6:
        MOV.B   #0x20, R13
??gen_numname_7:
        MOVA    R7, R14
        ADDA    R15, R14
        MOV.B   R13, 0(R14)
        CMP.W   #0x8, R9
        JNC     ??gen_numname_3
        ADD.W   #0x8, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock19

        RSEG CODE:CODE:REORDER:NOROOT(1)
sum_sfn:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function sum_sfn
        MOVA    R12, R15
        MOV.B   #0x0, R12
        MOV.W   #0xb, R14
??sum_sfn_0:
        MOV.B   R12, R13
        RRUX.B  R13
        RRA.B   R12
        MOV.B   #0x0, R12
        RRC.B   R12
        ADD.B   R12, R13
        MOV.B   R13, R12
        ADD.B   @R15, R12
        ADDA    #0x1, R15
        ADD.W   #0xffff, R14
        CMP.W   #0x0, R14
        JNE     ??sum_sfn_0
        RETA
          CFI EndBlock cfiBlock20

        RSEG CODE:CODE:REORDER:NOROOT(1)
dir_find:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function dir_find
        FUNCALL dir_find, dir_sdi
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_find, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_find, cmp_lfn
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_find, sum_sfn
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_find, mem_cmp
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_find, dir_next
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R10
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R9
        CMP.B   #0x0, R9
        JEQ     ??dir_find_6
        MOV.B   R9, R12
        JMP     ??dir_find_7
??dir_find_6:
        MOV.B   #0xff, R14
        MOV.B   R14, R7
        MOV.B   R14, R8
??dir_find_0:
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R9
        CMP.B   #0x0, R9
        JNE     ??dir_find_2
        MOVA    0x14(R10), R11
        MOV.B   @R11, R6
        CMP.B   #0x0, R6
        JNE     ??dir_find_8
        MOV.B   #0x4, R9
        JMP     ??dir_find_2
??dir_find_8:
        MOV.B   0xb(R11), R14
        AND.B   #0x3f, R14
        MOV.B   R14, R4
        CMP.B   #0xe5, R6
        JEQ     ??dir_find_9
        BIT.B   #0x8, R4
        JNC     ??dir_find_10
        CMP.B   #0xf, R4
        JEQ     ??dir_find_10
??dir_find_9:
        MOV.B   #0xff, R8
        JMP     ??dir_find_4
??dir_find_10:
        CMP.B   #0xf, R4
        JNE     ??dir_find_11
        MOVA    0x1c(R10), R15
        CMPA    #0x0, R15
        JEQ     ??dir_find_4
        BIT.B   #0x40, R6
        JNC     ??dir_find_12
        MOV.B   0xd(R11), R7
        BIC.B   #0x40, R6
        MOV.B   R6, R8
        MOV.W   0x6(R10), 0x20(R10)
??dir_find_12:
        CMP.B   R8, R6
        JNE     ??dir_find_13
        CMP.B   0xd(R11), R7
        JNE     ??dir_find_13
        MOVA    R11, R13
        MOVA    0x1c(R10), R12
        CALLA   #cmp_lfn
        CMP.W   #0x0, R12
        JEQ     ??dir_find_13
        ADD.B   #0xff, R8
        JMP     ??dir_find_4
??dir_find_13:
        MOV.B   #0xff, R8
        JMP     ??dir_find_4
??dir_find_11:
        CMP.B   #0x0, R8
        JNE     ??dir_find_5
        MOVA    R11, R12
        CALLA   #sum_sfn
        CMP.B   R12, R7
        JEQ     ??dir_find_2
??dir_find_5:
        MOV.B   #0xff, R8
        MOV.W   #0xffff, 0x20(R10)
        MOVA    0x18(R10), R15
        BIT.B   #0x1, 0xb(R15)
        JC      ??dir_find_4
        MOV.W   #0xb, R14
        MOVA    0x18(R10), R13
        MOVA    R11, R12
        CALLA   #mem_cmp
        CMP.W   #0x0, R12
        JEQ     ??dir_find_2
??dir_find_4:
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_next
        MOV.B   R12, R9
        CMP.B   #0x0, R9
        JEQ     ??dir_find_0
??dir_find_2:
        MOV.B   R9, R12
??dir_find_7:
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock21

        RSEG CODE:CODE:REORDER:NOROOT(1)
dir_read:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function dir_read
        FUNCALL dir_read, move_window
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_read, pick_lfn
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_read, sum_sfn
        LOCFRAME CSTACK, 36, STACK
        FUNCALL dir_read, dir_next
        LOCFRAME CSTACK, 36, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        MOVA    R12, R10
        MOV.B   #0xff, R8
        MOV.B   #0xff, R7
        MOV.B   #0x4, R9
??dir_read_0:
        MOV.W   0x10(R10), R15
        BIS.W   0x12(R10), R15
        CMP.W   #0x0, R15
        JEQ     ??dir_read_2
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R9
        CMP.B   #0x0, R9
        JNE     ??dir_read_2
        MOVA    0x14(R10), R11
        MOV.B   @R11, R6
        CMP.B   #0x0, R6
        JNE     ??dir_read_6
        MOV.B   #0x4, R9
        JMP     ??dir_read_2
??dir_read_6:
        MOV.B   0xb(R11), R14
        AND.B   #0x3f, R14
        MOV.B   R14, R4
        CMP.B   #0xe5, R6
        JEQ     ??dir_read_7
        BIT.B   #0x8, R4
        JNC     ??dir_read_8
        CMP.B   #0xf, R4
        JEQ     ??dir_read_8
??dir_read_7:
        MOV.B   #0xff, R8
        JMP     ??dir_read_4
??dir_read_8:
        CMP.B   #0xf, R4
        JNE     ??dir_read_9
        BIT.B   #0x40, R6
        JNC     ??dir_read_10
        MOV.B   0xd(R11), R7
        BIC.B   #0x40, R6
        MOV.B   R6, R8
        MOV.W   0x6(R10), 0x20(R10)
??dir_read_10:
        CMP.B   R8, R6
        JNE     ??dir_read_11
        CMP.B   0xd(R11), R7
        JNE     ??dir_read_11
        MOVA    R11, R13
        MOVA    0x1c(R10), R12
        CALLA   #pick_lfn
        CMP.W   #0x0, R12
        JEQ     ??dir_read_11
        ADD.B   #0xff, R8
        JMP     ??dir_read_4
??dir_read_11:
        MOV.B   #0xff, R8
        JMP     ??dir_read_4
??dir_read_9:
        CMP.B   #0x0, R8
        JNE     ??dir_read_12
        MOVA    R11, R12
        CALLA   #sum_sfn
        CMP.B   R12, R7
        JEQ     ??dir_read_2
??dir_read_12:
        MOV.W   #0xffff, 0x20(R10)
        JMP     ??dir_read_2
??dir_read_4:
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_next
        MOV.B   R12, R9
        CMP.B   #0x0, R9
        JEQ     ??dir_read_0
??dir_read_2:
        CMP.B   #0x0, R9
        JEQ     ??dir_read_13
        MOV.W   #0x0, 0x10(R10)
        MOV.W   #0x0, 0x12(R10)
??dir_read_13:
        MOV.B   R9, R12
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock22

        RSEG CODE:CODE:REORDER:NOROOT(1)
dir_register:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function dir_register
        FUNCALL dir_register, mem_cpy
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, gen_numname
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, dir_find
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, dir_sdi
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, move_window
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, dir_next
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, dir_sdi
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, sum_sfn
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, move_window
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, fit_lfn
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, dir_next
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, move_window
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, mem_set
        LOCFRAME CSTACK, 50, STACK
        FUNCALL dir_register, mem_cpy
        LOCFRAME CSTACK, 50, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0xe, SP
          CFI CFA SP+50
        MOVA    R12, R10
        MOVA    0x18(R10), R6
        MOVA    0x1c(R10), R7
        MOV.W   #0xc, R14
        MOVA    R6, R13
        MOV.W   SP, R12
        ADD.W   #0x2, R12
        CALLA   #mem_cpy
        BIT.B   #0x20, 0xd(SP)
        JNC     ??dir_register_10
        MOV.B   #0x6, R12
        JMP     ??dir_register_11
??dir_register_10:
        BIT.B   #0x1, 0xd(SP)
        JNC     ??dir_register_12
        MOV.B   #0x0, 0xb(R6)
        MOVX.A  #0x0, 0x1c(R10)
        MOV.W   #0x1, R9
??dir_register_0:
        CMP.W   #0x64, R9
        JC      ??dir_register_5
        MOV.W   R9, R15
        MOVA    R7, R14
        MOV.W   SP, R13
        ADD.W   #0x2, R13
        MOVA    R6, R12
        CALLA   #gen_numname
        MOVA    R10, R12
        CALLA   #dir_find
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_register_5
        ADD.W   #0x1, R9
        JMP     ??dir_register_0
??dir_register_5:
        CMP.W   #0x64, R9
        JNE     ??dir_register_13
        MOV.B   #0x7, R12
        JMP     ??dir_register_11
??dir_register_13:
        CMP.B   #0x4, R11
        JEQ     ??dir_register_14
        MOV.B   R11, R12
        JMP     ??dir_register_11
??dir_register_14:
        MOV.B   0xd(SP), 0xb(R6)
        MOVA    R7, 0x1c(R10)
??dir_register_12:
        BIT.B   #0x2, 0xd(SP)
        JNC     ??dir_register_15
        MOV.W   #0x0, R8
??dir_register_1:
        MOV.W   R8, R15
        ADDA    R15, R15
        ADDA    R7, R15
        CMP.W   #0x0, 0(R15)
        JEQ     ??dir_register_16
        ADD.W   #0x1, R8
        JMP     ??dir_register_1
??dir_register_16:
        ADD.W   #0x19, R8
        MOV.W   R8, R12
        MOV.W   #0xd, R14
        CALLA   #?DivMod16u
        MOV.W   R12, R8
        JMP     ??dir_register_17
??dir_register_15:
        MOV.W   #0x1, R8
??dir_register_17:
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JEQ     ??dir_register_18
        MOV.B   R11, R12
        JMP     ??dir_register_11
??dir_register_18:
        MOV.W   #0x0, R15
        MOV.W   R15, R5
        MOV.W   R15, R9
??dir_register_2:
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_register_7
        MOVA    0x14(R10), R15
        MOVX.B  @R15, 0(SP)
        CMP.B   #0xe5, 0(SP)
        JEQ     ??dir_register_19
        CMP.B   #0x0, 0(SP)
        JNE     ??dir_register_20
??dir_register_19:
        CMP.W   #0x0, R9
        JNE     ??dir_register_21
        MOV.W   0x6(R10), R5
??dir_register_21:
        ADD.W   #0x1, R9
        CMP.W   R8, R9
        JNE     ??dir_register_22
        JMP     ??dir_register_7
??dir_register_20:
        MOV.W   #0x0, R9
??dir_register_22:
        MOV.W   #0x1, R13
        MOVA    R10, R12
        CALLA   #dir_next
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JEQ     ??dir_register_2
??dir_register_7:
        CMP.B   #0x0, R11
        JNE     ??dir_register_9
        CMP.W   #0x2, R8
        JNC     ??dir_register_9
        MOV.W   R5, R13
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_register_9
        MOVA    0x18(R10), R12
        CALLA   #sum_sfn
        MOV.B   R12, 0x1(SP)
        ADD.W   #0xffff, R8
??dir_register_3:
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_register_9
        MOV.B   0x1(SP), R15
        PUSH.W  R14
          CFI CFA SP+52
        MOV.B   R8, 0(SP)
        POP.W   R14
          CFI CFA SP+50
        MOVA    0x14(R10), R13
        MOVA    0x1c(R10), R12
        CALLA   #fit_lfn
        MOVA    @R10, R15
        MOV.B   #0x1, 0x4(R15)
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_next
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_register_9
        ADD.W   #0xffff, R8
        CMP.W   #0x0, R8
        JNE     ??dir_register_3
??dir_register_9:
        CMP.B   #0x0, R11
        JNE     ??dir_register_23
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_register_23
        MOVA    0x14(R10), R4
        MOV.W   #0x20, R14
        MOV.W   #0x0, R13
        MOVA    R4, R12
        CALLA   #mem_set
        MOV.W   #0xb, R14
        MOVA    0x18(R10), R13
        MOVA    R4, R12
        CALLA   #mem_cpy
        MOVA    0x18(R10), R15
        MOV.B   0xb(R15), R14
        AND.B   #0x18, R14
        MOV.B   R14, 0xc(R4)
        MOVA    @R10, R15
        MOV.B   #0x1, 0x4(R15)
??dir_register_23:
        MOV.B   R11, R12
??dir_register_11:
        ADD.W   #0xe, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock23

        RSEG CODE:CODE:REORDER:NOROOT(1)
dir_remove:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function dir_remove
        FUNCALL dir_remove, dir_sdi
        LOCFRAME CSTACK, 20, STACK
        FUNCALL dir_remove, move_window
        LOCFRAME CSTACK, 20, STACK
        FUNCALL dir_remove, dir_next
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R10
        MOV.W   0x6(R10), R8
        CMP.W   #0xffff, 0x20(R10)
        JNE     ??dir_remove_4
        MOV.W   R8, R13
        JMP     ??dir_remove_5
??dir_remove_4:
        MOV.W   0x20(R10), R13
??dir_remove_5:
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_remove_6
??dir_remove_0:
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??dir_remove_2
        MOVA    0x14(R10), R15
        MOV.B   #0xe5, 0(R15)
        MOVA    @R10, R15
        MOV.B   #0x1, 0x4(R15)
        CMP.W   R8, 0x6(R10)
        JC      ??dir_remove_2
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_next
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JEQ     ??dir_remove_0
??dir_remove_2:
        CMP.B   #0x4, R11
        JNE     ??dir_remove_6
        MOV.B   #0x2, R11
??dir_remove_6:
        MOV.B   R11, R12
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock24

        RSEG CODE:CODE:REORDER:NOROOT(1)
create_name:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function create_name
        FUNCALL create_name, ff_convert
        LOCFRAME CSTACK, 46, STACK
        FUNCALL create_name, chk_chr
        LOCFRAME CSTACK, 46, STACK
        FUNCALL create_name, mem_set
        LOCFRAME CSTACK, 46, STACK
        FUNCALL create_name, ff_convert
        LOCFRAME CSTACK, 46, STACK
        FUNCALL create_name, chk_chr
        LOCFRAME CSTACK, 46, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R13
          CFI CFA SP+40
        SUB.W   #0x6, SP
          CFI CFA SP+46
        MOVA    R12, R5
        MOVA    0x6(SP), R15
        MOVX.A  @R15, 0x2(SP)
??create_name_0:
        MOVA    0x2(SP), R15
        CMP.B   #0x2f, 0(R15)
        JEQ     ??create_name_12
        MOVA    0x2(SP), R15
        CMP.B   #0x5c, 0(R15)
        JNE     ??create_name_13
??create_name_12:
        MOVA    0x2(SP), R15
        ADDA    #0x1, R15
        MOVA    R15, 0x2(SP)
        JMP     ??create_name_0
??create_name_13:
        MOVA    0x1c(R5), R9
        MOV.W   #0x0, R15
        MOV.W   R15, R10
        MOV.W   R15, R6
??create_name_1:
        MOVA    0x2(SP), R15
        ADDA    R6, R15
        MOV.B   @R15, R15
        MOV.B   R15, R15
        MOV.W   R15, R8
        ADD.W   #0x1, R6
        CMP.W   #0x20, R8
        JNC     ??create_name_14
        CMP.W   #0x2f, R8
        JEQ     ??create_name_14
        CMP.W   #0x5c, R8
        JNE     ??create_name_15
??create_name_14:
        MOVA    0x2(SP), R15
        ADDA    R6, R15
        MOVA    0x6(SP), R14
        MOVA    R15, 0(R14)
        CMP.W   #0x20, R8
        JC      ??create_name_16
        JMP     ??create_name_17
??create_name_15:
        CMP.W   #0x64, R10
        JNC     ??create_name_18
        MOV.B   #0x6, R12
        JMP     ??create_name_19
??create_name_18:
        AND.W   #0xff, R8
        MOV.W   #0x1, R13
        MOV.W   R8, R12
        CALLA   #ff_convert
        MOV.W   R12, R8
        CMP.W   #0x0, R8
        JNE     ??create_name_20
        MOV.B   #0x6, R12
        JMP     ??create_name_19
??create_name_20:
        CMP.W   #0x80, R8
        JC      ??create_name_21
        MOV.W   R8, R13
        MOVA    #`?<Constant "\\"*:<>?|\\177">`, R12
        CALLA   #chk_chr
        CMP.W   #0x0, R12
        JEQ     ??create_name_21
        MOV.B   #0x6, R12
        JMP     ??create_name_19
??create_name_21:
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R9, R15
        MOV.W   R8, 0(R15)
        ADD.W   #0x1, R10
        JMP     ??create_name_1
??create_name_17:
        MOV.B   #0x4, R11
        JMP     ??create_name_22
??create_name_16:
        MOV.B   #0x0, R11
??create_name_22:
        CMP.W   #0x1, R10
        JNE     ??create_name_23
        MOV.W   R10, R15
        ADD.W   #0xffff, R15
        ADDA    R15, R15
        ADDA    R9, R15
        CMP.W   #0x2e, 0(R15)
        JEQ     ??create_name_24
??create_name_23:
        CMP.W   #0x2, R10
        JNE     ??create_name_3
        MOV.W   R10, R15
        ADD.W   #0xffff, R15
        ADDA    R15, R15
        ADDA    R9, R15
        CMP.W   #0x2e, 0(R15)
        JNE     ??create_name_3
        MOV.W   R10, R15
        ADD.W   #0xfffe, R15
        ADDA    R15, R15
        ADDA    R9, R15
        CMP.W   #0x2e, 0(R15)
        JNE     ??create_name_3
??create_name_24:
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R9, R15
        MOV.W   #0x0, 0(R15)
        MOV.W   #0x0, R7
??create_name_2:
        CMP.W   #0xb, R7
        JC      ??create_name_25
        CMP.W   R10, R7
        JC      ??create_name_26
        MOV.B   #0x2e, R14
        JMP     ??create_name_27
??create_name_26:
        MOV.B   #0x20, R14
??create_name_27:
        MOVA    0x18(R5), R15
        ADDA    R7, R15
        MOV.B   R14, 0(R15)
        ADD.W   #0x1, R7
        JMP     ??create_name_2
??create_name_25:
        MOV.B   R11, R14
        BIS.B   #0x20, R14
        MOVA    0x18(R5), R15
        ADDA    R7, R15
        MOV.B   R14, 0(R15)
        MOV.B   #0x0, R12
        JMP     ??create_name_19
??create_name_3:
        CMP.W   #0x0, R10
        JEQ     ??create_name_8
        MOV.W   R10, R15
        ADD.W   #0xffff, R15
        ADDA    R15, R15
        ADDA    R9, R15
        MOV.W   @R15, R8
        CMP.W   #0x20, R8
        JEQ     ??create_name_7
        CMP.W   #0x2e, R8
        JNE     ??create_name_8
??create_name_7:
        ADD.W   #0xffff, R10
        JMP     ??create_name_3
??create_name_8:
        CMP.W   #0x0, R10
        JNE     ??create_name_28
        MOV.B   #0x6, R12
        JMP     ??create_name_19
??create_name_28:
        MOV.W   R10, R15
        ADDA    R15, R15
        ADDA    R9, R15
        MOV.W   #0x0, 0(R15)
        MOV.W   #0xb, R14
        MOV.W   #0x20, R13
        MOVA    0x18(R5), R12
        CALLA   #mem_set
        MOV.W   #0x0, R6
??create_name_4:
        MOV.W   R6, R15
        ADDA    R15, R15
        ADDA    R9, R15
        CMP.W   #0x20, 0(R15)
        JEQ     ??create_name_29
        MOV.W   R6, R15
        ADDA    R15, R15
        ADDA    R9, R15
        CMP.W   #0x2e, 0(R15)
        JNE     ??create_name_30
??create_name_29:
        ADD.W   #0x1, R6
        JMP     ??create_name_4
??create_name_30:
        CMP.W   #0x0, R6
        JEQ     ??create_name_5
        BIS.B   #0x3, R11
??create_name_5:
        CMP.W   #0x0, R10
        JEQ     ??create_name_31
        MOV.W   R10, R15
        ADD.W   #0xffff, R15
        ADDA    R15, R15
        ADDA    R9, R15
        CMP.W   #0x2e, 0(R15)
        JEQ     ??create_name_31
        ADD.W   #0xffff, R10
        JMP     ??create_name_5
??create_name_31:
        MOV.W   #0x0, R14
        MOV.W   R14, R7
        MOV.B   R14, R4
        MOV.W   #0x8, 0(SP)
??create_name_6:
        MOV.W   R6, R15
        ADDA    R15, R15
        ADDA    R9, R15
        MOV.W   @R15, R8
        ADD.W   #0x1, R6
        CMP.W   #0x0, R8
        JEQ     ??create_name_10
        CMP.W   #0x20, R8
        JEQ     ??create_name_32
        CMP.W   #0x2e, R8
        JNE     ??create_name_33
        CMP.W   R10, R6
        JEQ     ??create_name_33
??create_name_32:
        BIS.B   #0x3, R11
        JMP     ??create_name_6
??create_name_33:
        CMP.W   @SP, R7
        JC      ??create_name_34
        CMP.W   R10, R6
        JNE     ??create_name_35
??create_name_34:
        CMP.W   #0xb, 0(SP)
        JNE     ??create_name_36
        BIS.B   #0x3, R11
        JMP     ??create_name_10
??create_name_36:
        CMP.W   R10, R6
        JEQ     ??create_name_37
        BIS.B   #0x3, R11
??create_name_37:
        CMP.W   R6, R10
        JNC     ??create_name_10
        MOV.W   R10, R6
        MOV.W   #0x8, R7
        MOV.W   #0xb, 0(SP)
        RPT     #0x2
        RLAX.B  R4
        JMP     ??create_name_6
??create_name_35:
        CMP.W   #0x80, R8
        JNC     ??create_name_38
        MOV.W   #0x0, R13
        MOV.W   R8, R12
        CALLA   #ff_convert
        MOV.W   R12, R8
        CMP.W   #0x0, R8
        JEQ     ??create_name_39
        ADD.W   #0xff80, R8
        MOVX.B  ??excvt(R8), R8
        MOV.B   R8, R8
??create_name_39:
        BIS.B   #0x2, R11
??create_name_38:
        CMP.W   #0x0, R8
        JEQ     ??create_name_40
        MOV.W   R8, R13
        MOVA    #`?<Constant "+,;=[]">`, R12
        CALLA   #chk_chr
        CMP.W   #0x0, R12
        JEQ     ??create_name_41
??create_name_40:
        MOV.W   #0x5f, R8
        BIS.B   #0x3, R11
        JMP     ??create_name_42
??create_name_41:
        CMP.W   #0x41, R8
        JNC     ??create_name_43
        CMP.W   #0x5b, R8
        JC      ??create_name_43
        BIS.B   #0x2, R4
        JMP     ??create_name_42
??create_name_43:
        CMP.W   #0x61, R8
        JNC     ??create_name_42
        CMP.W   #0x7b, R8
        JC      ??create_name_42
        BIS.B   #0x1, R4
        ADD.W   #0xffe0, R8
??create_name_42:
        MOVA    0x18(R5), R15
        ADDA    R7, R15
        MOV.B   R8, 0(R15)
        ADD.W   #0x1, R7
        JMP     ??create_name_6
??create_name_10:
        MOVA    0x18(R5), R15
        CMP.B   #0xe5, 0(R15)
        JNE     ??create_name_44
        MOVA    0x18(R5), R15
        MOV.B   #0x5, 0(R15)
??create_name_44:
        CMP.W   #0x8, 0(SP)
        JNE     ??create_name_45
        RPT     #0x2
        RLAX.B  R4
??create_name_45:
        MOV.B   R4, R14
        AND.B   #0xc, R14
        CMP.B   #0xc, R14
        JEQ     ??create_name_46
        MOV.B   R4, R14
        AND.B   #0x3, R14
        CMP.B   #0x3, R14
        JNE     ??create_name_47
??create_name_46:
        BIS.B   #0x2, R11
??create_name_47:
        BIT.B   #0x2, R11
        JC      ??create_name_48
        MOV.B   R4, R14
        AND.B   #0x3, R14
        CMP.B   #0x1, R14
        JNE     ??create_name_49
        BIS.B   #0x10, R11
??create_name_49:
        MOV.B   R4, R14
        AND.B   #0xc, R14
        CMP.B   #0x4, R14
        JNE     ??create_name_48
        BIS.B   #0x8, R11
??create_name_48:
        MOVA    0x18(R5), R15
        MOV.B   R11, 0xb(R15)
        MOV.B   #0x0, R12
??create_name_19:
        ADD.W   #0xa, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock25

        RSEG DATA20_C:CONST:SORT:NOROOT(0)
??excvt:
        DC8 128, 154, 144, 65, 142, 65, 143, 128, 69, 69, 69, 73, 73, 73, 142
        DC8 143, 144, 146, 146, 79, 153, 79, 85, 85, 89, 153, 154, 155, 156
        DC8 157, 158, 159, 65, 73, 79, 85, 165, 165, 166, 167, 168, 169, 170
        DC8 171, 172, 33, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184
        DC8 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197
        DC8 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210
        DC8 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223
        DC8 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236
        DC8 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249
        DC8 250, 251, 252, 253, 254, 255

        RSEG CODE:CODE:REORDER:NOROOT(1)
get_fileinfo:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function get_fileinfo
        FUNCALL get_fileinfo, ff_convert
        LOCFRAME CSTACK, 42, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x6, SP
          CFI CFA SP+42
        MOVA    R12, R7
        MOVA    R13, R10
        MOVA    R10, R15
        ADDA    #0x9, R15
        MOVA    R15, R6
        MOV.W   0x10(R7), R15
        BIS.W   0x12(R7), R15
        CMP.W   #0x0, R15
        JEQ     ??get_fileinfo_7
        MOVA    0x14(R7), R11
        MOV.B   0xc(R11), 0(SP)
        MOV.W   #0x0, R9
??get_fileinfo_0:
        CMP.W   #0x8, R9
        JC      ??get_fileinfo_4
        MOVA    R11, R15
        ADDA    R9, R15
        MOV.B   @R15, R8
        CMP.B   #0x20, R8
        JEQ     ??get_fileinfo_4
        CMP.B   #0x5, R8
        JNE     ??get_fileinfo_8
        MOV.B   #0xe5, R8
??get_fileinfo_8:
        BIT.B   #0x8, 0(SP)
        JNC     ??get_fileinfo_9
        CMP.B   #0x41, R8
        JNC     ??get_fileinfo_9
        CMP.B   #0x5b, R8
        JC      ??get_fileinfo_9
        ADD.B   #0x20, R8
??get_fileinfo_9:
        MOV.B   R8, 0(R6)
        ADDA    #0x1, R6
        ADD.W   #0x1, R9
        JMP     ??get_fileinfo_0
??get_fileinfo_4:
        CMP.B   #0x20, 0x8(R11)
        JEQ     ??get_fileinfo_6
        MOV.B   #0x2e, 0(R6)
        ADDA    #0x1, R6
        MOV.W   #0x8, R9
??get_fileinfo_1:
        CMP.W   #0xb, R9
        JC      ??get_fileinfo_6
        MOVA    R11, R15
        ADDA    R9, R15
        MOV.B   @R15, R8
        CMP.B   #0x20, R8
        JEQ     ??get_fileinfo_6
        BIT.B   #0x10, 0(SP)
        JNC     ??get_fileinfo_10
        CMP.B   #0x41, R8
        JNC     ??get_fileinfo_10
        CMP.B   #0x5b, R8
        JC      ??get_fileinfo_10
        ADD.B   #0x20, R8
??get_fileinfo_10:
        MOV.B   R8, 0(R6)
        ADDA    #0x1, R6
        ADD.W   #0x1, R9
        JMP     ??get_fileinfo_1
??get_fileinfo_6:
        MOV.B   0xb(R11), 0x8(R10)
        MOV.B   0x1c(R11), R5
        MOV.B   R5, R5
        MOV.B   0x1d(R11), R4
        MOV.B   R4, R4
        AND.W   #0xff, R4
        SWPB    R4
        MOV.B   0x1e(R11), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x1f(R11), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        BIS.W   R4, R14
        BIS.W   R5, R14
        MOV.W   R14, 0(R10)
        MOV.W   R15, 0x2(R10)
        MOV.B   0x18(R11), R14
        MOV.B   R14, R14
        MOV.B   0x19(R11), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        MOV.W   R15, 0x4(R10)
        MOV.B   0x16(R11), R14
        MOV.B   R14, R14
        MOV.B   0x17(R11), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        MOV.W   R15, 0x6(R10)
??get_fileinfo_7:
        MOV.B   #0x0, 0(R6)
        MOVA    0x16(R10), R15
        CMPA    #0x0, R15
        JEQ     ??get_fileinfo_11
        CMP.W   #0x0, 0x1a(R10)
        JEQ     ??get_fileinfo_11
        MOVX.A  0x16(R10), 0x2(SP)
        MOV.W   #0x0, R9
        MOV.W   0x10(R7), R15
        BIS.W   0x12(R7), R15
        CMP.W   #0x0, R15
        JEQ     ??get_fileinfo_12
        CMP.W   #0xffff, 0x20(R7)
        JEQ     ??get_fileinfo_12
        MOVA    0x1c(R7), R4
??get_fileinfo_2:
        MOV.W   @R4, R15
        ADDA    #0x2, R4
        MOV.W   R15, R5
        CMP.W   #0x0, R15
        JEQ     ??get_fileinfo_12
        MOV.W   #0x0, R13
        MOV.W   R5, R12
        CALLA   #ff_convert
        MOV.W   R12, R5
        CMP.W   #0x0, R5
        JNE     ??get_fileinfo_13
        MOV.W   #0x0, R9
        JMP     ??get_fileinfo_12
??get_fileinfo_13:
        MOV.W   0x1a(R10), R15
        ADD.W   #0xffff, R15
        CMP.W   R15, R9
        JNC     ??get_fileinfo_14
        MOV.W   #0x0, R9
        JMP     ??get_fileinfo_12
??get_fileinfo_14:
        MOVA    0x2(SP), R15
        ADDA    R9, R15
        MOV.B   R5, 0(R15)
        ADD.W   #0x1, R9
        JMP     ??get_fileinfo_2
??get_fileinfo_12:
        MOVA    0x2(SP), R15
        ADDA    R9, R15
        MOV.B   #0x0, 0(R15)
??get_fileinfo_11:
        ADD.W   #0x6, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock26

        RSEG CODE:CODE:REORDER:NOROOT(1)
follow_path:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function follow_path
        FUNCALL follow_path, dir_sdi
        LOCFRAME CSTACK, 24, STACK
        FUNCALL follow_path, create_name
        LOCFRAME CSTACK, 24, STACK
        FUNCALL follow_path, dir_find
        LOCFRAME CSTACK, 24, STACK
        FUNCALL follow_path, ld_clust
        LOCFRAME CSTACK, 24, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        PUSHM.A #0x1, R13
          CFI CFA SP+24
        MOVA    R12, R10
        MOVA    @SP, R15
        CMP.B   #0x2f, 0(R15)
        JEQ     ??follow_path_6
        MOVA    @SP, R15
        CMP.B   #0x5c, 0(R15)
        JNE     ??follow_path_7
??follow_path_6:
        MOVA    @SP, R15
        ADDA    #0x1, R15
        MOVA    R15, 0(SP)
        MOV.W   #0x0, 0x8(R10)
        MOV.W   #0x0, 0xa(R10)
        JMP     ??follow_path_8
??follow_path_7:
        MOVA    @R10, R15
        MOV.W   0x16(R15), 0x8(R10)
        MOV.W   0x18(R15), 0xa(R10)
??follow_path_8:
        MOVA    @SP, R15
        CMP.B   #0x20, 0(R15)
        JC      ??follow_path_0
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R11
        MOVX.A  #0x0, 0x14(R10)
        JMP     ??follow_path_2
??follow_path_0:
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #create_name
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??follow_path_2
        MOVA    R10, R12
        CALLA   #dir_find
        MOV.B   R12, R11
        MOVA    0x18(R10), R15
        MOV.B   0xb(R15), R9
        CMP.B   #0x0, R11
        JEQ     ??follow_path_9
        CMP.B   #0x4, R11
        JNE     ??follow_path_2
        BIT.B   #0x20, R9
        JNC     ??follow_path_10
        MOV.W   #0x0, 0x8(R10)
        MOV.W   #0x0, 0xa(R10)
        MOVX.A  #0x0, 0x14(R10)
        MOV.B   #0x0, R11
        BIT.B   #0x4, R9
        JC      ??follow_path_2
        JMP     ??follow_path_0
??follow_path_10:
        BIT.B   #0x4, R9
        JC      ??follow_path_2
        MOV.B   #0x5, R11
        JMP     ??follow_path_2
??follow_path_9:
        BIT.B   #0x4, R9
        JC      ??follow_path_2
        MOVA    0x14(R10), R8
        BIT.B   #0x10, 0xb(R8)
        JC      ??follow_path_11
        MOV.B   #0x5, R11
        JMP     ??follow_path_2
??follow_path_11:
        MOVA    R8, R13
        MOVA    @R10, R12
        CALLA   #ld_clust
        MOV.W   R12, 0x8(R10)
        MOV.W   R13, 0xa(R10)
        JMP     ??follow_path_0
??follow_path_2:
        MOV.B   R11, R12
        ADD.W   #0x4, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock27

        RSEG CODE:CODE:REORDER:NOROOT(1)
check_fs:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function check_fs
        FUNCALL check_fs, disk_read
        LOCFRAME CSTACK, 22, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R8
        MOV.W   R14, R10
        MOV.W   R15, R11
        PUSH.B  #0x1
          CFI CFA SP+22
        MOV.W   R10, R14
        MOV.W   R11, R15
        MOVA    R8, R13
        ADDA    #0x32, R13
        MOV.B   0x1(R8), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+20
        CMP.B   #0x0, R12
        JEQ     ??check_fs_0
        MOV.B   #0x3, R12
        JMP     ??check_fs_1
??check_fs_0:
        MOV.B   0x230(R8), R14
        MOV.B   R14, R14
        MOV.B   0x231(R8), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        CMP.W   #0xaa55, R15
        JEQ     ??check_fs_2
        MOV.B   #0x2, R12
        JMP     ??check_fs_1
??check_fs_2:
        MOV.B   0x68(R8), R13
        MOV.B   R13, R13
        MOV.B   0x69(R8), R14
        MOV.B   R14, R14
        AND.W   #0xff, R14
        SWPB    R14
        MOV.B   0x6a(R8), R15
        MOV.B   R15, R15
        BIS.W   R13, R14
        CMP.W   #0x4146, R14
        JNE     ??check_fs_3
        CMP.W   #0x54, R15
        JNE     ??check_fs_3
        MOV.B   #0x0, R12
        JMP     ??check_fs_1
??check_fs_3:
        MOV.B   0x84(R8), R13
        MOV.B   R13, R13
        MOV.B   0x85(R8), R14
        MOV.B   R14, R14
        AND.W   #0xff, R14
        SWPB    R14
        MOV.B   0x86(R8), R15
        MOV.B   R15, R15
        BIS.W   R13, R14
        CMP.W   #0x4146, R14
        JNE     ??check_fs_4
        CMP.W   #0x54, R15
        JNE     ??check_fs_4
        MOV.B   #0x0, R12
        JMP     ??check_fs_1
??check_fs_4:
        MOV.B   #0x1, R12
??check_fs_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock28

        RSEG CODE:CODE:REORDER:NOROOT(1)
chk_mounted:
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function chk_mounted
        FUNCALL chk_mounted, disk_status
        LOCFRAME CSTACK, 72, STACK
        FUNCALL chk_mounted, disk_initialize
        LOCFRAME CSTACK, 72, STACK
        FUNCALL chk_mounted, check_fs
        LOCFRAME CSTACK, 72, STACK
        FUNCALL chk_mounted, check_fs
        LOCFRAME CSTACK, 72, STACK
        FUNCALL chk_mounted, disk_read
        LOCFRAME CSTACK, 74, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R12
          CFI CFA SP+40
        PUSHM.A #0x1, R13
          CFI CFA SP+44
        PUSH.B  R14
          CFI CFA SP+46
        SUB.W   #0x1a, SP
          CFI CFA SP+72
        MOVA    0x20(SP), R15
        MOVX.A  @R15, 0x6(SP)
        MOVA    0x6(SP), R15
        MOV.B   @R15, R15
        MOV.B   R15, R15
        ADD.W   #0xffd0, R15
        MOV.W   R15, 0x2(SP)
        CMP.W   #0xa, 0x2(SP)
        JC      ??chk_mounted_0
        MOVA    0x6(SP), R15
        CMP.B   #0x3a, 0x1(R15)
        JNE     ??chk_mounted_0
        MOVA    0x6(SP), R15
        ADDA    #0x2, R15
        MOVA    R15, 0x6(SP)
        MOVA    0x6(SP), R15
        MOVA    0x20(SP), R14
        MOVA    R15, 0(R14)
        JMP     ??chk_mounted_1
??chk_mounted_0:
        MOVX.B  &CurrVol, R15
        MOV.B   R15, R15
        MOV.W   R15, 0x2(SP)
??chk_mounted_1:
        MOVA    0x1c(SP), R15
        MOVX.A  #0x0, 0(R15)
        CMP.W   #0x0, 0x2(SP)
        JEQ     ??chk_mounted_2
        MOV.B   #0xb, R12
        BRA     #??chk_mounted_3
??chk_mounted_2:
        MOV.W   0x2(SP), R15
        RLAM.A  #0x2, R15
        MOVX.A  FatFs(R15), R10
        CMPA    #0x0, R10
        JNE     ??chk_mounted_4
        MOV.B   #0xc, R12
        BRA     #??chk_mounted_3
??chk_mounted_4:
        MOVA    0x1c(SP), R15
        MOVA    R10, 0(R15)
        CMP.B   #0x0, 0(R10)
        JEQ     ??chk_mounted_5
        MOV.B   0x1(R10), R12
        CALLA   #disk_status
        MOV.B   R12, 0(SP)
        BIT.B   #0x1, 0(SP)
        JC      ??chk_mounted_5
        CMP.B   #0x0, 0x1a(SP)
        JEQ     ??chk_mounted_6
        BIT.B   #0x4, 0(SP)
        JNC     ??chk_mounted_6
        MOV.B   #0xa, R12
        BRA     #??chk_mounted_3
??chk_mounted_6:
        MOV.B   #0x0, R12
        BRA     #??chk_mounted_3
??chk_mounted_5:
        MOV.B   #0x0, 0(R10)
        MOV.B   0x2(SP), 0x1(R10)
        MOV.B   0x1(R10), R12
        CALLA   #disk_initialize
        MOV.B   R12, 0(SP)
        BIT.B   #0x1, 0(SP)
        JNC     ??chk_mounted_7
        MOV.B   #0x3, R12
        BRA     #??chk_mounted_3
??chk_mounted_7:
        CMP.B   #0x0, 0x1a(SP)
        JEQ     ??chk_mounted_8
        BIT.B   #0x4, 0(SP)
        JNC     ??chk_mounted_8
        MOV.B   #0xa, R12
        BRA     #??chk_mounted_3
??chk_mounted_8:
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R6
        MOV.W   R15, R7
        MOVA    R10, R12
        CALLA   #check_fs
        MOV.B   R12, R11
        CMP.B   #0x1, R11
        JNE     ??chk_mounted_9
        MOV.B   #0x0, 0x1(SP)
        CMP.B   #0x0, 0x1(SP)
        JEQ     ??chk_mounted_10
        MOV.B   0x1(SP), R14
        ADD.B   #0xff, R14
        MOV.B   R14, 0x1(SP)
??chk_mounted_10:
        MOV.B   0x1(SP), R15
        MOV.B   R15, R15
        RLAM.W  #0x4, R15
        ADD.W   #0x1be, R15
        MOV.W   R15, R14
        XOR.W   #0x8000, R14
        SUBA    #0x8000, R14
        MOVA    R10, R15
        ADDA    R14, R15
        ADDA    #0x32, R15
        MOVA    R15, R4
        CMP.B   #0x0, 0x4(R4)
        JEQ     ??chk_mounted_9
        MOV.B   0x8(R4), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x9(R4), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0xa(R4), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0xb(R4), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        MOV.W   R14, R6
        MOV.W   R15, R7
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    R10, R12
        CALLA   #check_fs
        MOV.B   R12, R11
??chk_mounted_9:
        CMP.B   #0x3, R11
        JNE     ??chk_mounted_11
        MOV.B   #0x1, R12
        BRA     #??chk_mounted_3
??chk_mounted_11:
        CMP.B   #0x0, R11
        JEQ     ??chk_mounted_12
        MOV.B   #0xd, R12
        BRA     #??chk_mounted_3
??chk_mounted_12:
        MOV.B   0x3d(R10), R14
        MOV.B   R14, R14
        MOV.B   0x3e(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        CMP.W   #0x200, R15
        JEQ     ??chk_mounted_13
        MOV.B   #0xd, R12
        BRA     #??chk_mounted_3
??chk_mounted_13:
        MOV.B   0x48(R10), R15
        MOV.B   R15, R15
        MOV.B   0x49(R10), R14
        MOV.B   R14, R14
        AND.W   #0xff, R14
        SWPB    R14
        BIS.W   R15, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R8
        MOV.W   R15, R9
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JNE     ??chk_mounted_14
        MOV.B   0x56(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x57(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x58(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x59(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        MOV.W   R14, R8
        MOV.W   R15, R9
??chk_mounted_14:
        MOV.W   R8, 0x1e(R10)
        MOV.W   R9, 0x20(R10)
        MOV.B   0x42(R10), R14
        MOV.B   R14, R5
        MOV.B   R14, 0x3(R10)
        CMP.B   #0x1, R5
        JEQ     ??chk_mounted_15
        CMP.B   #0x2, R5
        JEQ     ??chk_mounted_15
        MOV.B   #0xd, R12
        BRA     #??chk_mounted_3
??chk_mounted_15:
        MOV.W   R8, R12
        MOV.W   R9, R13
        MOV.B   R5, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.B   0x3f(R10), R14
        MOV.B   R14, R5
        MOV.B   R14, 0x2(R10)
        CMP.B   #0x0, R5
        JEQ     ??chk_mounted_16
        MOV.B   R5, R14
        ADD.B   #0xff, R14
        BIT.B   R14, R5
        JEQ     ??chk_mounted_17
??chk_mounted_16:
        MOV.B   #0xd, R12
        BRA     #??chk_mounted_3
??chk_mounted_17:
        MOV.B   0x43(R10), R14
        MOV.B   R14, R14
        MOV.B   0x44(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        MOV.W   R15, 0x8(R10)
        MOV.W   0x8(R10), R12
        MOV.W   #0x10, R14
        CALLA   #?DivMod16u
        CMP.W   #0x0, R14
        JEQ     ??chk_mounted_18
        MOV.B   #0xd, R12
        BRA     #??chk_mounted_3
??chk_mounted_18:
        MOV.B   0x45(R10), R15
        MOV.B   R15, R15
        MOV.B   0x46(R10), R14
        MOV.B   R14, R14
        AND.W   #0xff, R14
        SWPB    R14
        BIS.W   R15, R14
        MOV.W   #0x0, R15
        MOV.W   R14, 0xe(SP)
        MOV.W   R15, 0x10(SP)
        MOV.W   0xe(SP), R15
        BIS.W   0x10(SP), R15
        CMP.W   #0x0, R15
        JNE     ??chk_mounted_19
        MOV.B   0x52(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x53(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x54(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x55(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        MOV.W   R14, 0xe(SP)
        MOV.W   R15, 0x10(SP)
??chk_mounted_19:
        MOV.B   0x40(R10), R14
        MOV.B   R14, R14
        MOV.B   0x41(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        MOV.W   R15, 0x4(SP)
        CMP.W   #0x0, 0x4(SP)
        JNE     ??chk_mounted_20
        MOV.B   #0xd, R12
        JMP     ??chk_mounted_3
??chk_mounted_20:
        MOV.W   0x4(SP), R14
        MOV.W   #0x0, R15
        ADD.W   R8, R14
        ADDC.W  R9, R15
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.W   0x8(R10), R14
        RRUM.W  #0x4, R14
        MOV.W   #0x0, R15
        ADD.W   R14, R12
        ADDC.W  R15, R13
        MOV.W   R12, 0x16(SP)
        MOV.W   R13, 0x18(SP)
        CMP.W   0x18(SP), 0x10(SP)
        JNC     ??chk_mounted_21
        JNE     ??chk_mounted_22
        CMP.W   0x16(SP), 0xe(SP)
        JC      ??chk_mounted_22
??chk_mounted_21:
        MOV.B   #0xd, R12
        JMP     ??chk_mounted_3
??chk_mounted_22:
        MOV.W   0xe(SP), R12
        MOV.W   0x10(SP), R13
        SUB.W   0x16(SP), R12
        SUBC.W  0x18(SP), R13
        MOV.B   0x2(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R12, 0xa(SP)
        MOV.W   R13, 0xc(SP)
        MOV.W   0xa(SP), R15
        BIS.W   0xc(SP), R15
        CMP.W   #0x0, R15
        JNE     ??chk_mounted_23
        MOV.B   #0xd, R12
        JMP     ??chk_mounted_3
??chk_mounted_23:
        MOV.B   #0x1, R11
        CMP.W   #0x0, 0xc(SP)
        JNC     ??chk_mounted_24
        JNE     ??chk_mounted_25
        CMP.W   #0xff6, 0xa(SP)
        JNC     ??chk_mounted_24
??chk_mounted_25:
        MOV.B   #0x2, R11
??chk_mounted_24:
        CMP.W   #0x0, 0xc(SP)
        JNC     ??chk_mounted_26
        JNE     ??chk_mounted_27
        CMP.W   #0xfff6, 0xa(SP)
        JNC     ??chk_mounted_26
??chk_mounted_27:
        MOV.B   #0x3, R11
??chk_mounted_26:
        MOV.W   0xa(SP), R14
        MOV.W   0xc(SP), R15
        ADD.W   #0x2, R14
        ADDC.W  #0x0, R15
        MOV.W   R14, 0x1a(R10)
        MOV.W   R15, 0x1c(R10)
        MOV.W   R6, R14
        MOV.W   R7, R15
        ADD.W   0x16(SP), R14
        ADDC.W  0x18(SP), R15
        MOV.W   R14, 0x2a(R10)
        MOV.W   R15, 0x2c(R10)
        MOV.W   0x4(SP), R14
        MOV.W   #0x0, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        ADD.W   R14, R12
        ADDC.W  R15, R13
        MOV.W   R12, 0x22(R10)
        MOV.W   R13, 0x24(R10)
        CMP.B   #0x3, R11
        JNE     ??chk_mounted_28
        CMP.W   #0x0, 0x8(R10)
        JEQ     ??chk_mounted_29
        MOV.B   #0xd, R12
        JMP     ??chk_mounted_3
??chk_mounted_29:
        MOV.B   0x5e(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x5f(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x60(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x61(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        MOV.W   R14, 0x26(R10)
        MOV.W   R15, 0x28(R10)
        MOV.W   0x1a(R10), R12
        MOV.W   0x1c(R10), R13
        MOV.W   #0x4, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   R12, 0x12(SP)
        MOV.W   R13, 0x14(SP)
        JMP     ??chk_mounted_30
??chk_mounted_28:
        CMP.W   #0x0, 0x8(R10)
        JNE     ??chk_mounted_31
        MOV.B   #0xd, R12
        JMP     ??chk_mounted_3
??chk_mounted_31:
        MOV.W   R8, R14
        MOV.W   R9, R15
        ADD.W   0x22(R10), R14
        ADDC.W  0x24(R10), R15
        MOV.W   R14, 0x26(R10)
        MOV.W   R15, 0x28(R10)
        CMP.B   #0x2, R11
        JNE     ??chk_mounted_32
        MOV.W   0x1a(R10), R12
        MOV.W   0x1c(R10), R13
        MOV.W   #0x2, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   R12, 0x12(SP)
        MOV.W   R13, 0x14(SP)
        JMP     ??chk_mounted_30
??chk_mounted_32:
        MOV.W   0x1a(R10), R12
        MOV.W   0x1c(R10), R13
        MOV.W   #0x3, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        RRUM.W  #0x1, R13
        RRC.W   R12
        MOV.W   0x1a(R10), R14
        MOV.W   0x1c(R10), R15
        AND.W   #0x1, R14
        AND.W   #0x0, R15
        ADD.W   R14, R12
        ADDC.W  R15, R13
        MOV.W   R12, 0x12(SP)
        MOV.W   R13, 0x14(SP)
??chk_mounted_30:
        MOV.W   0x12(SP), R12
        MOV.W   0x14(SP), R13
        ADD.W   #0x1ff, R12
        ADDC.W  #0x0, R13
        CALLA   #?ShiftRight32u_9
        CMP.W   R13, 0x20(R10)
        JNC     ??chk_mounted_33
        JNE     ??chk_mounted_34
        CMP.W   R12, 0x1e(R10)
        JC      ??chk_mounted_34
??chk_mounted_33:
        MOV.B   #0xd, R12
        JMP     ??chk_mounted_3
??chk_mounted_34:
        MOV.W   #0xffff, 0xe(R10)
        MOV.W   #0xffff, 0x10(R10)
        MOV.W   #0x0, 0xa(R10)
        MOV.W   #0x0, 0xc(R10)
        CMP.B   #0x3, R11
        JNE     ??chk_mounted_35
        MOV.B   #0x0, 0x5(R10)
        MOV.B   0x62(R10), R15
        MOV.B   R15, R15
        MOV.B   0x63(R10), R14
        MOV.B   R14, R14
        AND.W   #0xff, R14
        SWPB    R14
        BIS.W   R15, R14
        MOV.W   #0x0, R15
        MOV.W   R6, R12
        MOV.W   R7, R13
        ADD.W   R14, R12
        ADDC.W  R15, R13
        MOV.W   R12, 0x12(R10)
        MOV.W   R13, 0x14(R10)
        PUSH.B  #0x1
          CFI CFA SP+74
        MOV.W   0x12(R10), R14
        MOV.W   0x14(R10), R15
        MOVA    R10, R13
        ADDA    #0x32, R13
        MOV.B   0x1(R10), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+72
        CMP.B   #0x0, R12
        JNE     ??chk_mounted_35
        MOV.B   0x230(R10), R14
        MOV.B   R14, R14
        MOV.B   0x231(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        CMP.W   #0xaa55, R15
        JNE     ??chk_mounted_35
        MOV.B   0x32(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x33(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x34(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x35(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        CMP.W   #0x5252, R14
        JNE     ??chk_mounted_35
        CMP.W   #0x4161, R15
        JNE     ??chk_mounted_35
        MOV.B   0x216(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x217(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x218(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x219(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        CMP.W   #0x7272, R14
        JNE     ??chk_mounted_35
        CMP.W   #0x6141, R15
        JNE     ??chk_mounted_35
        MOV.B   0x21e(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x21f(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x220(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x221(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        MOV.W   R14, 0xa(R10)
        MOV.W   R15, 0xc(R10)
        MOV.B   0x21a(R10), R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+74
        MOV.B   0x21b(R10), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+76
        MOV.B   0x21c(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x21d(R10), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+74
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+72
        BIS.W   R13, R14
        MOV.W   R14, 0xe(R10)
        MOV.W   R15, 0x10(R10)
??chk_mounted_35:
        MOV.B   R11, 0(R10)
        MOV.W   #0x1, R15
        ADDX.W  &Fsid, R15
        MOVX.W  R15, &Fsid
        MOV.W   R15, 0x6(R10)
        MOV.W   #0x0, 0x2e(R10)
        MOV.W   #0x0, 0x30(R10)
        MOV.B   #0x0, 0x4(R10)
        MOV.W   #0x0, 0x16(R10)
        MOV.W   #0x0, 0x18(R10)
        MOV.B   #0x0, R12
??chk_mounted_3:
        ADD.W   #0x24, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock29

        RSEG CODE:CODE:REORDER:NOROOT(1)
validate:
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function validate
        FUNCALL validate, disk_status
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
        MOVA    R10, R11
        MOVA    @R11, R15
        CMPA    #0x0, R15
        JEQ     ??validate_0
        MOVA    @R11, R15
        CMP.B   #0x0, 0(R15)
        JEQ     ??validate_0
        MOVA    @R11, R15
        CMP.W   0x4(R11), 0x6(R15)
        JEQ     ??validate_1
??validate_0:
        MOV.B   #0x9, R12
        JMP     ??validate_2
??validate_1:
        MOVA    @R11, R15
        MOV.B   0x1(R15), R12
        CALLA   #disk_status
        BIT.B   #0x1, R12
        JNC     ??validate_3
        MOV.B   #0x3, R12
        JMP     ??validate_2
??validate_3:
        MOV.B   #0x0, R12
??validate_2:
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock30

        RSEG CODE:CODE:REORDER:NOROOT(1)
scan_files:
          CFI Block cfiBlock31 Using cfiCommon0
          CFI Function scan_files
        FUNCALL scan_files, f_opendir
        LOCFRAME CSTACK, 82, STACK
        FUNCALL scan_files, strlen
        LOCFRAME CSTACK, 82, STACK
        FUNCALL scan_files, f_readdir
        LOCFRAME CSTACK, 82, STACK
        FUNCALL scan_files, sprintf
        LOCFRAME CSTACK, 86, STACK
        FUNCALL scan_files, scan_files
        LOCFRAME CSTACK, 86, STACK
        FUNCALL scan_files, printf
        LOCFRAME CSTACK, 90, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        SUB.W   #0x3e, SP
          CFI CFA SP+82
        MOVA    R12, R11
        MOVX.A  #??lfn, 0x16(SP)
        MOV.W   #0x65, 0x1a(SP)
        MOVA    R11, R13
        MOV.W   SP, R12
        ADD.W   #0x1c, R12
        CALLA   #f_opendir
        MOV.B   R12, R8
        CMP.B   #0x0, R8
        JNE     ??scan_files_2
        MOVA    R11, R12
        CALLA   #strlen
        MOV.W   R12, R10
??scan_files_0:
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x1c, R12
        CALLA   #f_readdir
        MOV.B   R12, R8
        CMP.B   #0x0, R8
        JNE     ??scan_files_2
        CMP.B   #0x0, 0x9(SP)
        JEQ     ??scan_files_2
        CMP.B   #0x2e, 0x9(SP)
        JEQ     ??scan_files_0
        MOVA    0x16(SP), R15
        CMP.B   #0x0, 0(R15)
        JEQ     ??scan_files_6
        MOVA    0x16(SP), R9
        JMP     ??scan_files_7
??scan_files_6:
        MOV.W   SP, R9
        ADD.W   #0x9, R9
??scan_files_7:
        BIT.B   #0x10, 0x8(SP)
        JNC     ??scan_files_8
        PUSHM.A #0x1, R9
          CFI CFA SP+86
        MOVA    #`?<Constant "/%s">`, R13
        MOV.W   R10, R15
        XOR.W   #0x8000, R15
        SUBA    #0x8000, R15
        MOVA    R11, R12
        ADDA    R15, R12
        CALLA   #sprintf
        MOVA    R11, R12
        CALLA   #scan_files
        MOV.B   R12, R8
        ADD.W   #0x4, SP
          CFI CFA SP+82
        CMP.B   #0x0, R8
        JNE     ??scan_files_2
        MOV.W   R10, R15
        XOR.W   #0x8000, R15
        ADDA    R11, R15
        MOVX.B  #0x0, 0xf8000(R15)
        JMP     ??scan_files_0
??scan_files_8:
        PUSHM.A #0x1, R9
          CFI CFA SP+86
        PUSHM.A #0x1, R11
          CFI CFA SP+90
        MOVA    #`?<Constant "%s/%s\\n">`, R12
        CALLA   #printf
        ADD.W   #0x8, SP
          CFI CFA SP+82
        JMP     ??scan_files_0
??scan_files_2:
        MOV.B   R8, R12
        ADD.W   #0x3e, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock31

        RSEG DATA20_Z:DATA:SORT:NOROOT(0)
        REQUIRE ?cstart_init_zero20
??lfn:
        DS8 101

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_mount:
          CFI Block cfiBlock32 Using cfiCommon0
          CFI Function f_mount
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        MOV.B   R12, R14
        CMP.B   #0x0, R14
        JEQ     ??f_mount_0
        MOV.B   #0xb, R12
        JMP     ??f_mount_1
??f_mount_0:
        MOV.B   R14, R12
        RLAM.A  #0x2, R12
        MOVX.A  FatFs(R12), R15
        CMPA    #0x0, R15
        JEQ     ??f_mount_2
        MOV.B   #0x0, 0(R15)
??f_mount_2:
        CMPA    #0x0, R13
        JEQ     ??f_mount_3
        MOV.B   #0x0, 0(R13)
??f_mount_3:
        MOV.B   R14, R10
        RLAM.A  #0x2, R10
        MOVX.A  R13, FatFs(R10)
        MOV.B   #0x0, R12
??f_mount_1:
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock32

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_open:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI Function f_open
        FUNCALL f_open, chk_mounted
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, follow_path
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, dir_register
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, get_fattime
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, ld_clust
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, st_clust
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, remove_chain
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, move_window
        LOCFRAME CSTACK, 288, STACK
        FUNCALL f_open, ld_clust
        LOCFRAME CSTACK, 288, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R13
          CFI CFA SP+40
        SUB.W   #0xf8, SP
          CFI CFA SP+288
        MOVA    R12, R8
        MOV.B   R14, R9
        CMPA    #0x0, R8
        JNE     ??f_open_0
        MOV.B   #0x9, R12
        JMP     ??f_open_1
??f_open_0:
        MOVX.A  #0x0, 0(R8)
        AND.B   #0x1f, R9
        MOV.B   R9, R14
        AND.B   #0xfe, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0xf8, R12
        CALLA   #chk_mounted
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_open_2
        MOV.W   SP, R15
        ADD.W   #0x22, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x2e, R15
        MOVA    R15, 0x1c(SP)
        MOVA    0xf8(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #follow_path
        MOV.B   R12, R10
        MOVA    0x14(SP), R11
        CMP.B   #0x0, R10
        JNE     ??f_open_3
        CMPA    #0x0, R11
        JNE     ??f_open_3
        MOV.B   #0x6, R10
??f_open_3:
        BIT.B   #0x1c, R9
        JEQ     ??f_open_4
        CMP.B   #0x0, R10
        JEQ     ??f_open_5
        CMP.B   #0x4, R10
        JNE     ??f_open_6
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_register
        MOV.B   R12, R10
??f_open_6:
        BIS.B   #0x8, R9
        MOVA    0x14(SP), R11
        JMP     ??f_open_7
??f_open_5:
        BIT.B   #0x11, 0xb(R11)
        JEQ     ??f_open_8
        MOV.B   #0x7, R10
        JMP     ??f_open_7
??f_open_8:
        BIT.B   #0x4, R9
        JNC     ??f_open_7
        MOV.B   #0x8, R10
??f_open_7:
        CMP.B   #0x0, R10
        JNE     ??f_open_9
        BIT.B   #0x8, R9
        JNC     ??f_open_9
        CALLA   #get_fattime
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.B   R6, 0xe(R11)
        MOV.W   R6, R15
        SWPB    R15
        AND.W   #0xff, R15
        MOV.B   R15, 0xf(R11)
        MOV.B   R7, 0x10(R11)
        MOV.W   R6, R14
        MOV.W   R7, R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x11(R11)
        MOV.B   #0x0, 0xb(R11)
        MOV.B   #0x0, 0x1c(R11)
        MOV.B   #0x0, 0x1d(R11)
        MOV.B   #0x0, 0x1e(R11)
        MOV.B   #0x0, 0x1f(R11)
        MOVA    R11, R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    R11, R12
        CALLA   #st_clust
        MOVA    @SP, R15
        MOV.B   #0x1, 0x4(R15)
        MOV.W   R4, R15
        BIS.W   R5, R15
        CMP.W   #0x0, R15
        JEQ     ??f_open_9
        MOVA    @SP, R15
        MOV.W   0x2e(R15), R6
        MOV.W   0x30(R15), R7
        MOV.W   R4, R14
        MOV.W   R5, R15
        MOVA    @SP, R12
        CALLA   #remove_chain
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_open_9
        MOV.W   R4, R14
        MOV.W   R5, R15
        ADD.W   #0xffff, R14
        ADDC.W  #0xffff, R15
        MOVA    @SP, R13
        MOV.W   R14, 0xa(R13)
        MOV.W   R15, 0xc(R13)
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    @SP, R12
        CALLA   #move_window
        MOV.B   R12, R10
        JMP     ??f_open_9
??f_open_4:
        CMP.B   #0x0, R10
        JNE     ??f_open_9
        BIT.B   #0x10, 0xb(R11)
        JNC     ??f_open_10
        MOV.B   #0x4, R10
        JMP     ??f_open_9
??f_open_10:
        BIT.B   #0x2, R9
        JNC     ??f_open_9
        BIT.B   #0x1, 0xb(R11)
        JNC     ??f_open_9
        MOV.B   #0x7, R10
??f_open_9:
        CMP.B   #0x0, R10
        JNE     ??f_open_11
        BIT.B   #0x8, R9
        JNC     ??f_open_12
        BIS.B   #0x20, R9
??f_open_12:
        MOVA    @SP, R15
        MOV.W   0x2e(R15), 0x1c(R8)
        MOV.W   0x30(R15), 0x1e(R8)
        MOVA    R11, 0x20(R8)
??f_open_11:
        CMP.B   #0x0, R10
        JNE     ??f_open_2
        MOV.B   R9, 0x6(R8)
        MOVA    R11, R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        MOV.W   R12, 0x10(R8)
        MOV.W   R13, 0x12(R8)
        MOV.B   0x1c(R11), R4
        MOV.B   R4, R4
        MOV.B   0x1d(R11), R13
        MOV.B   R13, R13
        AND.W   #0xff, R13
        SWPB    R13
        MOV.B   0x1e(R11), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.B   0x1f(R11), R6
        MOV.B   R6, R6
        MOV.W   #0x0, R7
        AND.W   #0xff, R6
        SWPB    R6
        MOV.W   R6, R7
        MOV.W   #0x0, R6
        BIS.W   R14, R6
        BIS.W   R15, R7
        BIS.W   R13, R6
        BIS.W   R4, R6
        MOV.W   R6, 0xc(R8)
        MOV.W   R7, 0xe(R8)
        MOV.W   #0x0, 0x8(R8)
        MOV.W   #0x0, 0xa(R8)
        MOV.W   #0x0, 0x18(R8)
        MOV.W   #0x0, 0x1a(R8)
        MOVX.A  #0x0, 0x24(R8)
        MOVA    @SP, R15
        MOVA    R15, 0(R8)
        MOVA    @SP, R15
        MOV.W   0x6(R15), 0x4(R8)
??f_open_2:
        MOV.B   R10, R12
??f_open_1:
        ADD.W   #0xfc, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock33

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_read:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function f_read
        FUNCALL f_read, validate
        LOCFRAME CSTACK, 54, STACK
        FUNCALL f_read, clmt_clust
        LOCFRAME CSTACK, 54, STACK
        FUNCALL f_read, get_fat
        LOCFRAME CSTACK, 54, STACK
        FUNCALL f_read, clust2sect
        LOCFRAME CSTACK, 54, STACK
        FUNCALL f_read, disk_read
        LOCFRAME CSTACK, 56, STACK
        FUNCALL f_read, mem_cpy
        LOCFRAME CSTACK, 54, STACK
        FUNCALL f_read, disk_write
        LOCFRAME CSTACK, 56, STACK
        FUNCALL f_read, disk_read
        LOCFRAME CSTACK, 56, STACK
        FUNCALL f_read, mem_cpy
        LOCFRAME CSTACK, 54, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R13
          CFI CFA SP+40
        PUSHM.A #0x1, R15
          CFI CFA SP+44
        SUB.W   #0xa, SP
          CFI CFA SP+54
        MOVA    R12, R10
        MOV.W   R14, R6
        MOVX.A  0xe(SP), 0x2(SP)
        MOVA    0xa(SP), R15
        MOV.W   #0x0, 0(R15)
        MOVA    R10, R12
        CALLA   #validate
        MOV.B   R12, 0x1(SP)
        CMP.B   #0x0, 0x1(SP)
        JEQ     ??f_read_1
        MOV.B   0x1(SP), R12
        JMP     ??f_read_2
??f_read_1:
        CMP.B   #0x0, 0x6(R10)
        JGE     ??f_read_3
        MOV.B   #0x2, R12
        JMP     ??f_read_2
??f_read_3:
        BIT.B   #0x1, 0x6(R10)
        JC      ??f_read_4
        MOV.B   #0x7, R12
        JMP     ??f_read_2
??f_read_4:
        MOV.W   0xc(R10), R14
        MOV.W   0xe(R10), R15
        SUB.W   0x8(R10), R14
        SUBC.W  0xa(R10), R15
        MOV.W   R14, 0x6(SP)
        MOV.W   R15, 0x8(SP)
        MOV.W   R6, R14
        MOV.W   #0x0, R15
        CMP.W   R15, 0x8(SP)
        JNC     ??f_read_5
        JNE     ??f_read_0
        CMP.W   R14, 0x6(SP)
        JC      ??f_read_0
??f_read_5:
        MOV.W   0x6(SP), R6
??f_read_0:
        CMP.W   #0x0, R6
        JEQ     ??f_read_6
        MOV.W   0x8(R10), R12
        MOV.W   0xa(R10), R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        BIS.W   R15, R13
        CMP.W   #0x0, R13
        JNE     ??f_read_7
        MOV.W   0x8(R10), R12
        MOV.W   0xa(R10), R13
        CALLA   #?ShiftRight32u_9
        MOVA    @R10, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        ADD.W   #0xffff, R14
        AND.B   R14, R12
        MOV.B   R12, 0(SP)
        CMP.B   #0x0, 0(SP)
        JNE     ??f_read_8
        MOV.W   0x8(R10), R15
        BIS.W   0xa(R10), R15
        CMP.W   #0x0, R15
        JNE     ??f_read_9
        MOV.W   0x10(R10), R4
        MOV.W   0x12(R10), R5
        JMP     ??f_read_10
??f_read_9:
        MOVA    0x24(R10), R15
        CMPA    #0x0, R15
        JEQ     ??f_read_11
        MOV.W   0x8(R10), R14
        MOV.W   0xa(R10), R15
        MOVA    R10, R12
        CALLA   #clmt_clust
        MOV.W   R12, R4
        MOV.W   R13, R5
        JMP     ??f_read_10
??f_read_11:
        MOV.W   0x14(R10), R14
        MOV.W   0x16(R10), R15
        MOVA    @R10, R12
        CALLA   #get_fat
        MOV.W   R12, R4
        MOV.W   R13, R5
??f_read_10:
        CMP.W   #0x0, R5
        JNC     ??f_read_12
        JNE     ??f_read_13
        CMP.W   #0x2, R4
        JC      ??f_read_13
??f_read_12:
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_read_2
??f_read_13:
        CMP.W   #0xffff, R4
        JNE     ??f_read_14
        CMP.W   #0xffff, R5
        JNE     ??f_read_14
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_read_2
??f_read_14:
        MOV.W   R4, 0x14(R10)
        MOV.W   R5, 0x16(R10)
??f_read_8:
        MOV.W   0x14(R10), R14
        MOV.W   0x16(R10), R15
        MOVA    @R10, R12
        CALLA   #clust2sect
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JNE     ??f_read_15
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_read_2
??f_read_15:
        MOV.B   @SP, R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        ADD.W   R14, R8
        ADDC.W  R15, R9
        MOV.W   R6, R15
        SWPB    R15
        AND.W   #0xff, R15
        RRA.W   R15
        MOV.W   R15, R7
        CMP.W   #0x0, R7
        JEQ     ??f_read_16
        MOVA    @R10, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        MOV.B   @SP, R15
        MOV.B   R15, R15
        ADD.W   R7, R15
        CMP.W   R15, R14
        JC      ??f_read_17
        MOVA    @R10, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        MOV.B   @SP, R15
        MOV.B   R15, R15
        SUB.W   R15, R14
        MOV.W   R14, R7
??f_read_17:
        PUSH.B  R7
          CFI CFA SP+56
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    0x4(SP), R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+54
        CMP.B   #0x0, R12
        JEQ     ??f_read_18
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_read_2
??f_read_18:
        BIT.B   #0x40, 0x6(R10)
        JNC     ??f_read_19
        MOV.W   0x18(R10), R12
        MOV.W   0x1a(R10), R13
        SUB.W   R8, R12
        SUBC.W  R9, R13
        MOV.W   R7, R14
        MOV.W   #0x0, R15
        CMP.W   R15, R13
        JNC     ??f_read_20
        JNE     ??f_read_19
        CMP.W   R14, R12
        JC      ??f_read_19
??f_read_20:
        MOV.W   #0x200, R14
        MOVA    R10, R13
        ADDA    #0x28, R13
        PUSHM.A #0x1, R13
          CFI CFA SP+58
        PUSH.W  R14
          CFI CFA SP+60
        MOVA    0x8(SP), R15
        PUSHM.A #0x1, R15
          CFI CFA SP+64
        MOV.W   0x18(R10), R12
        MOV.W   0x1a(R10), R13
        SUB.W   R8, R12
        SUBC.W  R9, R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        PUSHM.W #0x2, R13
          CFI CFA SP+68
        POPM.A  #0x1, R15
          CFI CFA SP+64
        POPM.A  #0x1, R12
          CFI CFA SP+60
        ADDA    R15, R12
        POP.W   R14
          CFI CFA SP+58
        POPM.A  #0x1, R13
          CFI CFA SP+54
        CALLA   #mem_cpy
??f_read_19:
        MOV.W   R7, R15
        RLA.B   R15
        AND.W   #0xff, R15
        SWPB    R15
        MOV.W   R15, R11
        JMP     ??f_read_21
??f_read_16:
        CMP.W   R8, 0x18(R10)
        JNE     ??f_read_22
        CMP.W   R9, 0x1a(R10)
        JEQ     ??f_read_23
??f_read_22:
        BIT.B   #0x40, 0x6(R10)
        JNC     ??f_read_24
        PUSH.B  #0x1
          CFI CFA SP+56
        MOV.W   0x18(R10), R14
        MOV.W   0x1a(R10), R15
        MOVA    R10, R13
        ADDA    #0x28, R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+54
        CMP.B   #0x0, R12
        JEQ     ??f_read_25
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_read_2
??f_read_25:
        MOVA    R10, R15
        BIC.B   #0x40, 0x6(R15)
??f_read_24:
        PUSH.B  #0x1
          CFI CFA SP+56
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    R10, R13
        ADDA    #0x28, R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+54
        CMP.B   #0x0, R12
        JEQ     ??f_read_23
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_read_2
??f_read_23:
        MOV.W   R8, 0x18(R10)
        MOV.W   R9, 0x1a(R10)
??f_read_7:
        MOV.W   #0x200, R15
        PUSH.W  R15
          CFI CFA SP+56
        MOV.W   0x8(R10), R12
        MOV.W   #0x200, R14
        CALLA   #?DivMod16u
        POP.W   R15
          CFI CFA SP+54
        SUB.W   R14, R15
        MOV.W   R15, R11
        CMP.W   R11, R6
        JC      ??f_read_26
        MOV.W   R6, R11
??f_read_26:
        MOV.W   R11, R14
        PUSH.W  R14
          CFI CFA SP+56
        MOV.W   0x8(R10), R12
        MOV.W   0xa(R10), R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        PUSHM.W #0x2, R15
          CFI CFA SP+60
        POPM.A  #0x1, R15
          CFI CFA SP+56
        MOVA    R10, R13
        ADDA    R15, R13
        ADDA    #0x28, R13
        POP.W   R14
          CFI CFA SP+54
        MOVA    0x2(SP), R12
        CALLA   #mem_cpy
??f_read_21:
        MOVA    0x2(SP), R15
        ADDA    R11, R15
        MOVA    R15, 0x2(SP)
        MOV.W   R11, R14
        MOV.W   #0x0, R15
        ADD.W   R14, 0x8(R10)
        ADDC.W  R15, 0xa(R10)
        MOVA    0xa(SP), R15
        ADD.W   R11, 0(R15)
        SUB.W   R11, R6
        JMP     ??f_read_0
??f_read_6:
        MOV.B   #0x0, R12
??f_read_2:
        ADD.W   #0x12, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock34

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_write:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function f_write
        FUNCALL f_write, validate
        LOCFRAME CSTACK, 50, STACK
        FUNCALL f_write, create_chain
        LOCFRAME CSTACK, 50, STACK
        FUNCALL f_write, clmt_clust
        LOCFRAME CSTACK, 50, STACK
        FUNCALL f_write, create_chain
        LOCFRAME CSTACK, 50, STACK
        FUNCALL f_write, disk_write
        LOCFRAME CSTACK, 52, STACK
        FUNCALL f_write, clust2sect
        LOCFRAME CSTACK, 50, STACK
        FUNCALL f_write, disk_write
        LOCFRAME CSTACK, 52, STACK
        FUNCALL f_write, mem_cpy
        LOCFRAME CSTACK, 50, STACK
        FUNCALL f_write, disk_read
        LOCFRAME CSTACK, 52, STACK
        FUNCALL f_write, mem_cpy
        LOCFRAME CSTACK, 50, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R13
          CFI CFA SP+40
        PUSHM.A #0x1, R15
          CFI CFA SP+44
        SUB.W   #0x6, SP
          CFI CFA SP+50
        MOVA    R12, R10
        MOV.W   R14, R11
        MOVX.A  0xa(SP), 0x2(SP)
        MOVA    0x6(SP), R15
        MOV.W   #0x0, 0(R15)
        MOVA    R10, R12
        CALLA   #validate
        MOV.B   R12, 0x1(SP)
        CMP.B   #0x0, 0x1(SP)
        JEQ     ??f_write_3
        MOV.B   0x1(SP), R12
        JMP     ??f_write_4
??f_write_3:
        CMP.B   #0x0, 0x6(R10)
        JGE     ??f_write_5
        MOV.B   #0x2, R12
        JMP     ??f_write_4
??f_write_5:
        BIT.B   #0x2, 0x6(R10)
        JC      ??f_write_6
        MOV.B   #0x7, R12
        JMP     ??f_write_4
??f_write_6:
        MOV.W   R11, R14
        MOV.W   #0x0, R15
        ADD.W   0xc(R10), R14
        ADDC.W  0xe(R10), R15
        CMP.W   0xe(R10), R15
        JNC     ??f_write_7
        JNE     ??f_write_0
        CMP.W   0xc(R10), R14
        JC      ??f_write_0
??f_write_7:
        MOV.W   #0x0, R11
??f_write_0:
        CMP.W   #0x0, R11
        JEQ     ??f_write_2
        MOV.W   0x8(R10), R12
        MOV.W   0xa(R10), R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        BIS.W   R15, R13
        CMP.W   #0x0, R13
        JNE     ??f_write_8
        MOV.W   0x8(R10), R12
        MOV.W   0xa(R10), R13
        CALLA   #?ShiftRight32u_9
        MOVA    @R10, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        ADD.W   #0xffff, R14
        AND.B   R14, R12
        MOV.B   R12, 0(SP)
        CMP.B   #0x0, 0(SP)
        JNE     ??f_write_9
        MOV.W   0x8(R10), R15
        BIS.W   0xa(R10), R15
        CMP.W   #0x0, R15
        JNE     ??f_write_10
        MOV.W   0x10(R10), R6
        MOV.W   0x12(R10), R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??f_write_11
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    @R10, R12
        CALLA   #create_chain
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R12, 0x10(R10)
        MOV.W   R13, 0x12(R10)
        JMP     ??f_write_11
??f_write_10:
        MOVA    0x24(R10), R15
        CMPA    #0x0, R15
        JEQ     ??f_write_12
        MOV.W   0x8(R10), R14
        MOV.W   0xa(R10), R15
        MOVA    R10, R12
        CALLA   #clmt_clust
        MOV.W   R12, R6
        MOV.W   R13, R7
        JMP     ??f_write_11
??f_write_12:
        MOV.W   0x14(R10), R14
        MOV.W   0x16(R10), R15
        MOVA    @R10, R12
        CALLA   #create_chain
        MOV.W   R12, R6
        MOV.W   R13, R7
??f_write_11:
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JEQ     ??f_write_2
        CMP.W   #0x1, R6
        JNE     ??f_write_13
        CMP.W   #0x0, R7
        JNE     ??f_write_13
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_write_4
??f_write_13:
        CMP.W   #0xffff, R6
        JNE     ??f_write_14
        CMP.W   #0xffff, R7
        JNE     ??f_write_14
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_write_4
??f_write_14:
        MOV.W   R6, 0x14(R10)
        MOV.W   R7, 0x16(R10)
??f_write_9:
        BIT.B   #0x40, 0x6(R10)
        JNC     ??f_write_15
        PUSH.B  #0x1
          CFI CFA SP+52
        MOV.W   0x18(R10), R14
        MOV.W   0x1a(R10), R15
        MOVA    R10, R13
        ADDA    #0x28, R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+50
        CMP.B   #0x0, R12
        JEQ     ??f_write_16
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_write_4
??f_write_16:
        MOVA    R10, R15
        BIC.B   #0x40, 0x6(R15)
??f_write_15:
        MOV.W   0x14(R10), R14
        MOV.W   0x16(R10), R15
        MOVA    @R10, R12
        CALLA   #clust2sect
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JNE     ??f_write_17
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_write_4
??f_write_17:
        MOV.B   @SP, R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        ADD.W   R14, R8
        ADDC.W  R15, R9
        MOV.W   R11, R15
        SWPB    R15
        AND.W   #0xff, R15
        RRA.W   R15
        MOV.W   R15, R5
        CMP.W   #0x0, R5
        JEQ     ??f_write_18
        MOVA    @R10, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        MOV.B   @SP, R15
        MOV.B   R15, R15
        ADD.W   R5, R15
        CMP.W   R15, R14
        JC      ??f_write_19
        MOVA    @R10, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        MOV.B   @SP, R15
        MOV.B   R15, R15
        SUB.W   R15, R14
        MOV.W   R14, R5
??f_write_19:
        PUSH.B  R5
          CFI CFA SP+52
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    0x4(SP), R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+50
        CMP.B   #0x0, R12
        JEQ     ??f_write_20
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_write_4
??f_write_20:
        MOV.W   0x18(R10), R12
        MOV.W   0x1a(R10), R13
        SUB.W   R8, R12
        SUBC.W  R9, R13
        MOV.W   R5, R14
        MOV.W   #0x0, R15
        CMP.W   R15, R13
        JNC     ??f_write_21
        JNE     ??f_write_22
        CMP.W   R14, R12
        JC      ??f_write_22
??f_write_21:
        MOV.W   #0x200, R14
        PUSH.W  R14
          CFI CFA SP+52
        MOVA    0x4(SP), R15
        PUSHM.A #0x1, R15
          CFI CFA SP+56
        MOV.W   0x18(R10), R12
        MOV.W   0x1a(R10), R13
        SUB.W   R8, R12
        SUBC.W  R9, R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        PUSHM.W #0x2, R13
          CFI CFA SP+60
        POPM.A  #0x1, R15
          CFI CFA SP+56
        POPM.A  #0x1, R13
          CFI CFA SP+52
        ADDA    R15, R13
        POP.W   R14
          CFI CFA SP+50
        MOVA    R10, R12
        ADDA    #0x28, R12
        CALLA   #mem_cpy
        MOVA    R10, R15
        BIC.B   #0x40, 0x6(R15)
??f_write_22:
        MOV.W   R5, R15
        RLA.B   R15
        AND.W   #0xff, R15
        SWPB    R15
        MOV.W   R15, R4
        JMP     ??f_write_23
??f_write_18:
        CMP.W   R8, 0x18(R10)
        JNE     ??f_write_24
        CMP.W   R9, 0x1a(R10)
        JEQ     ??f_write_25
??f_write_24:
        CMP.W   0xe(R10), 0xa(R10)
        JNC     ??f_write_26
        JNE     ??f_write_25
        CMP.W   0xc(R10), 0x8(R10)
        JC      ??f_write_25
??f_write_26:
        PUSH.B  #0x1
          CFI CFA SP+52
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    R10, R13
        ADDA    #0x28, R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+50
        CMP.B   #0x0, R12
        JEQ     ??f_write_25
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_write_4
??f_write_25:
        MOV.W   R8, 0x18(R10)
        MOV.W   R9, 0x1a(R10)
??f_write_8:
        MOV.W   #0x200, R15
        PUSH.W  R15
          CFI CFA SP+52
        MOV.W   0x8(R10), R12
        MOV.W   #0x200, R14
        CALLA   #?DivMod16u
        POP.W   R15
          CFI CFA SP+50
        SUB.W   R14, R15
        MOV.W   R15, R4
        CMP.W   R4, R11
        JC      ??f_write_27
        MOV.W   R11, R4
??f_write_27:
        MOV.W   R4, R14
        MOVA    0x2(SP), R13
        PUSHM.A #0x1, R13
          CFI CFA SP+54
        PUSH.W  R14
          CFI CFA SP+56
        MOV.W   0x8(R10), R12
        MOV.W   0xa(R10), R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        PUSHM.W #0x2, R15
          CFI CFA SP+60
        POPM.A  #0x1, R15
          CFI CFA SP+56
        MOVA    R10, R12
        ADDA    R15, R12
        ADDA    #0x28, R12
        POP.W   R14
          CFI CFA SP+54
        POPM.A  #0x1, R13
          CFI CFA SP+50
        CALLA   #mem_cpy
        MOVA    R10, R15
        BIS.B   #0x40, 0x6(R15)
??f_write_23:
        MOVA    0x2(SP), R15
        ADDA    R4, R15
        MOVA    R15, 0x2(SP)
        MOV.W   R4, R14
        MOV.W   #0x0, R15
        ADD.W   R14, 0x8(R10)
        ADDC.W  R15, 0xa(R10)
        MOVA    0x6(SP), R15
        ADD.W   R4, 0(R15)
        SUB.W   R4, R11
        JMP     ??f_write_0
??f_write_2:
        CMP.W   0xa(R10), 0xe(R10)
        JNC     ??f_write_28
        JNE     ??f_write_29
        CMP.W   0x8(R10), 0xc(R10)
        JC      ??f_write_29
??f_write_28:
        MOV.W   0x8(R10), 0xc(R10)
        MOV.W   0xa(R10), 0xe(R10)
??f_write_29:
        MOVA    R10, R15
        BIS.B   #0x20, 0x6(R15)
        MOV.B   #0x0, R12
??f_write_4:
        ADD.W   #0xe, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock35

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_sync:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function f_sync
        FUNCALL f_sync, validate
        LOCFRAME CSTACK, 28, STACK
        FUNCALL f_sync, disk_write
        LOCFRAME CSTACK, 30, STACK
        FUNCALL f_sync, move_window
        LOCFRAME CSTACK, 28, STACK
        FUNCALL f_sync, st_clust
        LOCFRAME CSTACK, 28, STACK
        FUNCALL f_sync, get_fattime
        LOCFRAME CSTACK, 28, STACK
        FUNCALL f_sync, sync
        LOCFRAME CSTACK, 28, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        MOVA    R12, R10
        MOVA    R10, R12
        CALLA   #validate
        MOV.B   R12, R6
        CMP.B   #0x0, R6
        JNE     ??f_sync_0
        BIT.B   #0x20, 0x6(R10)
        JNC     ??f_sync_0
        BIT.B   #0x40, 0x6(R10)
        JNC     ??f_sync_1
        PUSH.B  #0x1
          CFI CFA SP+30
        MOV.W   0x18(R10), R14
        MOV.W   0x1a(R10), R15
        MOVA    R10, R13
        ADDA    #0x28, R13
        MOVA    @R10, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+28
        CMP.B   #0x0, R12
        JEQ     ??f_sync_2
        MOV.B   #0x1, R12
        JMP     ??f_sync_3
??f_sync_2:
        MOVA    R10, R15
        BIC.B   #0x40, 0x6(R15)
??f_sync_1:
        MOV.W   0x1c(R10), R14
        MOV.W   0x1e(R10), R15
        MOVA    @R10, R12
        CALLA   #move_window
        MOV.B   R12, R6
        CMP.B   #0x0, R6
        JNE     ??f_sync_0
        MOVA    0x20(R10), R11
        MOVA    R11, R15
        BIS.B   #0x20, 0xb(R15)
        MOV.B   0xc(R10), 0x1c(R11)
        MOV.B   0xd(R10), 0x1d(R11)
        MOV.W   0xe(R10), R14
        MOV.B   R14, 0x1e(R11)
        MOV.W   0xc(R10), R14
        MOV.W   0xe(R10), R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x1f(R11)
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    R11, R12
        CALLA   #st_clust
        CALLA   #get_fattime
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.B   R8, 0x16(R11)
        MOV.W   R8, R15
        SWPB    R15
        AND.W   #0xff, R15
        MOV.B   R15, 0x17(R11)
        MOV.B   R9, 0x18(R11)
        MOV.W   R8, R14
        MOV.W   R9, R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x19(R11)
        MOV.B   #0x0, 0x12(R11)
        MOV.B   #0x0, 0x13(R11)
        MOVA    R10, R15
        BIC.B   #0x20, 0x6(R15)
        MOVA    @R10, R15
        MOV.B   #0x1, 0x4(R15)
        MOVA    @R10, R12
        CALLA   #sync
        MOV.B   R12, R6
??f_sync_0:
        MOV.B   R6, R12
??f_sync_3:
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock36

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_close:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function f_close
        FUNCALL f_close, f_sync
        LOCFRAME CSTACK, 12, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        MOVA    R12, R10
        MOVA    R10, R12
        CALLA   #f_sync
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_close_0
        MOVX.A  #0x0, 0(R10)
??f_close_0:
        MOV.B   R11, R12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock37

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_chdrive:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function f_chdrive
        MOV.B   R12, R14
        CMP.B   #0x0, R14
        JEQ     ??f_chdrive_0
        MOV.B   #0xb, R12
        RETA
??f_chdrive_0:
        MOVX.B  R14, &CurrVol
        MOV.B   #0x0, R12
        RETA
          CFI EndBlock cfiBlock38

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_chdir:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function f_chdir
        FUNCALL f_chdir, chk_mounted
        LOCFRAME CSTACK, 260, STACK
        FUNCALL f_chdir, follow_path
        LOCFRAME CSTACK, 260, STACK
        FUNCALL f_chdir, ld_clust
        LOCFRAME CSTACK, 260, STACK
        PUSHM.A #0x1, R10
          CFI R10L Frame(CFA, -8)
          CFI R10H Frame(CFA, -6)
          CFI CFA SP+8
        PUSHM.A #0x1, R12
          CFI CFA SP+12
        SUB.W   #0xf8, SP
          CFI CFA SP+260
        MOV.B   #0x0, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0xf8, R12
        CALLA   #chk_mounted
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_chdir_0
        MOV.W   SP, R15
        ADD.W   #0x22, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x2e, R15
        MOVA    R15, 0x1c(SP)
        MOVA    0xf8(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #follow_path
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_chdir_1
        MOVA    0x14(SP), R15
        CMPA    #0x0, R15
        JNE     ??f_chdir_2
        MOVA    @SP, R15
        MOV.W   0x8(SP), 0x16(R15)
        MOV.W   0xa(SP), 0x18(R15)
        JMP     ??f_chdir_1
??f_chdir_2:
        MOVA    0x14(SP), R15
        BIT.B   #0x10, 0xb(R15)
        JNC     ??f_chdir_3
        MOVA    0x14(SP), R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        MOVA    @SP, R15
        MOV.W   R12, 0x16(R15)
        MOV.W   R13, 0x18(R15)
        JMP     ??f_chdir_1
??f_chdir_3:
        MOV.B   #0x5, R10
??f_chdir_1:
        CMP.B   #0x4, R10
        JNE     ??f_chdir_0
        MOV.B   #0x5, R10
??f_chdir_0:
        MOV.B   R10, R12
        ADD.W   #0xfc, SP
          CFI CFA SP+8
        POPM.A  #0x1, R10
          CFI R10H SameValue
          CFI R10L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock39

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_getcwd:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function f_getcwd
        FUNCALL f_getcwd, chk_mounted
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, dir_sdi
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, dir_read
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, ld_clust
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, dir_sdi
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, dir_read
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, ld_clust
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, dir_next
        LOCFRAME CSTACK, 316, STACK
        FUNCALL f_getcwd, get_fileinfo
        LOCFRAME CSTACK, 316, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R12
          CFI CFA SP+40
        SUB.W   #0x114, SP
          CFI CFA SP+316
        MOV.W   R13, R6
        MOVA    0x114(SP), R15
        MOV.B   #0x0, 0(R15)
        MOV.B   #0x0, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x114, R12
        CALLA   #chk_mounted
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_12
        MOV.W   SP, R15
        ADD.W   #0x22, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x4a, R15
        MOVA    R15, 0x1c(SP)
        MOV.W   R6, R11
        MOVA    @SP, R15
        MOV.W   0x16(R15), 0x8(SP)
        MOV.W   0x18(R15), 0xa(SP)
??f_getcwd_3:
        MOV.W   0x8(SP), R14
        MOV.W   0xa(SP), R15
        MOV.W   R14, R4
        MOV.W   R15, R5
        MOV.W   R14, R13
        BIS.W   R15, R13
        CMP.W   #0x0, R13
        JEQ     ??f_getcwd_6
        MOV.W   #0x1, R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_sdi
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_6
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_read
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_6
        MOVA    0x14(SP), R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        MOV.W   R12, 0x8(SP)
        MOV.W   R13, 0xa(SP)
        MOV.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_sdi
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_6
??f_getcwd_0:
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_read
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_9
        MOVA    0x14(SP), R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        CMP.W   R12, R4
        JNE     ??f_getcwd_10
        CMP.W   R13, R5
        JEQ     ??f_getcwd_9
??f_getcwd_10:
        MOV.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_next
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JEQ     ??f_getcwd_0
??f_getcwd_9:
        CMP.B   #0x4, R10
        JNE     ??f_getcwd_13
        MOV.B   #0x2, R10
??f_getcwd_13:
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_6
        MOVX.A  0x114(SP), 0x44(SP)
        MOV.W   R11, 0x48(SP)
        MOV.W   SP, R13
        ADD.W   #0x2e, R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #get_fileinfo
        MOV.W   SP, R15
        ADD.W   #0x37, R15
        MOVA    R15, R8
        MOVA    0x114(SP), R15
        CMP.B   #0x0, 0(R15)
        JEQ     ??f_getcwd_14
        MOVA    0x114(SP), R8
??f_getcwd_14:
        MOV.W   #0x0, R9
??f_getcwd_1:
        MOVA    R8, R15
        ADDA    R9, R15
        CMP.B   #0x0, 0(R15)
        JEQ     ??f_getcwd_15
        ADD.W   #0x1, R9
        JMP     ??f_getcwd_1
??f_getcwd_15:
        MOV.W   R9, R15
        ADD.W   #0x3, R15
        CMP.W   R15, R11
        JC      ??f_getcwd_2
        MOV.B   #0x11, R10
        JMP     ??f_getcwd_6
??f_getcwd_2:
        CMP.W   #0x0, R9
        JEQ     ??f_getcwd_16
        ADD.W   #0xffff, R11
        ADD.W   #0xffff, R9
        MOVA    R8, R15
        ADDA    R9, R15
        MOVA    0x114(SP), R14
        ADDA    R11, R14
        MOV.B   @R15, 0(R14)
        JMP     ??f_getcwd_2
??f_getcwd_16:
        ADD.W   #0xffff, R11
        MOVA    0x114(SP), R15
        ADDA    R11, R15
        MOV.B   #0x2f, 0(R15)
        JMP     ??f_getcwd_3
??f_getcwd_6:
        MOVA    0x114(SP), R8
        CMP.B   #0x0, R10
        JNE     ??f_getcwd_17
        MOV.B   #0x30, R14
        ADDX.B  &CurrVol, R14
        MOV.B   R14, 0(R8)
        ADDA    #0x1, R8
        MOV.B   #0x3a, 0(R8)
        ADDA    #0x1, R8
        CMP.W   R6, R11
        JNE     ??f_getcwd_4
        MOV.B   #0x2f, 0(R8)
        ADDA    #0x1, R8
        JMP     ??f_getcwd_17
??f_getcwd_4:
        MOVA    0x114(SP), R15
        ADDA    R11, R15
        MOV.B   @R15, 0(R8)
        ADD.W   #0x1, R11
        ADDA    #0x1, R8
        CMP.W   R6, R11
        JNC     ??f_getcwd_4
??f_getcwd_17:
        MOV.B   #0x0, 0(R8)
??f_getcwd_12:
        MOV.B   R10, R12
        ADD.W   #0x118, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock40

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_lseek:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function f_lseek
        FUNCALL f_lseek, validate
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, get_fat
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, clmt_clust
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, clust2sect
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, disk_write
        LOCFRAME CSTACK, 62, STACK
        FUNCALL f_lseek, disk_read
        LOCFRAME CSTACK, 62, STACK
        FUNCALL f_lseek, create_chain
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, create_chain
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, get_fat
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, clust2sect
        LOCFRAME CSTACK, 60, STACK
        FUNCALL f_lseek, disk_write
        LOCFRAME CSTACK, 62, STACK
        FUNCALL f_lseek, disk_read
        LOCFRAME CSTACK, 62, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        SUB.W   #0x18, SP
          CFI CFA SP+60
        MOVA    R12, R8
        MOV.W   R14, R10
        MOV.W   R15, R11
        MOVA    R8, R12
        CALLA   #validate
        MOV.B   R12, R9
        CMP.B   #0x0, R9
        JEQ     ??f_lseek_5
        MOV.B   R9, R12
        BRA     #??f_lseek_6
??f_lseek_5:
        CMP.B   #0x0, 0x6(R8)
        JGE     ??f_lseek_7
        MOV.B   #0x2, R12
        BRA     #??f_lseek_6
??f_lseek_7:
        MOVA    0x24(R8), R15
        CMPA    #0x0, R15
        JEQ     ??f_lseek_8
        CMP.W   #0xffff, R10
        JNE     ??f_lseek_9
        CMP.W   #0xffff, R11
        JNE     ??f_lseek_9
        MOVA    0x24(R8), R4
        MOVX.W  @R4, 0xc(SP)
        MOVX.W  0x2(R4), 0xe(SP)
        ADDA    #0x4, R4
        MOV.W   #0x2, 0x4(SP)
        MOV.W   #0x0, 0x6(SP)
        MOV.W   0x10(R8), R6
        MOV.W   0x12(R8), R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JEQ     ??f_lseek_3
??f_lseek_1:
        MOV.W   R6, 0x10(SP)
        MOV.W   R7, 0x12(SP)
        MOV.W   #0x0, 0x8(SP)
        MOV.W   #0x0, 0xa(SP)
        MOV.W   0x4(SP), R14
        MOV.W   0x6(SP), R15
        ADD.W   #0x2, R14
        ADDC.W  #0x0, R15
        MOV.W   R14, 0x4(SP)
        MOV.W   R15, 0x6(SP)
??f_lseek_0:
        MOV.W   R6, 0x14(SP)
        MOV.W   R7, 0x16(SP)
        MOV.W   0x8(SP), R14
        MOV.W   0xa(SP), R15
        ADD.W   #0x1, R14
        ADDC.W  #0x0, R15
        MOV.W   R14, 0x8(SP)
        MOV.W   R15, 0xa(SP)
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    @R8, R12
        CALLA   #get_fat
        MOV.W   R12, R6
        MOV.W   R13, R7
        CMP.W   #0x0, R7
        JNC     ??f_lseek_10
        JNE     ??f_lseek_11
        CMP.W   #0x2, R6
        JC      ??f_lseek_11
??f_lseek_10:
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        BRA     #??f_lseek_6
??f_lseek_11:
        CMP.W   #0xffff, R6
        JNE     ??f_lseek_12
        CMP.W   #0xffff, R7
        JNE     ??f_lseek_12
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        BRA     #??f_lseek_6
??f_lseek_12:
        MOV.W   0x14(SP), R14
        MOV.W   0x16(SP), R15
        ADD.W   #0x1, R14
        ADDC.W  #0x0, R15
        CMP.W   R14, R6
        JNE     ??f_lseek_13
        CMP.W   R15, R7
        JEQ     ??f_lseek_0
??f_lseek_13:
        CMP.W   0x6(SP), 0xe(SP)
        JNC     ??f_lseek_14
        JNE     ??f_lseek_15
        CMP.W   0x4(SP), 0xc(SP)
        JNC     ??f_lseek_14
??f_lseek_15:
        MOV.W   0x8(SP), R14
        MOV.W   0xa(SP), R15
        MOV.W   R14, 0(R4)
        MOV.W   R15, 0x2(R4)
        ADDA    #0x4, R4
        MOV.W   0x10(SP), R14
        MOV.W   0x12(SP), R15
        MOV.W   R14, 0(R4)
        MOV.W   R15, 0x2(R4)
        ADDA    #0x4, R4
??f_lseek_14:
        MOVA    @R8, R15
        CMP.W   0x1c(R15), R7
        JNC     ??f_lseek_1
        JNE     ??f_lseek_3
        CMP.W   0x1a(R15), R6
        JNC     ??f_lseek_1
??f_lseek_3:
        MOV.W   0x4(SP), R14
        MOV.W   0x6(SP), R15
        MOVA    0x24(R8), R13
        MOV.W   R14, 0(R13)
        MOV.W   R15, 0x2(R13)
        CMP.W   0x6(SP), 0xe(SP)
        JNC     ??f_lseek_16
        JNE     ??f_lseek_17
        CMP.W   0x4(SP), 0xc(SP)
        JNC     ??f_lseek_16
??f_lseek_17:
        MOV.W   #0x0, 0(R4)
        MOV.W   #0x0, 0x2(R4)
        BRA     #??f_lseek_18
??f_lseek_16:
        MOV.B   #0x11, R9
        BRA     #??f_lseek_18
??f_lseek_9:
        CMP.W   R11, 0xe(R8)
        JNC     ??f_lseek_19
        JNE     ??f_lseek_20
        CMP.W   R10, 0xc(R8)
        JC      ??f_lseek_20
??f_lseek_19:
        MOV.W   0xc(R8), R10
        MOV.W   0xe(R8), R11
??f_lseek_20:
        MOV.W   R10, 0x8(R8)
        MOV.W   R11, 0xa(R8)
        MOV.W   R10, R15
        BIS.W   R11, R15
        CMP.W   #0x0, R15
        JEQ     ??f_lseek_18
        MOV.W   R10, R14
        MOV.W   R11, R15
        ADD.W   #0xffff, R14
        ADDC.W  #0xffff, R15
        MOVA    R8, R12
        CALLA   #clmt_clust
        MOV.W   R12, 0x14(R8)
        MOV.W   R13, 0x16(R8)
        MOV.W   0x14(R8), R14
        MOV.W   0x16(R8), R15
        MOVA    @R8, R12
        CALLA   #clust2sect
        MOV.W   R12, 0(SP)
        MOV.W   R13, 0x2(SP)
        MOV.W   @SP, R15
        BIS.W   0x2(SP), R15
        CMP.W   #0x0, R15
        JNE     ??f_lseek_21
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_lseek_6
??f_lseek_21:
        MOV.W   R10, R12
        MOV.W   R11, R13
        ADD.W   #0xffff, R12
        ADDC.W  #0xffff, R13
        CALLA   #?ShiftRight32u_9
        MOVA    @R8, R15
        MOV.B   0x2(R15), R14
        MOV.B   R14, R14
        ADD.W   #0xffff, R14
        MOV.W   R14, R15
        XOR.W   #0xffff, R15
        RLA.W   R15
        SUBC.W  R15, R15
        AND.W   R14, R12
        AND.W   R15, R13
        ADD.W   @SP, R12
        ADDC.W  0x2(SP), R13
        MOV.W   R12, 0(SP)
        MOV.W   R13, 0x2(SP)
        MOV.W   0x8(R8), R12
        MOV.W   0xa(R8), R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        BIS.W   R15, R13
        CMP.W   #0x0, R13
        JEQ     ??f_lseek_18
        CMP.W   0x18(R8), 0(SP)
        JNE     ??f_lseek_22
        CMP.W   0x1a(R8), 0x2(SP)
        JEQ     ??f_lseek_18
??f_lseek_22:
        BIT.B   #0x40, 0x6(R8)
        JNC     ??f_lseek_23
        PUSH.B  #0x1
          CFI CFA SP+62
        MOV.W   0x18(R8), R14
        MOV.W   0x1a(R8), R15
        MOVA    R8, R13
        ADDA    #0x28, R13
        MOVA    @R8, R5
        MOV.B   0x1(R5), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+60
        CMP.B   #0x0, R12
        JEQ     ??f_lseek_24
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_lseek_6
??f_lseek_24:
        MOVA    R8, R15
        BIC.B   #0x40, 0x6(R15)
??f_lseek_23:
        PUSH.B  #0x1
          CFI CFA SP+62
        MOV.W   0x2(SP), R14
        MOV.W   0x4(SP), R15
        MOVA    R8, R13
        ADDA    #0x28, R13
        MOVA    @R8, R5
        MOV.B   0x1(R5), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+60
        CMP.B   #0x0, R12
        JEQ     ??f_lseek_25
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_lseek_6
??f_lseek_25:
        MOV.W   @SP, 0x18(R8)
        MOV.W   0x2(SP), 0x1a(R8)
        JMP     ??f_lseek_18
??f_lseek_8:
        CMP.W   R11, 0xe(R8)
        JNC     ??f_lseek_26
        JNE     ??f_lseek_27
        CMP.W   R10, 0xc(R8)
        JC      ??f_lseek_27
??f_lseek_26:
        BIT.B   #0x2, 0x6(R8)
        JC      ??f_lseek_27
        MOV.W   0xc(R8), R10
        MOV.W   0xe(R8), R11
??f_lseek_27:
        MOV.W   0x8(R8), 0x4(SP)
        MOV.W   0xa(R8), 0x6(SP)
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R4
        MOV.W   R15, R5
        MOV.W   R14, 0x8(R8)
        MOV.W   R15, 0xa(R8)
        MOV.W   R10, R15
        BIS.W   R11, R15
        CMP.W   #0x0, R15
        JEQ     ??f_lseek_28
        MOVA    @R8, R15
        MOV.B   0x2(R15), R12
        MOV.B   R12, R12
        MOV.W   #0x0, R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?Mul32
        MOV.W   R12, 0(SP)
        MOV.W   R13, 0x2(SP)
        MOV.W   0x4(SP), R15
        BIS.W   0x6(SP), R15
        CMP.W   #0x0, R15
        JEQ     ??f_lseek_29
        MOV.W   R10, R12
        MOV.W   R11, R13
        ADD.W   #0xffff, R12
        ADDC.W  #0xffff, R13
        MOV.W   @SP, R14
        MOV.W   0x2(SP), R15
        CALLA   #?DivMod32u
        PUSH.W  R13
          CFI CFA SP+62
        PUSH.W  R12
          CFI CFA SP+64
        MOV.W   0x8(SP), R12
        MOV.W   0xa(SP), R13
        ADD.W   #0xffff, R12
        ADDC.W  #0xffff, R13
        MOV.W   0x4(SP), R14
        MOV.W   0x6(SP), R15
        CALLA   #?DivMod32u
        POP.W   R14
          CFI CFA SP+62
        POP.W   R15
          CFI CFA SP+60
        CMP.W   R13, R15
        JNC     ??f_lseek_29
        JNE     ??f_lseek_30
        CMP.W   R12, R14
        JNC     ??f_lseek_29
??f_lseek_30:
        MOV.W   0x4(SP), R12
        MOV.W   0x6(SP), R13
        ADD.W   #0xffff, R12
        ADDC.W  #0xffff, R13
        MOV.W   @SP, R14
        MOV.W   0x2(SP), R15
        ADD.W   #0xffff, R14
        ADDC.W  #0xffff, R15
        BIC.W   R14, R12
        BIC.W   R15, R13
        MOV.W   R12, 0x8(R8)
        MOV.W   R13, 0xa(R8)
        SUB.W   0x8(R8), R10
        SUBC.W  0xa(R8), R11
        MOV.W   0x14(R8), R6
        MOV.W   0x16(R8), R7
        JMP     ??f_lseek_31
??f_lseek_29:
        MOV.W   0x10(R8), R6
        MOV.W   0x12(R8), R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??f_lseek_32
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    @R8, R12
        CALLA   #create_chain
        MOV.W   R12, R6
        MOV.W   R13, R7
        CMP.W   #0x1, R6
        JNE     ??f_lseek_33
        CMP.W   #0x0, R7
        JNE     ??f_lseek_33
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_lseek_6
??f_lseek_33:
        CMP.W   #0xffff, R6
        JNE     ??f_lseek_34
        CMP.W   #0xffff, R7
        JNE     ??f_lseek_34
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_lseek_6
??f_lseek_34:
        MOV.W   R6, 0x10(R8)
        MOV.W   R7, 0x12(R8)
??f_lseek_32:
        MOV.W   R6, 0x14(R8)
        MOV.W   R7, 0x16(R8)
??f_lseek_31:
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JEQ     ??f_lseek_28
??f_lseek_2:
        CMP.W   R11, 0x2(SP)
        JNC     ??f_lseek_35
        JNE     ??f_lseek_36
        CMP.W   R10, 0(SP)
        JC      ??f_lseek_36
??f_lseek_35:
        BIT.B   #0x2, 0x6(R8)
        JNC     ??f_lseek_37
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    @R8, R12
        CALLA   #create_chain
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??f_lseek_38
        MOV.W   @SP, R10
        MOV.W   0x2(SP), R11
        JMP     ??f_lseek_36
??f_lseek_37:
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    @R8, R12
        CALLA   #get_fat
        MOV.W   R12, R6
        MOV.W   R13, R7
??f_lseek_38:
        CMP.W   #0xffff, R6
        JNE     ??f_lseek_39
        CMP.W   #0xffff, R7
        JNE     ??f_lseek_39
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_lseek_6
??f_lseek_39:
        CMP.W   #0x0, R7
        JNC     ??f_lseek_4
        JNE     ??f_lseek_40
        CMP.W   #0x2, R6
        JNC     ??f_lseek_4
??f_lseek_40:
        MOVA    @R8, R15
        CMP.W   0x1c(R15), R7
        JNC     ??f_lseek_41
        JNE     ??f_lseek_4
        CMP.W   0x1a(R15), R6
        JNC     ??f_lseek_41
??f_lseek_4:
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_lseek_6
??f_lseek_41:
        MOV.W   R6, 0x14(R8)
        MOV.W   R7, 0x16(R8)
        ADD.W   @SP, 0x8(R8)
        ADDC.W  0x2(SP), 0xa(R8)
        SUB.W   @SP, R10
        SUBC.W  0x2(SP), R11
        JMP     ??f_lseek_2
??f_lseek_36:
        ADD.W   R10, 0x8(R8)
        ADDC.W  R11, 0xa(R8)
        MOV.W   R10, R12
        MOV.W   R11, R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        BIS.W   R15, R13
        CMP.W   #0x0, R13
        JEQ     ??f_lseek_28
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    @R8, R12
        CALLA   #clust2sect
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOV.W   R4, R15
        BIS.W   R5, R15
        CMP.W   #0x0, R15
        JNE     ??f_lseek_42
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x2, R12
        JMP     ??f_lseek_6
??f_lseek_42:
        MOV.W   R10, R12
        MOV.W   R11, R13
        CALLA   #?ShiftRight32u_9
        ADD.W   R12, R4
        ADDC.W  R13, R5
??f_lseek_28:
        MOV.W   0x8(R8), R12
        MOV.W   0xa(R8), R13
        MOV.W   #0x200, R14
        MOV.W   #0x0, R15
        CALLA   #?DivMod32u
        MOV.W   R14, R13
        BIS.W   R15, R13
        CMP.W   #0x0, R13
        JEQ     ??f_lseek_43
        CMP.W   0x18(R8), R4
        JNE     ??f_lseek_44
        CMP.W   0x1a(R8), R5
        JEQ     ??f_lseek_43
??f_lseek_44:
        BIT.B   #0x40, 0x6(R8)
        JNC     ??f_lseek_45
        PUSH.B  #0x1
          CFI CFA SP+62
        MOV.W   0x18(R8), R14
        MOV.W   0x1a(R8), R15
        MOVA    R8, R13
        ADDA    #0x28, R13
        MOVA    @R8, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_write
        ADD.W   #0x2, SP
          CFI CFA SP+60
        CMP.B   #0x0, R12
        JEQ     ??f_lseek_46
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_lseek_6
??f_lseek_46:
        MOVA    R8, R15
        BIC.B   #0x40, 0x6(R15)
??f_lseek_45:
        PUSH.B  #0x1
          CFI CFA SP+62
        MOV.W   R4, R14
        MOV.W   R5, R15
        MOVA    R8, R13
        ADDA    #0x28, R13
        MOVA    @R8, R12
        MOV.B   0x1(R12), R12
        CALLA   #disk_read
        ADD.W   #0x2, SP
          CFI CFA SP+60
        CMP.B   #0x0, R12
        JEQ     ??f_lseek_47
        MOVA    R8, R15
        BIS.B   #0x80, 0x6(R15)
        MOV.B   #0x1, R12
        JMP     ??f_lseek_6
??f_lseek_47:
        MOV.W   R4, 0x18(R8)
        MOV.W   R5, 0x1a(R8)
??f_lseek_43:
        CMP.W   0xa(R8), 0xe(R8)
        JNC     ??f_lseek_48
        JNE     ??f_lseek_18
        CMP.W   0x8(R8), 0xc(R8)
        JC      ??f_lseek_18
??f_lseek_48:
        MOV.W   0x8(R8), 0xc(R8)
        MOV.W   0xa(R8), 0xe(R8)
        MOVA    R8, R15
        BIS.B   #0x20, 0x6(R15)
??f_lseek_18:
        MOV.B   R9, R12
??f_lseek_6:
        ADD.W   #0x18, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock41

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_opendir:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function f_opendir
        FUNCALL f_opendir, chk_mounted
        LOCFRAME CSTACK, 238, STACK
        FUNCALL f_opendir, follow_path
        LOCFRAME CSTACK, 238, STACK
        FUNCALL f_opendir, ld_clust
        LOCFRAME CSTACK, 238, STACK
        FUNCALL f_opendir, dir_sdi
        LOCFRAME CSTACK, 238, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        PUSHM.A #0x1, R13
          CFI CFA SP+24
        SUB.W   #0xd6, SP
          CFI CFA SP+238
        MOVA    R12, R10
        CMPA    #0x0, R10
        JNE     ??f_opendir_0
        MOV.B   #0x9, R12
        JMP     ??f_opendir_1
??f_opendir_0:
        MOV.B   #0x0, R14
        MOVA    R10, R13
        MOV.W   SP, R12
        ADD.W   #0xd6, R12
        CALLA   #chk_mounted
        MOV.B   R12, R11
        MOVA    @R10, R8
        CMP.B   #0x0, R11
        JNE     ??f_opendir_2
        MOV.W   SP, R15
        ADD.W   #0x0, R15
        MOVA    R15, 0x18(R10)
        MOV.W   SP, R15
        ADD.W   #0xc, R15
        MOVA    R15, 0x1c(R10)
        MOVA    0xd6(SP), R13
        MOVA    R10, R12
        CALLA   #follow_path
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_opendir_3
        MOVA    0x14(R10), R15
        CMPA    #0x0, R15
        JEQ     ??f_opendir_4
        MOVA    0x14(R10), R15
        BIT.B   #0x10, 0xb(R15)
        JNC     ??f_opendir_5
        MOVA    0x14(R10), R13
        MOVA    R8, R12
        CALLA   #ld_clust
        MOV.W   R12, 0x8(R10)
        MOV.W   R13, 0xa(R10)
        JMP     ??f_opendir_4
??f_opendir_5:
        MOV.B   #0x5, R11
??f_opendir_4:
        CMP.B   #0x0, R11
        JNE     ??f_opendir_3
        MOV.W   0x6(R8), 0x4(R10)
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R11
??f_opendir_3:
        CMP.B   #0x4, R11
        JNE     ??f_opendir_6
        MOV.B   #0x5, R11
??f_opendir_6:
        CMP.B   #0x0, R11
        JEQ     ??f_opendir_7
        MOVX.A  #0x0, 0(R10)
        JMP     ??f_opendir_7
??f_opendir_2:
        MOVX.A  #0x0, 0(R10)
??f_opendir_7:
        MOV.B   R11, R12
??f_opendir_1:
        ADD.W   #0xda, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock42

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_readdir:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function f_readdir
        FUNCALL f_readdir, validate
        LOCFRAME CSTACK, 234, STACK
        FUNCALL f_readdir, dir_sdi
        LOCFRAME CSTACK, 234, STACK
        FUNCALL f_readdir, dir_read
        LOCFRAME CSTACK, 234, STACK
        FUNCALL f_readdir, get_fileinfo
        LOCFRAME CSTACK, 234, STACK
        FUNCALL f_readdir, dir_next
        LOCFRAME CSTACK, 234, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        SUB.W   #0xd6, SP
          CFI CFA SP+234
        MOVA    R12, R10
        MOVA    R13, R11
        MOVA    R10, R12
        CALLA   #validate
        MOV.B   R12, R8
        CMP.B   #0x0, R8
        JNE     ??f_readdir_0
        CMPA    #0x0, R11
        JNE     ??f_readdir_1
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_sdi
        MOV.B   R12, R8
        JMP     ??f_readdir_0
??f_readdir_1:
        MOV.W   SP, R15
        ADD.W   #0x0, R15
        MOVA    R15, 0x18(R10)
        MOV.W   SP, R15
        ADD.W   #0xc, R15
        MOVA    R15, 0x1c(R10)
        MOVA    R10, R12
        CALLA   #dir_read
        MOV.B   R12, R8
        CMP.B   #0x4, R8
        JNE     ??f_readdir_2
        MOV.W   #0x0, 0x10(R10)
        MOV.W   #0x0, 0x12(R10)
        MOV.B   #0x0, R8
??f_readdir_2:
        CMP.B   #0x0, R8
        JNE     ??f_readdir_0
        MOVA    R11, R13
        MOVA    R10, R12
        CALLA   #get_fileinfo
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #dir_next
        MOV.B   R12, R8
        CMP.B   #0x4, R8
        JNE     ??f_readdir_0
        MOV.W   #0x0, 0x10(R10)
        MOV.W   #0x0, 0x12(R10)
        MOV.B   #0x0, R8
??f_readdir_0:
        MOV.B   R8, R12
        ADD.W   #0xd6, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock43

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_stat:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function f_stat
        FUNCALL f_stat, chk_mounted
        LOCFRAME CSTACK, 264, STACK
        FUNCALL f_stat, follow_path
        LOCFRAME CSTACK, 264, STACK
        FUNCALL f_stat, get_fileinfo
        LOCFRAME CSTACK, 264, STACK
        PUSHM.A #0x2, R11
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+12
        PUSHM.A #0x1, R12
          CFI CFA SP+16
        SUB.W   #0xf8, SP
          CFI CFA SP+264
        MOVA    R13, R10
        MOV.B   #0x0, R14
        MOV.W   SP, R13
        ADD.W   #0xc, R13
        MOV.W   SP, R12
        ADD.W   #0xf8, R12
        CALLA   #chk_mounted
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_stat_0
        MOV.W   SP, R15
        ADD.W   #0x0, R15
        MOVA    R15, 0x24(SP)
        MOV.W   SP, R15
        ADD.W   #0x2e, R15
        MOVA    R15, 0x28(SP)
        MOVA    0xf8(SP), R13
        MOV.W   SP, R12
        ADD.W   #0xc, R12
        CALLA   #follow_path
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_stat_0
        MOVA    0x20(SP), R15
        CMPA    #0x0, R15
        JEQ     ??f_stat_1
        MOVA    R10, R13
        MOV.W   SP, R12
        ADD.W   #0xc, R12
        CALLA   #get_fileinfo
        JMP     ??f_stat_0
??f_stat_1:
        MOV.B   #0x6, R11
??f_stat_0:
        MOV.B   R11, R12
        ADD.W   #0xfc, SP
          CFI CFA SP+12
        POPM.A  #0x2, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock44

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_getfree:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function f_getfree
        FUNCALL f_getfree, chk_mounted
        LOCFRAME CSTACK, 58, STACK
        FUNCALL f_getfree, get_fat
        LOCFRAME CSTACK, 58, STACK
        FUNCALL f_getfree, move_window
        LOCFRAME CSTACK, 58, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R12
          CFI CFA SP+40
        PUSHM.A #0x1, R13
          CFI CFA SP+44
        PUSHM.A #0x1, R14
          CFI CFA SP+48
        SUB.W   #0xa, SP
          CFI CFA SP+58
        MOV.B   #0x0, R14
        MOVA    0xa(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x12, R12
        CALLA   #chk_mounted
        MOV.B   R12, R5
        MOVA    0xa(SP), R15
        MOVA    @R15, R8
        CMP.B   #0x0, R5
        JNE     ??f_getfree_5
        MOV.W   0x1a(R8), R14
        MOV.W   0x1c(R8), R15
        ADD.W   #0xfffe, R14
        ADDC.W  #0xffff, R15
        CMP.W   0x10(R8), R15
        JNC     ??f_getfree_6
        JNE     ??f_getfree_7
        CMP.W   0xe(R8), R14
        JNC     ??f_getfree_6
??f_getfree_7:
        MOVA    0xe(SP), R15
        MOV.W   0xe(R8), 0(R15)
        MOV.W   0x10(R8), 0x2(R15)
        JMP     ??f_getfree_5
??f_getfree_6:
        MOVX.B  @R8, 0(SP)
        MOV.W   #0x0, R10
        MOV.W   #0x0, R11
        CMP.B   #0x1, 0(SP)
        JNE     ??f_getfree_8
        MOV.W   #0x2, R6
        MOV.W   #0x0, R7
??f_getfree_0:
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    R8, R12
        CALLA   #get_fat
        MOV.W   R12, 0x2(SP)
        MOV.W   R13, 0x4(SP)
        CMP.W   #0xffff, 0x2(SP)
        JNE     ??f_getfree_9
        CMP.W   #0xffff, 0x4(SP)
        JNE     ??f_getfree_9
        MOV.B   #0x1, R5
        JMP     ??f_getfree_3
??f_getfree_9:
        CMP.W   #0x1, 0x2(SP)
        JNE     ??f_getfree_10
        CMP.W   #0x0, 0x4(SP)
        JNE     ??f_getfree_10
        MOV.B   #0x2, R5
        JMP     ??f_getfree_3
??f_getfree_10:
        MOV.W   0x2(SP), R15
        BIS.W   0x4(SP), R15
        CMP.W   #0x0, R15
        JNE     ??f_getfree_11
        ADD.W   #0x1, R10
        ADDC.W  #0x0, R11
??f_getfree_11:
        ADD.W   #0x1, R6
        ADDC.W  #0x0, R7
        CMP.W   0x1c(R8), R7
        JNC     ??f_getfree_0
        JNE     ??f_getfree_3
        CMP.W   0x1a(R8), R6
        JNC     ??f_getfree_0
        JMP     ??f_getfree_3
??f_getfree_8:
        MOV.W   0x1a(R8), R6
        MOV.W   0x1c(R8), R7
        MOV.W   0x22(R8), 0x6(SP)
        MOV.W   0x24(R8), 0x8(SP)
        MOV.W   #0x0, R4
        MOVA    #0x0, R9
??f_getfree_1:
        CMP.W   #0x0, R4
        JNE     ??f_getfree_12
        MOV.W   0x6(SP), R14
        MOV.W   0x8(SP), R15
        MOVA    R8, R12
        CALLA   #move_window
        MOV.B   R12, R5
        MOV.W   0x6(SP), R14
        MOV.W   0x8(SP), R15
        ADD.W   #0x1, R14
        ADDC.W  #0x0, R15
        MOV.W   R14, 0x6(SP)
        MOV.W   R15, 0x8(SP)
        CMP.B   #0x0, R5
        JNE     ??f_getfree_3
        MOVA    R8, R15
        ADDA    #0x32, R15
        MOVA    R15, R9
        MOV.W   #0x200, R4
??f_getfree_12:
        CMP.B   #0x2, 0(SP)
        JNE     ??f_getfree_13
        MOV.B   @R9, R14
        MOV.B   R14, R14
        MOV.B   0x1(R9), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        BIS.W   R14, R15
        CMP.W   #0x0, R15
        JNE     ??f_getfree_14
        ADD.W   #0x1, R10
        ADDC.W  #0x0, R11
??f_getfree_14:
        ADDA    #0x2, R9
        ADD.W   #0xfffe, R4
        JMP     ??f_getfree_15
??f_getfree_13:
        MOV.B   @R9, R15
        MOV.B   R15, R15
        PUSH.W  R15
          CFI CFA SP+60
        MOV.B   0x1(R9), R15
        MOV.B   R15, R15
        AND.W   #0xff, R15
        SWPB    R15
        PUSH.W  R15
          CFI CFA SP+62
        MOV.B   0x2(R9), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        MOV.W   R14, R12
        MOV.W   R15, R13
        MOV.B   0x3(R9), R14
        MOV.B   R14, R14
        MOV.W   #0x0, R15
        AND.W   #0xff, R14
        SWPB    R14
        MOV.W   R14, R15
        MOV.W   #0x0, R14
        BIS.W   R12, R14
        BIS.W   R13, R15
        POP.W   R13
          CFI CFA SP+60
        BIS.W   R13, R14
        POP.W   R13
          CFI CFA SP+58
        BIS.W   R13, R14
        BIT.W   #0xffff, R14
        JNE     ??f_getfree_16
        BIT.W   #0xfff, R15
        JNE     ??f_getfree_16
        ADD.W   #0x1, R10
        ADDC.W  #0x0, R11
??f_getfree_16:
        ADDA    #0x4, R9
        ADD.W   #0xfffc, R4
??f_getfree_15:
        ADD.W   #0xffff, R6
        ADDC.W  #0xffff, R7
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??f_getfree_1
??f_getfree_3:
        MOV.W   R10, 0xe(R8)
        MOV.W   R11, 0x10(R8)
        CMP.B   #0x3, 0(SP)
        JNE     ??f_getfree_17
        MOV.B   #0x1, 0x5(R8)
??f_getfree_17:
        MOVA    0xe(SP), R15
        MOV.W   R10, 0(R15)
        MOV.W   R11, 0x2(R15)
??f_getfree_5:
        MOV.B   R5, R12
        ADD.W   #0x16, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock45

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_truncate:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function f_truncate
        FUNCALL f_truncate, validate
        LOCFRAME CSTACK, 20, STACK
        FUNCALL f_truncate, remove_chain
        LOCFRAME CSTACK, 20, STACK
        FUNCALL f_truncate, get_fat
        LOCFRAME CSTACK, 20, STACK
        FUNCALL f_truncate, put_fat
        LOCFRAME CSTACK, 24, STACK
        FUNCALL f_truncate, remove_chain
        LOCFRAME CSTACK, 20, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        MOVA    R12, R10
        CMPA    #0x0, R10
        JNE     ??f_truncate_0
        MOV.B   #0x9, R12
        JMP     ??f_truncate_1
??f_truncate_0:
        MOVA    R10, R12
        CALLA   #validate
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_truncate_2
        CMP.B   #0x0, 0x6(R10)
        JGE     ??f_truncate_3
        MOV.B   #0x2, R11
        JMP     ??f_truncate_2
??f_truncate_3:
        BIT.B   #0x2, 0x6(R10)
        JC      ??f_truncate_2
        MOV.B   #0x7, R11
??f_truncate_2:
        CMP.B   #0x0, R11
        JNE     ??f_truncate_4
        CMP.W   0xe(R10), 0xa(R10)
        JNC     ??f_truncate_5
        JNE     ??f_truncate_6
        CMP.W   0xc(R10), 0x8(R10)
        JC      ??f_truncate_6
??f_truncate_5:
        MOV.W   0x8(R10), 0xc(R10)
        MOV.W   0xa(R10), 0xe(R10)
        MOVA    R10, R15
        BIS.B   #0x20, 0x6(R15)
        MOV.W   0x8(R10), R15
        BIS.W   0xa(R10), R15
        CMP.W   #0x0, R15
        JNE     ??f_truncate_7
        MOV.W   0x10(R10), R14
        MOV.W   0x12(R10), R15
        MOVA    @R10, R12
        CALLA   #remove_chain
        MOV.B   R12, R11
        MOV.W   #0x0, 0x10(R10)
        MOV.W   #0x0, 0x12(R10)
        JMP     ??f_truncate_6
??f_truncate_7:
        MOV.W   0x14(R10), R14
        MOV.W   0x16(R10), R15
        MOVA    @R10, R12
        CALLA   #get_fat
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.B   #0x0, R11
        CMP.W   #0xffff, R8
        JNE     ??f_truncate_8
        CMP.W   #0xffff, R9
        JNE     ??f_truncate_8
        MOV.B   #0x1, R11
??f_truncate_8:
        CMP.W   #0x1, R8
        JNE     ??f_truncate_9
        CMP.W   #0x0, R9
        JNE     ??f_truncate_9
        MOV.B   #0x2, R11
??f_truncate_9:
        CMP.B   #0x0, R11
        JNE     ??f_truncate_6
        MOVA    @R10, R15
        CMP.W   0x1c(R15), R9
        JNC     ??f_truncate_10
        JNE     ??f_truncate_6
        CMP.W   0x1a(R15), R8
        JC      ??f_truncate_6
??f_truncate_10:
        PUSH.W  #0xfff
          CFI CFA SP+22
        PUSH.W  #0xffff
          CFI CFA SP+24
        MOV.W   0x14(R10), R14
        MOV.W   0x16(R10), R15
        MOVA    @R10, R12
        CALLA   #put_fat
        MOV.B   R12, R11
        ADD.W   #0x4, SP
          CFI CFA SP+20
        CMP.B   #0x0, R11
        JNE     ??f_truncate_6
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    @R10, R12
        CALLA   #remove_chain
        MOV.B   R12, R11
??f_truncate_6:
        CMP.B   #0x0, R11
        JEQ     ??f_truncate_4
        MOVA    R10, R15
        BIS.B   #0x80, 0x6(R15)
??f_truncate_4:
        MOV.B   R11, R12
??f_truncate_1:
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock46

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_unlink:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function f_unlink
        FUNCALL f_unlink, chk_mounted
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, follow_path
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, ld_clust
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, mem_cpy
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, dir_sdi
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, dir_read
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, dir_remove
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, remove_chain
        LOCFRAME CSTACK, 306, STACK
        FUNCALL f_unlink, sync
        LOCFRAME CSTACK, 306, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        PUSHM.A #0x1, R12
          CFI CFA SP+24
        SUB.W   #0x11a, SP
          CFI CFA SP+306
        MOV.B   #0x1, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x11a, R12
        CALLA   #chk_mounted
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_unlink_1
        MOV.W   SP, R15
        ADD.W   #0x22, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x50, R15
        MOVA    R15, 0x1c(SP)
        MOVA    0x11a(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #follow_path
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_unlink_2
        MOVA    0x18(SP), R15
        BIT.B   #0x20, 0xb(R15)
        JNC     ??f_unlink_2
        MOV.B   #0x6, R10
??f_unlink_2:
        CMP.B   #0x0, R10
        JNE     ??f_unlink_1
        MOVA    0x14(SP), R11
        CMPA    #0x0, R11
        JNE     ??f_unlink_3
        MOV.B   #0x6, R10
        JMP     ??f_unlink_4
??f_unlink_3:
        BIT.B   #0x1, 0xb(R11)
        JNC     ??f_unlink_4
        MOV.B   #0x7, R10
??f_unlink_4:
        MOVA    R11, R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        MOV.W   R12, R8
        MOV.W   R13, R9
        CMP.B   #0x0, R10
        JNE     ??f_unlink_5
        BIT.B   #0x10, 0xb(R11)
        JNC     ??f_unlink_5
        CMP.W   #0x0, R9
        JNC     ??f_unlink_6
        JNE     ??f_unlink_7
        CMP.W   #0x2, R8
        JC      ??f_unlink_7
??f_unlink_6:
        MOV.B   #0x2, R10
        JMP     ??f_unlink_5
??f_unlink_7:
        MOV.W   #0x22, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x2e, R12
        CALLA   #mem_cpy
        MOV.W   R8, 0x36(SP)
        MOV.W   R9, 0x38(SP)
        MOV.W   #0x2, R13
        MOV.W   SP, R12
        ADD.W   #0x2e, R12
        CALLA   #dir_sdi
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_unlink_5
        MOV.W   SP, R12
        ADD.W   #0x2e, R12
        CALLA   #dir_read
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JEQ     ??f_unlink_0
        MOVA    @SP, R15
        CMP.W   0x16(R15), R8
        JNE     ??f_unlink_8
        CMP.W   0x18(R15), R9
        JNE     ??f_unlink_8
??f_unlink_0:
        MOV.B   #0x7, R10
??f_unlink_8:
        CMP.B   #0x4, R10
        JNE     ??f_unlink_5
        MOV.B   #0x0, R10
??f_unlink_5:
        CMP.B   #0x0, R10
        JNE     ??f_unlink_1
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_remove
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_unlink_1
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JEQ     ??f_unlink_9
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    @SP, R12
        CALLA   #remove_chain
        MOV.B   R12, R10
??f_unlink_9:
        CMP.B   #0x0, R10
        JNE     ??f_unlink_1
        MOVA    @SP, R12
        CALLA   #sync
        MOV.B   R12, R10
??f_unlink_1:
        MOV.B   R10, R12
        ADD.W   #0x11e, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock47

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_mkdir:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function f_mkdir
        FUNCALL f_mkdir, get_fattime
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, chk_mounted
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, follow_path
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, create_chain
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, move_window
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, clust2sect
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, mem_set
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, mem_set
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, st_clust
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, mem_cpy
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, st_clust
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, move_window
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, mem_set
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, dir_register
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, remove_chain
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, st_clust
        LOCFRAME CSTACK, 294, STACK
        FUNCALL f_mkdir, sync
        LOCFRAME CSTACK, 294, STACK
        PUSHM.A #0x8, R11
          CFI R4L Frame(CFA, -36)
          CFI R4H Frame(CFA, -34)
          CFI R5L Frame(CFA, -32)
          CFI R5H Frame(CFA, -30)
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+36
        PUSHM.A #0x1, R12
          CFI CFA SP+40
        SUB.W   #0xfe, SP
          CFI CFA SP+294
        CALLA   #get_fattime
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.B   #0x1, R14
        MOV.W   SP, R13
        ADD.W   #0x6, R13
        MOV.W   SP, R12
        ADD.W   #0xfe, R12
        CALLA   #chk_mounted
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_mkdir_3
        MOV.W   SP, R15
        ADD.W   #0x28, R15
        MOVA    R15, 0x1e(SP)
        MOV.W   SP, R15
        ADD.W   #0x34, R15
        MOVA    R15, 0x22(SP)
        MOVA    0xfe(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x6, R12
        CALLA   #follow_path
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_mkdir_4
        MOV.B   #0x8, R11
??f_mkdir_4:
        CMP.B   #0x4, R11
        JNE     ??f_mkdir_5
        MOVA    0x1e(SP), R15
        BIT.B   #0x20, 0xb(R15)
        JNC     ??f_mkdir_5
        MOV.B   #0x6, R11
??f_mkdir_5:
        CMP.B   #0x4, R11
        JNE     ??f_mkdir_3
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    0x6(SP), R12
        CALLA   #create_chain
        MOV.W   R12, R6
        MOV.W   R13, R7
        MOV.B   #0x0, R11
        MOV.W   R6, R15
        BIS.W   R7, R15
        CMP.W   #0x0, R15
        JNE     ??f_mkdir_6
        MOV.B   #0x7, R11
??f_mkdir_6:
        CMP.W   #0x1, R6
        JNE     ??f_mkdir_7
        CMP.W   #0x0, R7
        JNE     ??f_mkdir_7
        MOV.B   #0x2, R11
??f_mkdir_7:
        CMP.W   #0xffff, R6
        JNE     ??f_mkdir_8
        CMP.W   #0xffff, R7
        JNE     ??f_mkdir_8
        MOV.B   #0x1, R11
??f_mkdir_8:
        CMP.B   #0x0, R11
        JNE     ??f_mkdir_9
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    0x6(SP), R12
        CALLA   #move_window
        MOV.B   R12, R11
??f_mkdir_9:
        CMP.B   #0x0, R11
        JNE     ??f_mkdir_2
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    0x6(SP), R12
        CALLA   #clust2sect
        MOV.W   R12, R4
        MOV.W   R13, R5
        MOVA    0x6(SP), R15
        ADDA    #0x32, R15
        MOVA    R15, R10
        MOV.W   #0x200, R14
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #mem_set
        MOV.W   #0xb, R14
        MOV.W   #0x20, R13
        MOVA    R10, R12
        CALLA   #mem_set
        MOV.B   #0x2e, 0(R10)
        MOV.B   #0x10, 0xb(R10)
        MOV.B   R8, 0x16(R10)
        MOV.W   R8, R15
        SWPB    R15
        AND.W   #0xff, R15
        MOV.B   R15, 0x17(R10)
        MOV.B   R9, 0x18(R10)
        MOV.W   R8, R14
        MOV.W   R9, R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x19(R10)
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    R10, R12
        CALLA   #st_clust
        MOV.W   #0x20, R14
        MOVA    R10, R13
        MOVA    R10, R12
        ADDA    #0x20, R12
        CALLA   #mem_cpy
        MOV.B   #0x2e, 0x21(R10)
        MOV.W   0xe(SP), 0x2(SP)
        MOV.W   0x10(SP), 0x4(SP)
        MOVA    0x6(SP), R15
        CMP.B   #0x3, 0(R15)
        JNE     ??f_mkdir_10
        MOVA    0x6(SP), R15
        CMP.W   0x26(R15), 0x2(SP)
        JNE     ??f_mkdir_10
        CMP.W   0x28(R15), 0x4(SP)
        JNE     ??f_mkdir_10
        MOV.W   #0x0, 0x2(SP)
        MOV.W   #0x0, 0x4(SP)
??f_mkdir_10:
        MOV.W   0x2(SP), R14
        MOV.W   0x4(SP), R15
        MOVA    R10, R12
        ADDA    #0x20, R12
        CALLA   #st_clust
        MOVA    0x6(SP), R15
        MOV.B   0x2(R15), 0(SP)
??f_mkdir_0:
        CMP.B   #0x0, 0(SP)
        JEQ     ??f_mkdir_2
        MOVA    0x6(SP), R15
        MOV.W   R4, 0x2e(R15)
        MOV.W   R5, 0x30(R15)
        ADD.W   #0x1, R4
        ADDC.W  #0x0, R5
        MOVA    0x6(SP), R15
        MOV.B   #0x1, 0x4(R15)
        MOV.W   #0x0, R14
        MOV.W   #0x0, R15
        MOVA    0x6(SP), R12
        CALLA   #move_window
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_mkdir_2
        MOV.W   #0x200, R14
        MOV.W   #0x0, R13
        MOVA    R10, R12
        CALLA   #mem_set
        MOV.B   @SP, R14
        ADD.B   #0xff, R14
        MOV.B   R14, 0(SP)
        JMP     ??f_mkdir_0
??f_mkdir_2:
        CMP.B   #0x0, R11
        JNE     ??f_mkdir_11
        MOV.W   SP, R12
        ADD.W   #0x6, R12
        CALLA   #dir_register
        MOV.B   R12, R11
??f_mkdir_11:
        CMP.B   #0x0, R11
        JEQ     ??f_mkdir_12
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    0x6(SP), R12
        CALLA   #remove_chain
        JMP     ??f_mkdir_3
??f_mkdir_12:
        MOVA    0x1a(SP), R10
        MOV.B   #0x10, 0xb(R10)
        MOV.B   R8, 0x16(R10)
        MOV.W   R8, R15
        SWPB    R15
        AND.W   #0xff, R15
        MOV.B   R15, 0x17(R10)
        MOV.B   R9, 0x18(R10)
        MOV.W   R8, R14
        MOV.W   R9, R15
        SWPB    R15
        MOV.B   R15, R14
        MOV.W   #0x0, R15
        MOV.B   R14, 0x19(R10)
        MOV.W   R6, R14
        MOV.W   R7, R15
        MOVA    R10, R12
        CALLA   #st_clust
        MOVA    0x6(SP), R15
        MOV.B   #0x1, 0x4(R15)
        MOVA    0x6(SP), R12
        CALLA   #sync
        MOV.B   R12, R11
??f_mkdir_3:
        MOV.B   R11, R12
        ADD.W   #0x102, SP
          CFI CFA SP+36
        POPM.A  #0x8, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R4H SameValue
          CFI R5H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R4L SameValue
          CFI R5L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock48

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_chmod:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function f_chmod
        FUNCALL f_chmod, chk_mounted
        LOCFRAME CSTACK, 272, STACK
        FUNCALL f_chmod, follow_path
        LOCFRAME CSTACK, 272, STACK
        FUNCALL f_chmod, sync
        LOCFRAME CSTACK, 272, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        PUSHM.A #0x1, R12
          CFI CFA SP+24
        SUB.W   #0xf8, SP
          CFI CFA SP+272
        MOV.B   R13, R10
        MOV.B   R14, R11
        MOV.B   #0x1, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0xf8, R12
        CALLA   #chk_mounted
        MOV.B   R12, R8
        CMP.B   #0x0, R8
        JNE     ??f_chmod_0
        MOV.W   SP, R15
        ADD.W   #0x22, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x2e, R15
        MOVA    R15, 0x1c(SP)
        MOVA    0xf8(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #follow_path
        MOV.B   R12, R8
        CMP.B   #0x0, R8
        JNE     ??f_chmod_1
        MOVA    0x18(SP), R15
        BIT.B   #0x20, 0xb(R15)
        JNC     ??f_chmod_1
        MOV.B   #0x6, R8
??f_chmod_1:
        CMP.B   #0x0, R8
        JNE     ??f_chmod_0
        MOVA    0x14(SP), R9
        CMPA    #0x0, R9
        JNE     ??f_chmod_2
        MOV.B   #0x6, R8
        JMP     ??f_chmod_0
??f_chmod_2:
        AND.B   #0x27, R11
        MOV.B   0xb(R9), R14
        BIC.B   R11, R14
        MOV.B   R10, R15
        AND.B   R11, R15
        BIS.B   R14, R15
        MOV.B   R15, 0xb(R9)
        MOVA    @SP, R15
        MOV.B   #0x1, 0x4(R15)
        MOVA    @SP, R12
        CALLA   #sync
        MOV.B   R12, R8
??f_chmod_0:
        MOV.B   R8, R12
        ADD.W   #0xfc, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock49

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_utime:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function f_utime
        FUNCALL f_utime, chk_mounted
        LOCFRAME CSTACK, 272, STACK
        FUNCALL f_utime, follow_path
        LOCFRAME CSTACK, 272, STACK
        FUNCALL f_utime, sync
        LOCFRAME CSTACK, 272, STACK
        PUSHM.A #0x4, R11
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+20
        PUSHM.A #0x1, R12
          CFI CFA SP+24
        SUB.W   #0xf8, SP
          CFI CFA SP+272
        MOVA    R13, R10
        MOV.B   #0x1, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0xf8, R12
        CALLA   #chk_mounted
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_utime_0
        MOV.W   SP, R15
        ADD.W   #0x22, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x2e, R15
        MOVA    R15, 0x1c(SP)
        MOVA    0xf8(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #follow_path
        MOV.B   R12, R11
        CMP.B   #0x0, R11
        JNE     ??f_utime_1
        MOVA    0x18(SP), R15
        BIT.B   #0x20, 0xb(R15)
        JNC     ??f_utime_1
        MOV.B   #0x6, R11
??f_utime_1:
        CMP.B   #0x0, R11
        JNE     ??f_utime_0
        MOVA    0x14(SP), R8
        CMPA    #0x0, R8
        JNE     ??f_utime_2
        MOV.B   #0x6, R11
        JMP     ??f_utime_0
??f_utime_2:
        MOV.B   0x6(R10), 0x16(R8)
        MOV.B   0x7(R10), 0x17(R8)
        MOV.B   0x4(R10), 0x18(R8)
        MOV.B   0x5(R10), 0x19(R8)
        MOVA    @SP, R15
        MOV.B   #0x1, 0x4(R15)
        MOVA    @SP, R12
        CALLA   #sync
        MOV.B   R12, R11
??f_utime_0:
        MOV.B   R11, R12
        ADD.W   #0xfc, SP
          CFI CFA SP+20
        POPM.A  #0x4, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock50

        RSEG CODE:CODE:REORDER:NOROOT(1)
f_rename:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function f_rename
        FUNCALL f_rename, chk_mounted
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, follow_path
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, mem_cpy
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, mem_cpy
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, follow_path
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, dir_register
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, mem_cpy
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, ld_clust
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, clust2sect
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, move_window
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, st_clust
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, dir_remove
        LOCFRAME CSTACK, 336, STACK
        FUNCALL f_rename, sync
        LOCFRAME CSTACK, 336, STACK
        PUSHM.A #0x6, R11
          CFI R6L Frame(CFA, -28)
          CFI R6H Frame(CFA, -26)
          CFI R7L Frame(CFA, -24)
          CFI R7H Frame(CFA, -22)
          CFI R8L Frame(CFA, -20)
          CFI R8H Frame(CFA, -18)
          CFI R9L Frame(CFA, -16)
          CFI R9H Frame(CFA, -14)
          CFI R10L Frame(CFA, -12)
          CFI R10H Frame(CFA, -10)
          CFI R11L Frame(CFA, -8)
          CFI R11H Frame(CFA, -6)
          CFI CFA SP+28
        PUSHM.A #0x1, R12
          CFI CFA SP+32
        SUB.W   #0x130, SP
          CFI CFA SP+336
        MOVA    R13, R6
        MOV.B   #0x1, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x130, R12
        CALLA   #chk_mounted
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_rename_0
        MOVX.A  @SP, 0x22(SP)
        MOV.W   SP, R15
        ADD.W   #0x44, R15
        MOVA    R15, 0x18(SP)
        MOV.W   SP, R15
        ADD.W   #0x66, R15
        MOVA    R15, 0x1c(SP)
        MOVA    0x130(SP), R13
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #follow_path
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_rename_1
        MOVA    0x18(SP), R15
        BIT.B   #0x20, 0xb(R15)
        JNC     ??f_rename_1
        MOV.B   #0x6, R10
??f_rename_1:
        CMP.B   #0x0, R10
        JNE     ??f_rename_0
        MOVA    0x14(SP), R15
        CMPA    #0x0, R15
        JNE     ??f_rename_2
        MOV.B   #0x4, R10
        JMP     ??f_rename_0
??f_rename_2:
        MOV.W   #0x15, R14
        MOVA    0x14(SP), R13
        ADDA    #0xb, R13
        MOV.W   SP, R12
        ADD.W   #0x50, R12
        CALLA   #mem_cpy
        MOV.W   #0x22, R14
        MOV.W   SP, R13
        ADD.W   #0x0, R13
        MOV.W   SP, R12
        ADD.W   #0x22, R12
        CALLA   #mem_cpy
        MOVA    R6, R13
        MOV.W   SP, R12
        ADD.W   #0x22, R12
        CALLA   #follow_path
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_rename_3
        MOV.B   #0x8, R10
??f_rename_3:
        CMP.B   #0x4, R10
        JNE     ??f_rename_0
        MOV.W   SP, R12
        ADD.W   #0x22, R12
        CALLA   #dir_register
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_rename_0
        MOVA    0x36(SP), R11
        MOV.W   #0x13, R14
        MOV.W   SP, R13
        ADD.W   #0x52, R13
        MOVA    R11, R12
        ADDA    #0xd, R12
        CALLA   #mem_cpy
        MOV.B   0x50(SP), R14
        BIS.B   #0x20, R14
        MOV.B   R14, 0xb(R11)
        MOVA    @SP, R15
        MOV.B   #0x1, 0x4(R15)
        CMP.W   0x2a(SP), 0x8(SP)
        JNE     ??f_rename_4
        CMP.W   0x2c(SP), 0xa(SP)
        JEQ     ??f_rename_5
??f_rename_4:
        BIT.B   #0x10, 0xb(R11)
        JNC     ??f_rename_5
        MOVA    R11, R13
        MOVA    @SP, R12
        CALLA   #ld_clust
        MOV.W   R12, R14
        MOV.W   R13, R15
        MOVA    @SP, R12
        CALLA   #clust2sect
        MOV.W   R12, R8
        MOV.W   R13, R9
        MOV.W   R8, R15
        BIS.W   R9, R15
        CMP.W   #0x0, R15
        JNE     ??f_rename_6
        MOV.B   #0x2, R10
        JMP     ??f_rename_5
??f_rename_6:
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    @SP, R12
        CALLA   #move_window
        MOV.B   R12, R10
        MOVA    @SP, R15
        ADDA    #0x52, R15
        MOVA    R15, R11
        CMP.B   #0x0, R10
        JNE     ??f_rename_5
        CMP.B   #0x2e, 0x1(R11)
        JNE     ??f_rename_5
        MOVA    @SP, R15
        CMP.B   #0x3, 0(R15)
        JNE     ??f_rename_7
        MOVA    @SP, R15
        CMP.W   0x26(R15), 0x2a(SP)
        JNE     ??f_rename_7
        CMP.W   0x28(R15), 0x2c(SP)
        JNE     ??f_rename_7
        MOV.W   #0x0, R8
        MOV.W   #0x0, R9
        JMP     ??f_rename_8
??f_rename_7:
        MOV.W   0x2a(SP), R8
        MOV.W   0x2c(SP), R9
??f_rename_8:
        MOV.W   R8, R14
        MOV.W   R9, R15
        MOVA    R11, R12
        CALLA   #st_clust
        MOVA    @SP, R15
        MOV.B   #0x1, 0x4(R15)
??f_rename_5:
        CMP.B   #0x0, R10
        JNE     ??f_rename_0
        MOV.W   SP, R12
        ADD.W   #0x0, R12
        CALLA   #dir_remove
        MOV.B   R12, R10
        CMP.B   #0x0, R10
        JNE     ??f_rename_0
        MOVA    @SP, R12
        CALLA   #sync
        MOV.B   R12, R10
??f_rename_0:
        MOV.B   R10, R12
        ADD.W   #0x134, SP
          CFI CFA SP+28
        POPM.A  #0x6, R11
          CFI R10H SameValue
          CFI R11H SameValue
          CFI R6H SameValue
          CFI R7H SameValue
          CFI R8H SameValue
          CFI R9H SameValue
          CFI R10L SameValue
          CFI R11L SameValue
          CFI R6L SameValue
          CFI R7L SameValue
          CFI R8L SameValue
          CFI R9L SameValue
          CFI CFA SP+4
        RETA
          CFI EndBlock cfiBlock51

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r4:
        REQUIRE ?setjmp_r4
        REQUIRE ?longjmp_r4

        RSEG CODE:CODE:REORDER:NOROOT(1)
?setjmp_save_r5:
        REQUIRE ?setjmp_r5
        REQUIRE ?longjmp_r5

        END
// 
// 15 434 bytes in segment CODE
//    168 bytes in segment DATA20_C
//    108 bytes in segment DATA20_Z
// 
// 15 434 bytes of CODE  memory
//    168 bytes of CONST memory
//    108 bytes of DATA  memory
//
//Errors: none
//Warnings: none
