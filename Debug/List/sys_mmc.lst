###############################################################################
#                                                                             #
# IAR C/C++ Compiler V5.52.1.50724/W32 for MSP430       26/May/2013  01:02:27 #
# Copyright 1996-2013 IAR Systems AB.                                         #
#                                                                             #
#    __rt_version  =  3                                                       #
#    __double_size =  64                                                      #
#    __reg_r4      =  free                                                    #
#    __reg_r5      =  free                                                    #
#    __pic         =  no                                                      #
#    __core        =  430X                                                    #
#    __data_model  =  large                                                   #
#    Source file   =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer   #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\sys\sys_mmc.c                            #
#    Command line  =  "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\sys\sys_mmc.c" -lC                       #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\Debug\List\" -la                         #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\Debug\List\" -o                          #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\Debug\Obj\" --no_cse --no_unroll         #
#                     --no_inline --no_code_motion --no_tbaa --debug          #
#                     -D__MSP430F5338__ -e --double=64 --dlib_config          #
#                     "C:\Program Files (x86)\IAR Systems\Embedded Workbench  #
#                     6.5\430\LIB\DLIB\dl430xldn.h" -I                        #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1. Software\cleon\intro\"   #
#                     -I "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9.      #
#                     Summer 2013\2_cleon\4. Development\1.                   #
#                     Software\cleon\sys\" -I "C:\Users\woosuk\Dropbox\lws\ES #
#                     L\3. Research\9. Summer 2013\2_cleon\4. Development\1.  #
#                     Software\cleon\hal\" -I "C:\Users\woosuk\Dropbox\lws\ES #
#                     L\3. Research\9. Summer 2013\2_cleon\4. Development\1.  #
#                     Software\cleon\hal\rtclib\" -I                          #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\platform\" -I                            #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1. Software\cleon\fs\" -I   #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\fs\FatFs\" -I                            #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1. Software\cleon\app\" -I  #
#                     "C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer  #
#                     2013\2_cleon\4. Development\1. Software\cleon\"         #
#                     --core=430X --data_model=large -On --multiplier=32      #
#                     --multiplier_location=4C0 --hw_workaround=CPU40         #
#    List file     =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer   #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\Debug\List\sys_mmc.lst                   #
#    Object file   =  C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer   #
#                     2013\2_cleon\4. Development\1.                          #
#                     Software\cleon\Debug\Obj\sys_mmc.r43                    #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\woosuk\Dropbox\lws\ESL\3. Research\9. Summer 2013\2_cleon\4. Development\1. Software\cleon\sys\sys_mmc.c
      1          /**
      2          @file       sys_mmc.c
      3          
      4          @brief      Micro SD card related functions
      5          */
      6          
      7          #include "cleon_conf.h"
      8          #include "app_define.h"
      9          #include "sys_define.h"

   \                                 In  segment DATA16_AN, at 0x200
   \   union <unnamed> __data16 _A_PAIN_L
   \                     _A_PAIN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x202
   \   union <unnamed> __data16 _A_PAOUT_L
   \                     _A_PAOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x204
   \   union <unnamed> __data16 _A_PADIR_L
   \                     _A_PADIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x20a
   \   union <unnamed> __data16 _A_PASEL_L
   \                     _A_PASEL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x218
   \   union <unnamed> __data16 _A_PAIES_L
   \                     _A_PAIES_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x21a
   \   union <unnamed> __data16 _A_PAIE_L
   \                     _A_PAIE_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x262
   \   union <unnamed> __data16 _A_PDOUT_L
   \                     _A_PDOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x264
   \   union <unnamed> __data16 _A_PDDIR_L
   \                     _A_PDDIR_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x266
   \   union <unnamed> __data16 _A_PDREN_L
   \                     _A_PDREN_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x26a
   \   union <unnamed> __data16 _A_PDSEL_L
   \                     _A_PDSEL_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x282
   \   union <unnamed> __data16 _A_PEOUT_L
   \                     _A_PEOUT_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x620
   \   union <unnamed> __data16 _A_UCB1CTLW0_L
   \                     _A_UCB1CTLW0_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x626
   \   union <unnamed> __data16 _A_UCB1BRW_L
   \                     _A_UCB1BRW_L:
   \   000000                DS8 2

   \                                 In  segment DATA16_AN, at 0x62a
   \   unsigned char volatile __data16 UCB1STAT
   \                     UCB1STAT:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x62c
   \   unsigned char const volatile __data16 UCB1RXBUF
   \                     UCB1RXBUF:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x62e
   \   unsigned char volatile __data16 UCB1TXBUF
   \                     UCB1TXBUF:
   \   000000                DS8 1

   \                                 In  segment DATA16_AN, at 0x63c
   \   union <unnamed> __data16 _A_UCB1ICTL_L
   \                     _A_UCB1ICTL_L:
   \   000000                DS8 2
     10          #include "hal_define.h"
     11          #include "fs_define.h"
     12          
     13          // File system variables
     14          extern FATFS Fatfs;     
     15          extern FIL   fileObject;      
     16          
     17          // Flags

   \                                 In  segment DATA20_Z, align 1, align-sorted
   \   000000                REQUIRE ?cstart_init_zero20
     18          bool bFLAG_MicroSDInserted = _CLEAR_;
   \                     bFLAG_MicroSDInserted:
   \   000000                DS8 1
     19          
     20          /*----------------------------------------------------------------------------*/
     21          /**
     22          @brief    Initializing microcontroller
     23          
     24          @return   void 
     25          
     26          @param    void
     27          */

   \                                 In  segment CODE, align 2
     28          void SYS_MMC_Init(void)
   \                     SYS_MMC_Init:
     29          { 
     30              SYS_MMC_InitIO();
   \   000000   ........     CALLA   #SYS_MMC_InitIO
     31              
     32              // Check if MicroSD is inserted
     33              if(SYS_MMC_IsMicroSDInserted() == _SET_){
   \   000004   E2B20002     BIT.B   #0x4, &0x200
   \   000008   152C         JC      ??SYS_MMC_Init_0
     34                  bFLAG_MicroSDInserted = _SET_;
   \   00000A   ....D243.... MOVX.B  #0x1, &bFLAG_MicroSDInserted
     35                  
     36          #if SYS_MMC_LED_INDICATION_FOR_ERROR == _ENABLE_      
     37                  MICRO_SD_ERROR_LED_OFF();
   \   000010   F2D080008202 BIS.B   #0x80, &0x282
     38          #endif                
     39                  
     40                  // Initializing file system
     41                  FS_Init();
   \   000016   ........     CALLA   #FS_Init
     42                  
     43                  // Mount FatFs moudle
     44                  FS_Mount(0, &Fatfs);
   \   00001A   ........     MOVA    #Fatfs, R13
   \   00001E   4C43         MOV.B   #0x0, R12
   \   000020   ........     CALLA   #f_mount
     45                  
     46                  // Create directory named 'CLEON'
     47                  FS_MakeDir("CLEON");
   \   000024   ........     MOVA    #`?<Constant "CLEON">`, R12
   \   000028   ........     CALLA   #f_mkdir
     48                  
     49                  // Change directory to 'CLEON'
     50                  FS_ChangeDir("/CLEON");
   \   00002C   ........     MOVA    #`?<Constant "/CLEON">`, R12
   \   000030   ........     BRA     #f_chdir
     51                  
     52              }else{
     53          #if SYS_MMC_LED_INDICATION_FOR_ERROR == _ENABLE_      
     54                  MICRO_SD_ERROR_LED_ON();
   \                     ??SYS_MMC_Init_0:
   \   000034   F2C080008202 BIC.B   #0x80, &0x282
     55          #endif        
     56              }
     57          }
   \   00003A   1001         RETA
   \   00003C                REQUIRE _A_PAIN_L
   \   00003C                REQUIRE _A_PEOUT_L
     58          
     59          /*----------------------------------------------------------------------------*/
     60          /**
     61          @brief    Initializing Micro SD interface pins
     62          
     63          @return   void 
     64          
     65          @param    void
     66          */

   \                                 In  segment CODE, align 2
     67          void SYS_MMC_InitIO(void)
   \                     SYS_MMC_InitIO:
     68          {
     69              MICROSD_MOSI_PORT(SEL)   |=  BV(MICROSD_MOSI_PIN);
   \   000000   F2D020006B02 BIS.B   #0x20, &0x26b
     70              MICROSD_MISO_PORT(SEL)   |=  BV(MICROSD_MISO_PIN);
   \   000006   F2D040006B02 BIS.B   #0x40, &0x26b
     71              MICROSD_CLK_PORT(SEL)    |=  BV(MICROSD_CLK_PIN);
   \   00000C   F2D010006B02 BIS.B   #0x10, &0x26b
     72              
     73              MICROSD_MOSI_PORT(DIR)   |=  BV(MICROSD_MOSI_PIN);
   \   000012   F2D020006502 BIS.B   #0x20, &0x265
     74              MICROSD_CLK_PORT(DIR)    |=  BV(MICROSD_CLK_PIN);
   \   000018   F2D010006502 BIS.B   #0x10, &0x265
     75              
     76              MICROSD_CS_PORT(SEL)     &= ~BV(MICROSD_CS_PIN);
   \   00001E   F2C040000A02 BIC.B   #0x40, &0x20a
     77              MICROSD_CS_PORT(OUT)     |=  BV(MICROSD_CS_PIN);
   \   000024   F2D040000202 BIS.B   #0x40, &0x202
     78              MICROSD_CS_PORT(DIR)     |=  BV(MICROSD_CS_PIN);
   \   00002A   F2D040000402 BIS.B   #0x40, &0x204
     79              
     80              MICROSD_MOSI_PORT(REN)   |=  BV(MICROSD_MOSI_PIN);
   \   000030   F2D020006702 BIS.B   #0x20, &0x267
     81              MICROSD_MISO_PORT(REN)   |=  BV(MICROSD_MISO_PIN);
   \   000036   F2D040006702 BIS.B   #0x40, &0x267
     82              
     83              MICROSD_MOSI_PORT(OUT)   |=  BV(MICROSD_MOSI_PIN);
   \   00003C   F2D020006302 BIS.B   #0x20, &0x263
     84              MICROSD_MISO_PORT(OUT)   |=  BV(MICROSD_MISO_PIN);
   \   000042   F2D040006302 BIS.B   #0x40, &0x263
     85              
     86              MICROSD_STATUS_PORT(DIR) &= ~BV(MICROSD_STATUS_PIN);
   \   000048   E2C20402     BIC.B   #0x4, &0x204
     87              MICROSD_STATUS_PORT(IES) &= ~BV(MICROSD_STATUS_PIN);
   \   00004C   E2C21802     BIC.B   #0x4, &0x218
     88              MICROSD_STATUS_PORT(IE)  |=  BV(MICROSD_STATUS_PIN);
   \   000050   E2D21A02     BIS.B   #0x4, &0x21a
     89          }
   \   000054   1001         RETA
   \   000056                REQUIRE _A_PDSEL_L
   \   000056                REQUIRE _A_PDDIR_L
   \   000056                REQUIRE _A_PASEL_L
   \   000056                REQUIRE _A_PAOUT_L
   \   000056                REQUIRE _A_PADIR_L
   \   000056                REQUIRE _A_PDREN_L
   \   000056                REQUIRE _A_PDOUT_L
   \   000056                REQUIRE _A_PAIES_L
   \   000056                REQUIRE _A_PAIE_L
     90          
     91          /*----------------------------------------------------------------------------*/
     92          /**
     93          @brief    Enable fast SD card SPI transfer. 
     94                    
     95          @return   void 
     96          
     97          @param    void
     98          */

   \                                 In  segment CODE, align 2
     99          void SYS_MMC_FastMode(void)
   \                     SYS_MMC_FastMode:
    100          {
    101              UCB1CTL1 |= UCSWRST;    // Put state machine in reset
   \   000000   D2D32006     BIS.B   #0x1, &0x620
    102              UCB1BR0 = 2;            // f_UCxCLK = 12MHz/2 = 6MHz
   \   000004   E2432606     MOV.B   #0x2, &0x626
    103              UCB1BR1 = 0;    
   \   000008   C2432706     MOV.B   #0x0, &0x627
    104              UCB1CTL1 &= ~UCSWRST;   // Release USCI state machine
   \   00000C   D2C32006     BIC.B   #0x1, &0x620
    105          }
   \   000010   1001         RETA
   \   000012                REQUIRE _A_UCB1CTLW0_L
   \   000012                REQUIRE _A_UCB1BRW_L
    106          
    107          /*----------------------------------------------------------------------------*/
    108          /**
    109          @brief    Read a frame of bytes via SPI
    110                    
    111          @return   void 
    112          
    113          @param    ptrucBuffer - Place to store the received bytes
    114          @param    uiSize - Indicator of how many bytes to read
    115          */

   \                                 In  segment CODE, align 2
    116          void SYS_MMC_ReadFrame(unsigned char* ptrucBuffer, unsigned int uiSize)
   \                     SYS_MMC_ReadFrame:
    117          {
    118              unsigned int uiGIE = __get_SR_register() & GIE;         //Store current GIE state
   \   000000   0E42         MOV.W   SR, R14
   \   000002   3EF2         AND.W   #0x8, R14
    119          
    120              __disable_interrupt();                                  //Make this operation atomic
   \   000004   32C2         DINT
   \   000006   0343         NOP
    121          
    122              UCB1IFG &= ~UCRXIFG;                                    //Ensure RXIFG is clear
   \   000008   D2C33D06     BIC.B   #0x1, &0x63d
    123          
    124              //Clock the actual data transfer and receive the bytes
    125              while (uiSize--){
   \                     ??SYS_MMC_ReadFrame_2:
   \   00000C   0F4D         MOV.W   R13, R15
   \   00000E   0D4F         MOV.W   R15, R13
   \   000010   3D53         ADD.W   #0xffff, R13
   \   000012   0F93         CMP.W   #0x0, R15
   \   000014   0E24         JEQ     ??SYS_MMC_ReadFrame_3
    126                  while (!(UCB1IFG & UCTXIFG)) ;                      //Wait while not ready for TX
   \                     ??SYS_MMC_ReadFrame_0:
   \   000016   E2B33D06     BIT.B   #0x2, &0x63d
   \   00001A   FD2B         JNC     ??SYS_MMC_ReadFrame_0
    127                  UCB1TXBUF = 0xff;                                   //Write dummy byte
   \   00001C   F2432E06     MOV.B   #0xff, &0x62e
    128                  while (!(UCB1IFG & UCRXIFG)) ;                      //Wait for RX buffer (full)
   \                     ??SYS_MMC_ReadFrame_1:
   \   000020   D2B33D06     BIT.B   #0x1, &0x63d
   \   000024   FD2B         JNC     ??SYS_MMC_ReadFrame_1
    129                  *ptrucBuffer++ = UCB1RXBUF;
   \   000026   DC422C060000 MOV.B   &0x62c, 0(R12)
   \   00002C   AC000100     ADDA    #0x1, R12
   \   000030   ED3F         JMP     ??SYS_MMC_ReadFrame_2
    130              }
    131          
    132              __bis_SR_register(uiGIE);                               //Restore original GIE state
   \                     ??SYS_MMC_ReadFrame_3:
   \   000032   02DE         BIS.W   R14, SR
    133          }
   \   000034   1001         RETA
   \   000036                REQUIRE _A_UCB1ICTL_L
   \   000036                REQUIRE UCB1TXBUF
   \   000036                REQUIRE UCB1RXBUF
    134          
    135          /*----------------------------------------------------------------------------*/
    136          /**
    137          @brief    Send a frame of bytes via SPI
    138                    
    139          @return   void 
    140          
    141          @param    ptrucBuffer - Place that holds the bytes to send
    142          @param    uiSize - Indicator of how many bytes to send
    143          */

   \                                 In  segment CODE, align 2
    144          void SYS_MMC_SendFrame(unsigned char* ptrucBuffer, unsigned int uiSize)
   \                     SYS_MMC_SendFrame:
    145          {
    146              unsigned int uiGIE = __get_SR_register() & GIE;         //Store current GIE state
   \   000000   0E42         MOV.W   SR, R14
   \   000002   3EF2         AND.W   #0x8, R14
    147          
    148              __disable_interrupt();                                  //Make this operation atomic
   \   000004   32C2         DINT
   \   000006   0343         NOP
    149          
    150              //Clock the actual data transfer and send the bytes. Note that we
    151              //intentionally not read out the receive buffer during frame transmission
    152              //in order to optimize transfer speed, however we need to take care of the
    153              //resulting overrun condition.
    154              while (uiSize--){
   \                     ??SYS_MMC_SendFrame_1:
   \   000008   0F4D         MOV.W   R13, R15
   \   00000A   0D4F         MOV.W   R15, R13
   \   00000C   3D53         ADD.W   #0xffff, R13
   \   00000E   0F93         CMP.W   #0x0, R15
   \   000010   0824         JEQ     ??SYS_MMC_SendFrame_2
    155                  while (!(UCB1IFG & UCTXIFG)) ;                      //Wait while not ready for TX
   \                     ??SYS_MMC_SendFrame_0:
   \   000012   E2B33D06     BIT.B   #0x2, &0x63d
   \   000016   FD2B         JNC     ??SYS_MMC_SendFrame_0
    156                  UCB1TXBUF = *ptrucBuffer++;                         //Write byte
   \   000018   E24C2E06     MOV.B   @R12, &0x62e
   \   00001C   AC000100     ADDA    #0x1, R12
   \   000020   F33F         JMP     ??SYS_MMC_SendFrame_1
    157              }
    158              while (UCB1STAT & UCBUSY) ;                             //Wait for all TX/RX to finish
   \                     ??SYS_MMC_SendFrame_2:
   \   000022   D2B32A06     BIT.B   #0x1, &0x62a
   \   000026   FD2F         JC      ??SYS_MMC_SendFrame_2
    159          
    160              UCB1RXBUF;                                              //Dummy read to empty RX buffer
   \   000028   5F422C06     MOV.B   &0x62c, R15
    161                                                                      //and clear any overrun conditions
    162          
    163              __bis_SR_register(uiGIE);                               //Restore original GIE state
   \   00002C   02DE         BIS.W   R14, SR
    164          }
   \   00002E   1001         RETA
   \   000030                REQUIRE _A_UCB1ICTL_L
   \   000030                REQUIRE UCB1TXBUF
   \   000030                REQUIRE UCB1STAT
   \   000030                REQUIRE UCB1RXBUF
    165          
    166          /*----------------------------------------------------------------------------*/
    167          /**
    168          @brief    Set the SD Card's chip-select signal to high
    169                    
    170          @return   void 
    171          
    172          @param    void
    173          */

   \                                 In  segment CODE, align 2
    174          void SYS_MMC_DeselectCard(void)
   \                     SYS_MMC_DeselectCard:
    175          {
    176              MICROSD_CS_PORT(OUT) |=  BV(MICROSD_CS_PIN);
   \   000000   F2D040000202 BIS.B   #0x40, &0x202
    177          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L
    178          
    179          /*----------------------------------------------------------------------------*/
    180          /**
    181          @brief    Set the SD Card's chip-select signal to low
    182                    
    183          @return   void 
    184          
    185          @param    void
    186          */

   \                                 In  segment CODE, align 2
    187          void SYS_MMC_SelectCard(void)
   \                     SYS_MMC_SelectCard:
    188          {
    189              MICROSD_CS_PORT(OUT) &= ~BV(MICROSD_CS_PIN);
   \   000000   F2C040000202 BIC.B   #0x40, &0x202
    190          }
   \   000006   1001         RETA
   \   000008                REQUIRE _A_PAOUT_L

   \                                 In  segment DATA20_C, align 1, align-sorted
   \                     `?<Constant "CLEON">`:
   \   000000   434C454F4E00 DC8 "CLEON"

   \                                 In  segment DATA20_C, align 1, align-sorted
   \                     `?<Constant "/CLEON">`:
   \   000000   2F434C454F4E DC8 "/CLEON"
   \            00          

   Maximum stack usage in bytes:

   CSTACK Function
   ------ --------
      4   SYS_MMC_DeselectCard
      4   SYS_MMC_FastMode
      4   SYS_MMC_Init
        4   -> FS_Init
        4   -> SYS_MMC_InitIO
        4   -> f_chdir
        4   -> f_mkdir
        4   -> f_mount
      4   SYS_MMC_InitIO
      4   SYS_MMC_ReadFrame
      4   SYS_MMC_SelectCard
      4   SYS_MMC_SendFrame


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       7  ?<Constant "/CLEON">
       6  ?<Constant "CLEON">
       8  SYS_MMC_DeselectCard
      18  SYS_MMC_FastMode
      60  SYS_MMC_Init
      86  SYS_MMC_InitIO
      54  SYS_MMC_ReadFrame
       8  SYS_MMC_SelectCard
      48  SYS_MMC_SendFrame
       1  UCB1RXBUF
       1  UCB1STAT
       1  UCB1TXBUF
       2  _A_PADIR_L
       2  _A_PAIES_L
       2  _A_PAIE_L
       2  _A_PAIN_L
       2  _A_PAOUT_L
       2  _A_PASEL_L
       2  _A_PDDIR_L
       2  _A_PDOUT_L
       2  _A_PDREN_L
       2  _A_PDSEL_L
       2  _A_PEOUT_L
       2  _A_UCB1BRW_L
       2  _A_UCB1CTLW0_L
       2  _A_UCB1ICTL_L
       1  bFLAG_MicroSDInserted

 
 282 bytes in segment CODE
  31 bytes in segment DATA16_AN
  13 bytes in segment DATA20_C
   1 byte  in segment DATA20_Z
 
 282 bytes of CODE  memory
  13 bytes of CONST memory
   1 byte  of DATA  memory (+ 31 bytes shared)

Errors: none
Warnings: none
